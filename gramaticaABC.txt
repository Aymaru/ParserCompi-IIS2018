<S> ::= PROGRAM id nl <SeccionConstantes> nl <SeccionVariables> nl <Rutinas> nl <EntradaPrograma> 

<EntradaPrograma> ::= BEGIN nl <Instrucciones> nl END

**** Declaracion de Constantes y Variables ****

<SeccionConstantes> ::= CONST nl <Constantes> 
<SeccionConstantes> ::= epsilon

<Constantes> ::= <Constante> nl <Constantes>
<Constantes> ::= epsilon

<Constante> ::= id = <literal> ;
<Constante> ::= epsilon

<SeccionVariables> ::= VAR nl <Variables>
<SeccionVariables> ::= epsilon

<Variables> ::= <Variable> nl <Variables>
<Variables> ::= epsilon

<Variable> ::= id <Identificadores> : <Tipo> <Inicializar> ;
<Variable> ::= epsilon

<Identificadores> ::= , id <Identificadores>
<Identificadores> ::= epsilon

<Inicializar> ::= = <literal>
<Inicializar> ::= epsilon

**** Rutinas ****

<Rutinas> ::= <Rutina> nl <Rutinas>
<Rutinas> ::= epsilon

<Rutina> ::= <EncabezadoProcedimiento> nl BEGIN nl <Instrucciones> END nl
<Rutina> ::= <EncabezadoFuncion> nl BEGIN nl <Instrucciones> END nl
<Rutina> ::= epsilon

<EncabezadoProcedimiento> ::= PROCEDURE id ( <Parametros> )
<EncabezadoFuncion> ::= FUNCTION id ( <Parametros> ) : <Tipo>

<Parametros> ::= <Parametro>
<Parametros> ::= epsilon

<Parametro> ::= <Tipo> id <masParametros>
<Parametro> ::= epsilon

<masParametros> ::= , <Tipo> id <masParametros>
<masParametros> ::= epsilon

**** Expresiones ****

<Instrucciones> ::= <Instruccion> nl <Instrucciones>
<Instrucciones> ::= epsilon

<Expresion> ::= <Expresion2> <ExpresionOperadoresLogicos>

<ExpresionOperadoresLogicos> ::= <OperadoresLogicosBinarios> <Expresion2> <ExpresionOperadoresLogicos>
<ExpresionOperadoresLogicos> ::= epsilon

<Expresion2> ::= <Expresion3> <ExpresionOperadoresComparacion>

<ExpresionOperadoresComparacion> ::= <OperadoresComparacion> <Expresion3> <ExpresionOperadoresComparacion>
<ExpresionOperadoresComparacion> ::= epsilon

<Expresion3> ::= <Expresion4> <ExpresionOperadoresEnteros>

<ExpresionOperadoresEnteros> ::= <OperadoresEnteros> <Expresion4> <ExpresionOperadoresEnteros>
<ExpresionOperadoresEnteros> ::= epsilon

<Expresion4> ::= <IncrementoDecremento> <Expresion5>
<Expresion4> ::= <OperadoresLogicosUnarios> <Expresion5>
<Expresion4> ::= <Expresion5>

<Expresion5> ::= <Expresion6> <IncrementoDecremento>

<Expresion6> ::= id <Expresion7> 
<Expresion6> ::= ( <Expresion> )
<Expresion6> ::= <literal>

<Expresion7> ::= <ExpresionAsignacion>
<Expresion7> ::= ( <Parametro> )

<ExpresionAsignacion> ::= <OperadorAsignacion> <Expresion>
<ExpresionAsignacion> ::= epsilon

<Parametro> ::= Expresion <ListaParametros>
<Parametro> ::= epsilon

<ListaParametros> ::= , Expresion <ListaParametros>
<ListaParametros> ::= epsilon

<Instruccion> ::= <IfThenElse>
<Instruccion> ::= <While>
<Instruccion> ::= <For> 
<Instruccion> ::= <Expresion> ; nl

<IfThenElse> ::= IF <Expresion> nl THEN <Instrucciones> nl <Else> END nl

<Else> ::= ELSE <Instrucciones> nl
<Else> ::= epsilon

<While> ::= WHILE <Expresion> DO nl BEGIN nl <Instrucciones> END nl

<For> ::= FOR id := <Expresion> TO <Expresion> DO nl BEGIN nl <Instrucciones> END nl

**** Operadores ****

<IncrementoDecremento> ::= ++
<IncrementoDecremento> ::= --
<IncrementoDecremento> ::= epsilon
 
<OperadoresEnteros> ::= +
<OperadoresEnteros> ::= -
<OperadoresEnteros> ::= *
<OperadoresEnteros> ::= /
<OperadoresEnteros> ::= MOD
<OperadoresEnteros> ::= DIV

<OperadorAsignacion> ::= :=
<OperadorAsignacion> ::= +=
<OperadorAsignacion> ::= -=
<OperadorAsignacion> ::= *=
<OperadorAsignacion> ::= /=

<OperadoresComparacion> ::= =
<OperadoresComparacion> ::= >=
<OperadoresComparacion> ::= >
<OperadoresComparacion> ::= <=
<OperadoresComparacion> ::= <
<OperadoresComparacion> ::= <>

<OperadoresLogicosBinarios> ::= OR
<OperadoresLogicosBinarios> ::= AND

<OperadoresLogicosUnarios> ::= NOT

**** Tipos y Literales ****

<Tipo> ::= BOOLEAN 
<Tipo> ::= INT
<Tipo> ::= CHAR
<Tipo> ::= LONGINT
<Tipo> ::= SHORTINT
<Tipo> ::= STRING
<Tipo> ::= REAL

<literal> ::= literal_entero
<literal> ::= literal_longint
<literal> ::= literal_shortint
<literal> ::= literal_real
<literal> ::= literal_string
<literal> ::= literal_char
<literal> ::= <Boolean>

<Boolean> ::= TRUE
<Boolean> ::= FALSE
