
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 26 23:49:00 CST 2018
//----------------------------------------------------

package Compilador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Analisis_Semantico.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 26 23:49:00 CST 2018
  */
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\232\000\002\002\004\000\002\104\002\000\002\105" +
    "\002\000\002\007\012\000\002\007\003\000\002\106\002" +
    "\000\002\013\006\000\002\014\004\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\007\000\002" +
    "\016\004\000\002\017\004\000\002\017\004\000\002\017" +
    "\003\000\002\021\004\000\002\021\003\000\002\022\003" +
    "\000\002\022\003\000\002\107\002\000\002\023\012\000" +
    "\002\023\004\000\002\025\004\000\002\025\003\000\002" +
    "\026\005\000\002\026\003\000\002\027\004\000\002\027" +
    "\003\000\002\030\003\000\002\030\003\000\002\031\007" +
    "\000\002\031\007\000\002\003\003\000\002\003\003\000" +
    "\002\032\004\000\002\032\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\007\000\002\034\004\000\002\035" +
    "\004\000\002\035\004\000\002\035\003\000\002\036\004" +
    "\000\002\036\003\000\002\037\003\000\002\037\003\000" +
    "\002\040\011\000\002\040\004\000\002\041\007\000\002" +
    "\041\007\000\002\042\011\000\002\042\011\000\002\042" +
    "\011\000\002\005\003\000\002\005\003\000\002\043\003" +
    "\000\002\110\002\000\002\044\006\000\002\044\004\000" +
    "\002\044\003\000\002\045\006\000\002\045\003\000\002" +
    "\046\004\000\002\046\003\000\002\051\004\000\002\052" +
    "\005\000\002\052\003\000\002\053\004\000\002\054\005" +
    "\000\002\054\003\000\002\055\004\000\002\111\002\000" +
    "\002\112\002\000\002\056\007\000\002\056\003\000\002" +
    "\057\004\000\002\057\004\000\002\057\003\000\002\060" +
    "\004\000\002\061\004\000\002\061\005\000\002\061\005" +
    "\000\002\061\003\000\002\062\003\000\002\062\005\000" +
    "\002\062\005\000\002\065\004\000\002\065\003\000\002" +
    "\063\004\000\002\063\003\000\002\064\005\000\002\064" +
    "\004\000\002\064\003\000\002\066\003\000\002\066\003" +
    "\000\002\047\003\000\002\047\003\000\002\047\003\000" +
    "\002\047\004\000\002\050\004\000\002\050\004\000\002" +
    "\067\010\000\002\067\006\000\002\067\010\000\002\070" +
    "\004\000\002\070\003\000\002\113\002\000\002\114\002" +
    "\000\002\071\012\000\002\071\005\000\002\072\014\000" +
    "\002\072\005\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\074\003\000\002\074\003\000\002\074\003" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\076\003\000\002\076" +
    "\003\000\002\076\003\000\002\077\003\000\002\077\003" +
    "\000\002\100\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\101\003\000\002" +
    "\101\003\000\002\101\003\000\002\101\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\102\003" +
    "\000\002\102\003\000\002\103\003\000\002\103\003\000" +
    "\002\012\003\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\006\003\004\032\005\001\002\000\004\002" +
    "\ufffd\001\002\000\004\010\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\014\015\000\033" +
    "\000\052\000\064\000\071\000\001\002\000\014\015\uff68" +
    "\033\uff68\052\uff68\064\014\071\uff68\001\002\000\012\015" +
    "\ufff9\033\ufff9\052\ufff9\071\ufff9\001\002\000\012\015\360" +
    "\033\uff68\052\uff68\071\uff68\001\002\000\016\003\016\010" +
    "\017\015\uff68\033\uff68\052\uff68\071\uff68\001\002\000\012" +
    "\015\ufffa\033\ufffa\052\ufffa\071\ufffa\001\002\000\014\015" +
    "\041\033\047\052\045\071\uff68\110\042\001\002\000\076" +
    "\003\uff69\021\uff69\022\uff69\035\uff69\041\uff69\062\uff69\063" +
    "\uff69\073\uff69\100\uff69\101\uff69\102\uff69\103\uff69\104\uff69" +
    "\107\uff69\110\uff69\111\uff69\112\uff69\113\uff69\114\uff69\116" +
    "\uff69\117\uff69\120\uff69\121\uff69\122\uff69\123\uff69\124\uff69" +
    "\125\uff69\126\uff69\127\uff69\130\uff69\001\002\000\012\015" +
    "\ufff8\033\ufff8\052\ufff8\071\ufff8\001\002\000\012\015\ufff7" +
    "\033\ufff7\052\ufff7\071\ufff7\001\002\000\004\102\023\001" +
    "\002\000\016\004\025\005\033\006\031\007\024\020\027" +
    "\056\030\001\002\000\060\003\uff6e\021\uff6e\022\uff6e\035" +
    "\uff6e\041\uff6e\062\uff6e\063\uff6e\073\uff6e\100\uff6e\101\uff6e" +
    "\102\uff6e\103\uff6e\104\uff6e\107\uff6e\110\uff6e\114\uff6e\117" +
    "\uff6e\120\uff6e\121\uff6e\123\uff6e\124\uff6e\126\uff6e\127\uff6e" +
    "\001\002\000\060\003\uff70\021\uff70\022\uff70\035\uff70\041" +
    "\uff70\062\uff70\063\uff70\073\uff70\100\uff70\101\uff70\102\uff70" +
    "\103\uff70\104\uff70\107\uff70\110\uff70\114\uff70\117\uff70\120" +
    "\uff70\121\uff70\123\uff70\124\uff70\126\uff70\127\uff70\001\002" +
    "\000\004\110\034\001\002\000\060\003\uff6b\021\uff6b\022" +
    "\uff6b\035\uff6b\041\uff6b\062\uff6b\063\uff6b\073\uff6b\100\uff6b" +
    "\101\uff6b\102\uff6b\103\uff6b\104\uff6b\107\uff6b\110\uff6b\114" +
    "\uff6b\117\uff6b\120\uff6b\121\uff6b\123\uff6b\124\uff6b\126\uff6b" +
    "\127\uff6b\001\002\000\060\003\uff6a\021\uff6a\022\uff6a\035" +
    "\uff6a\041\uff6a\062\uff6a\063\uff6a\073\uff6a\100\uff6a\101\uff6a" +
    "\102\uff6a\103\uff6a\104\uff6a\107\uff6a\110\uff6a\114\uff6a\117" +
    "\uff6a\120\uff6a\121\uff6a\123\uff6a\124\uff6a\126\uff6a\127\uff6a" +
    "\001\002\000\060\003\uff6f\021\uff6f\022\uff6f\035\uff6f\041" +
    "\uff6f\062\uff6f\063\uff6f\073\uff6f\100\uff6f\101\uff6f\102\uff6f" +
    "\103\uff6f\104\uff6f\107\uff6f\110\uff6f\114\uff6f\117\uff6f\120" +
    "\uff6f\121\uff6f\123\uff6f\124\uff6f\126\uff6f\127\uff6f\001\002" +
    "\000\060\003\uff6c\021\uff6c\022\uff6c\035\uff6c\041\uff6c\062" +
    "\uff6c\063\uff6c\073\uff6c\100\uff6c\101\uff6c\102\uff6c\103\uff6c" +
    "\104\uff6c\107\uff6c\110\uff6c\114\uff6c\117\uff6c\120\uff6c\121" +
    "\uff6c\123\uff6c\124\uff6c\126\uff6c\127\uff6c\001\002\000\060" +
    "\003\uff6d\021\uff6d\022\uff6d\035\uff6d\041\uff6d\062\uff6d\063" +
    "\uff6d\073\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d\104\uff6d" +
    "\107\uff6d\110\uff6d\114\uff6d\117\uff6d\120\uff6d\121\uff6d\123" +
    "\uff6d\124\uff6d\126\uff6d\127\uff6d\001\002\000\016\003\016" +
    "\010\017\015\uff68\033\uff68\052\uff68\071\uff68\001\002\000" +
    "\012\015\ufff6\033\ufff6\052\ufff6\071\ufff6\001\002\000\012" +
    "\015\ufff2\033\ufff2\052\ufff2\071\ufff2\001\002\000\012\015" +
    "\uffe4\033\uffe4\052\uffe4\071\uffe4\001\002\000\004\071\352" +
    "\001\002\000\016\003\323\010\017\015\uff68\033\uff68\052" +
    "\uff68\071\uff68\001\002\000\016\003\016\010\017\015\uff68" +
    "\033\uff68\052\uff68\071\uff68\001\002\000\004\071\122\001" +
    "\002\000\012\015\uffe3\033\uffe3\052\uffe3\071\uffe3\001\002" +
    "\000\004\010\017\001\002\000\012\015\ufff5\033\ufff5\052" +
    "\ufff5\071\ufff5\001\002\000\004\010\050\001\002\000\004" +
    "\130\101\001\002\000\004\130\052\001\002\000\024\023" +
    "\066\024\055\030\053\042\061\043\056\045\065\065\057" +
    "\070\064\127\uff68\001\002\000\014\003\uff72\010\uff72\071" +
    "\uff72\102\uff72\110\uff72\001\002\000\006\003\070\010\uffc7" +
    "\001\002\000\014\003\uff74\010\uff74\071\uff74\102\uff74\110" +
    "\uff74\001\002\000\014\003\uff71\010\uff71\071\uff71\102\uff71" +
    "\110\uff71\001\002\000\014\003\uff76\010\uff76\071\uff76\102" +
    "\uff76\110\uff76\001\002\000\004\127\uffc4\001\002\000\014" +
    "\003\uff75\010\uff75\071\uff75\102\uff75\110\uff75\001\002\000" +
    "\004\127\uffc8\001\002\000\004\127\067\001\002\000\014" +
    "\003\uff78\010\uff78\071\uff78\102\uff78\110\uff78\001\002\000" +
    "\014\003\uff77\010\uff77\071\uff77\102\uff77\110\uff77\001\002" +
    "\000\014\003\uff73\010\uff73\071\uff73\102\uff73\110\uff73\001" +
    "\002\000\004\071\uffcf\001\002\000\004\127\uffc5\001\002" +
    "\000\004\010\017\001\002\000\006\121\075\127\uff68\001" +
    "\002\000\004\127\uffc6\001\002\000\004\127\uffc2\001\002" +
    "\000\022\023\066\024\055\030\053\042\061\043\056\045" +
    "\065\065\057\070\064\001\002\000\004\010\077\001\002" +
    "\000\006\121\075\127\uff68\001\002\000\004\127\uffc3\001" +
    "\002\000\004\003\102\001\002\000\004\127\103\001\002" +
    "\000\004\071\uffce\001\002\000\004\130\105\001\002\000" +
    "\026\003\107\023\066\024\055\030\053\042\061\043\056" +
    "\045\065\065\057\070\064\127\uff68\001\002\000\004\127" +
    "\113\001\002\000\004\127\110\001\002\000\004\112\111" +
    "\001\002\000\022\023\066\024\055\030\053\042\061\043" +
    "\056\045\065\065\057\070\064\001\002\000\004\071\uffcc" +
    "\001\002\000\006\003\114\112\115\001\002\000\022\023" +
    "\066\024\055\030\053\042\061\043\056\045\065\065\057" +
    "\070\064\001\002\000\022\023\066\024\055\030\053\042" +
    "\061\043\056\045\065\065\057\070\064\001\002\000\004" +
    "\071\uffcd\001\002\000\004\071\uffc9\001\002\000\004\071" +
    "\uffcb\001\002\000\004\071\uffca\001\002\000\042\003\144" +
    "\004\025\005\033\006\031\007\024\010\017\014\154\020" +
    "\027\037\124\050\131\054\126\056\030\057\uff68\117\125" +
    "\123\133\130\141\001\002\000\044\003\uff9e\004\uff9e\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\014\uff9e\020\uff9e\037\uff9e" +
    "\050\uff9e\054\uff9e\056\uff9e\057\uff9e\060\uff9e\117\uff9e\123" +
    "\uff9e\130\uff9e\001\002\000\022\004\uff79\005\uff79\006\uff79" +
    "\007\uff79\010\uff79\020\uff79\056\uff79\130\uff79\001\002\000" +
    "\100\003\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e" +
    "\020\uff8e\021\uff8e\022\uff8e\035\uff8e\041\uff8e\056\uff8e\062" +
    "\uff8e\063\uff8e\073\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e" +
    "\104\uff8e\107\uff8e\110\uff8e\114\uff8e\117\uff8e\120\uff8e\121" +
    "\uff8e\123\uff8e\124\uff8e\126\uff8e\127\uff8e\130\uff8e\001\002" +
    "\000\006\003\307\010\310\001\002\000\004\110\306\001" +
    "\002\000\026\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d" +
    "\020\uff8d\056\uff8d\057\uffc0\060\uffc0\130\uff8d\001\002\000" +
    "\032\003\270\004\025\005\033\006\031\007\024\010\017" +
    "\020\027\037\124\056\030\117\125\123\133\130\141\001" +
    "\002\000\044\003\144\004\025\005\033\006\031\007\024" +
    "\010\017\014\154\020\027\037\124\050\131\054\126\056" +
    "\030\057\uff68\060\uff68\117\125\123\133\130\141\001\002" +
    "\000\100\003\uff8f\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010" +
    "\uff8f\020\uff8f\021\uff8f\022\uff8f\035\uff8f\041\uff8f\056\uff8f" +
    "\062\uff8f\063\uff8f\073\uff8f\100\uff8f\101\uff8f\102\uff8f\103" +
    "\uff8f\104\uff8f\107\uff8f\110\uff8f\114\uff8f\117\uff8f\120\uff8f" +
    "\121\uff8f\123\uff8f\124\uff8f\126\uff8f\127\uff8f\130\uff8f\001" +
    "\002\000\074\003\uff68\021\uff68\022\uff68\035\uff68\041\uff68" +
    "\062\uff68\063\uff68\073\uff68\100\uff68\101\uff68\102\uff68\103" +
    "\uff68\104\uff68\107\uff68\110\uff68\111\245\113\246\114\uff68" +
    "\116\242\117\uff68\120\uff68\121\uff68\122\251\123\uff68\124" +
    "\uff68\125\247\126\uff68\127\uff68\130\250\001\002\000\022" +
    "\004\025\005\033\006\031\007\024\010\017\020\027\056" +
    "\030\130\141\001\002\000\060\003\uff68\021\uff68\022\uff68" +
    "\035\uff68\041\uff68\062\uff68\063\uff68\073\uff68\100\uff68\101" +
    "\uff68\102\uff68\103\uff68\104\uff68\107\uff68\110\uff68\114\uff68" +
    "\117\125\120\uff68\121\uff68\123\133\124\uff68\126\uff68\127" +
    "\uff68\001\002\000\060\003\uffb2\021\uffb2\022\uffb2\035\uffb2" +
    "\041\uffb2\062\uffb2\063\uffb2\073\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\103\uffb2\104\uffb2\107\uffb2\110\uffb2\114\uffb2\117\uffb2" +
    "\120\uffb2\121\uffb2\123\uffb2\124\uffb2\126\uffb2\127\uffb2\001" +
    "\002\000\060\003\uff68\021\uff68\022\uff68\035\uff68\041\225" +
    "\062\uff68\063\231\073\uff68\100\uff68\101\uff68\102\uff68\103" +
    "\uff68\104\uff68\107\uff68\110\uff68\114\230\117\uff68\120\227" +
    "\121\uff68\123\uff68\124\224\126\221\127\uff68\001\002\000" +
    "\030\004\025\005\033\006\031\007\024\010\017\020\027" +
    "\037\124\056\030\117\125\123\133\130\141\001\002\000" +
    "\060\003\uff68\021\uff68\022\uff68\035\uff68\041\uff68\062\uff68" +
    "\063\uff68\073\uff68\100\212\101\206\102\204\103\207\104" +
    "\213\107\211\110\uff68\114\uff68\117\uff68\120\uff68\121\uff68" +
    "\123\uff68\124\uff68\126\uff68\127\uff68\001\002\000\060\003" +
    "\uff68\021\uff68\022\uff68\035\177\041\uff68\062\uff68\063\uff68" +
    "\073\175\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68\107" +
    "\uff68\110\uff68\114\uff68\117\uff68\120\uff68\121\uff68\123\uff68" +
    "\124\uff68\126\uff68\127\uff68\001\002\000\006\057\173\110" +
    "\172\001\002\000\044\003\uffa1\004\uffa1\005\uffa1\006\uffa1" +
    "\007\uffa1\010\uffa1\014\uffa1\020\uffa1\037\uffa1\050\uffa1\054" +
    "\uffa1\056\uffa1\057\uffa1\060\uffa1\117\uffa1\123\uffa1\130\uffa1" +
    "\001\002\000\022\004\025\005\033\006\031\007\024\010" +
    "\017\020\027\056\030\130\141\001\002\000\060\003\uffad" +
    "\021\uffad\022\uffad\035\uffad\041\uffad\062\uffad\063\uffad\073" +
    "\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104\uffad\107\uffad" +
    "\110\uffad\114\uffad\117\uffad\120\uffad\121\uffad\123\uffad\124" +
    "\uffad\126\uffad\127\uffad\001\002\000\004\057\167\001\002" +
    "\000\044\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\014\uff9f\020\uff9f\037\uff9f\050\uff9f\054\uff9f\056\uff9f" +
    "\057\uff9f\060\uff9f\117\uff9f\123\uff9f\130\uff9f\001\002\000" +
    "\044\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\014\uffa0\020\uffa0\037\uffa0\050\uffa0\054\uffa0\056\uffa0\057" +
    "\uffa0\060\uffa0\117\uffa0\123\uffa0\130\uffa0\001\002\000\044" +
    "\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\014" +
    "\uffa2\020\uffa2\037\uffa2\050\uffa2\054\uffa2\056\uffa2\057\uffa2" +
    "\060\uffa2\117\uffa2\123\uffa2\130\uffa2\001\002\000\032\003" +
    "\155\004\uff95\005\uff95\006\uff95\007\uff95\010\uff95\020\uff95" +
    "\037\uff95\056\uff95\117\uff95\123\uff95\130\uff95\001\002\000" +
    "\004\057\166\001\002\000\030\004\025\005\033\006\031" +
    "\007\024\010\017\020\027\037\124\056\030\117\125\123" +
    "\133\130\141\001\002\000\004\062\161\001\002\000\100" +
    "\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\035\uff8d\041\uff8d\056\uff8d\062\uff8d" +
    "\063\uff8d\073\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104" +
    "\uff8d\107\uff8d\110\uff8d\114\uff8d\117\uff8d\120\uff8d\121\uff8d" +
    "\123\uff8d\124\uff8d\126\uff8d\127\uff8d\130\uff8d\001\002\000" +
    "\004\071\uff94\001\002\000\004\071\163\001\002\000\042" +
    "\003\144\004\025\005\033\006\031\007\024\010\017\014" +
    "\154\020\027\037\124\050\131\054\126\056\030\057\uff68" +
    "\117\125\123\133\130\141\001\002\000\004\057\165\001" +
    "\002\000\044\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93" +
    "\010\uff93\014\uff93\020\uff93\037\uff93\050\uff93\054\uff93\056" +
    "\uff93\057\uff93\060\uff93\117\uff93\123\uff93\130\uff93\001\002" +
    "\000\044\003\uff92\004\uff92\005\uff92\006\uff92\007\uff92\010" +
    "\uff92\014\uff92\020\uff92\037\uff92\050\uff92\054\uff92\056\uff92" +
    "\057\uff92\060\uff92\117\uff92\123\uff92\130\uff92\001\002\000" +
    "\012\015\uff68\033\047\052\045\071\uff68\001\002\000\012" +
    "\015\uffe2\033\uffe2\052\uffe2\071\uffe2\001\002\000\060\003" +
    "\uffb4\021\uffb4\022\uffb4\035\uffb4\041\uffb4\062\uffb4\063\uffb4" +
    "\073\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\107" +
    "\uffb4\110\uffb4\114\uffb4\117\uffb4\120\uffb4\121\uffb4\123\uffb4" +
    "\124\uffb4\126\uffb4\127\uffb4\001\002\000\044\003\uff9b\004" +
    "\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\014\uff9b\020\uff9b" +
    "\037\uff9b\050\uff9b\054\uff9b\056\uff9b\057\uff9b\060\uff9b\117" +
    "\uff9b\123\uff9b\130\uff9b\001\002\000\044\003\uff9d\004\uff9d" +
    "\005\uff9d\006\uff9d\007\uff9d\010\uff9d\014\uff9d\020\uff9d\037" +
    "\uff9d\050\uff9d\054\uff9d\056\uff9d\057\uff9d\060\uff9d\117\uff9d" +
    "\123\uff9d\130\uff9d\001\002\000\060\003\uffbf\021\uffbf\022" +
    "\uffbf\035\uffbf\041\uffbf\062\uffbf\063\uffbf\073\uffbf\100\uffbf" +
    "\101\uffbf\102\uffbf\103\uffbf\104\uffbf\107\uffbf\110\uffbf\114" +
    "\uffbf\117\uffbf\120\uffbf\121\uffbf\123\uffbf\124\uffbf\126\uffbf" +
    "\127\uffbf\001\002\000\030\004\uff7a\005\uff7a\006\uff7a\007" +
    "\uff7a\010\uff7a\020\uff7a\037\uff7a\056\uff7a\117\uff7a\123\uff7a" +
    "\130\uff7a\001\002\000\060\003\uffbd\021\uffbd\022\uffbd\035" +
    "\uffbd\041\uffbd\062\uffbd\063\uffbd\073\uffbd\100\uffbd\101\uffbd" +
    "\102\uffbd\103\uffbd\104\uffbd\107\uffbd\110\uffbd\114\uffbd\117" +
    "\uffbd\120\uffbd\121\uffbd\123\uffbd\124\uffbd\126\uffbd\127\uffbd" +
    "\001\002\000\030\004\uff7b\005\uff7b\006\uff7b\007\uff7b\010" +
    "\uff7b\020\uff7b\037\uff7b\056\uff7b\117\uff7b\123\uff7b\130\uff7b" +
    "\001\002\000\030\004\025\005\033\006\031\007\024\010" +
    "\017\020\027\037\124\056\030\117\125\123\133\130\141" +
    "\001\002\000\060\003\uff68\021\uff68\022\uff68\035\177\041" +
    "\uff68\062\uff68\063\uff68\073\175\100\uff68\101\uff68\102\uff68" +
    "\103\uff68\104\uff68\107\uff68\110\uff68\114\uff68\117\uff68\120" +
    "\uff68\121\uff68\123\uff68\124\uff68\126\uff68\127\uff68\001\002" +
    "\000\060\003\uffbe\021\uffbe\022\uffbe\035\uffbe\041\uffbe\062" +
    "\uffbe\063\uffbe\073\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe" +
    "\104\uffbe\107\uffbe\110\uffbe\114\uffbe\117\uffbe\120\uffbe\121" +
    "\uffbe\123\uffbe\124\uffbe\126\uffbe\127\uffbe\001\002\000\060" +
    "\003\uffbc\021\uffbc\022\uffbc\035\uffbc\041\uffbc\062\uffbc\063" +
    "\uffbc\073\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc" +
    "\107\uffbc\110\uffbc\114\uffbc\117\uffbc\120\uffbc\121\uffbc\123" +
    "\uffbc\124\uffbc\126\uffbc\127\uffbc\001\002\000\030\004\uff81" +
    "\005\uff81\006\uff81\007\uff81\010\uff81\020\uff81\037\uff81\056" +
    "\uff81\117\uff81\123\uff81\130\uff81\001\002\000\060\003\uffba" +
    "\021\uffba\022\uffba\035\uffba\041\uffba\062\uffba\063\uffba\073" +
    "\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba\107\uffba" +
    "\110\uffba\114\uffba\117\uffba\120\uffba\121\uffba\123\uffba\124" +
    "\uffba\126\uffba\127\uffba\001\002\000\030\004\uff7f\005\uff7f" +
    "\006\uff7f\007\uff7f\010\uff7f\020\uff7f\037\uff7f\056\uff7f\117" +
    "\uff7f\123\uff7f\130\uff7f\001\002\000\030\004\uff7c\005\uff7c" +
    "\006\uff7c\007\uff7c\010\uff7c\020\uff7c\037\uff7c\056\uff7c\117" +
    "\uff7c\123\uff7c\130\uff7c\001\002\000\030\004\025\005\033" +
    "\006\031\007\024\010\017\020\027\037\124\056\030\117" +
    "\125\123\133\130\141\001\002\000\030\004\uff7d\005\uff7d" +
    "\006\uff7d\007\uff7d\010\uff7d\020\uff7d\037\uff7d\056\uff7d\117" +
    "\uff7d\123\uff7d\130\uff7d\001\002\000\030\004\uff80\005\uff80" +
    "\006\uff80\007\uff80\010\uff80\020\uff80\037\uff80\056\uff80\117" +
    "\uff80\123\uff80\130\uff80\001\002\000\030\004\uff7e\005\uff7e" +
    "\006\uff7e\007\uff7e\010\uff7e\020\uff7e\037\uff7e\056\uff7e\117" +
    "\uff7e\123\uff7e\130\uff7e\001\002\000\060\003\uff68\021\uff68" +
    "\022\uff68\035\uff68\041\uff68\062\uff68\063\uff68\073\uff68\100" +
    "\212\101\206\102\204\103\207\104\213\107\211\110\uff68" +
    "\114\uff68\117\uff68\120\uff68\121\uff68\123\uff68\124\uff68\126" +
    "\uff68\127\uff68\001\002\000\060\003\uffbb\021\uffbb\022\uffbb" +
    "\035\uffbb\041\uffbb\062\uffbb\063\uffbb\073\uffbb\100\uffbb\101" +
    "\uffbb\102\uffbb\103\uffbb\104\uffbb\107\uffbb\110\uffbb\114\uffbb" +
    "\117\uffbb\120\uffbb\121\uffbb\123\uffbb\124\uffbb\126\uffbb\127" +
    "\uffbb\001\002\000\006\003\217\127\220\001\002\000\060" +
    "\003\uffae\021\uffae\022\uffae\035\uffae\041\uffae\062\uffae\063" +
    "\uffae\073\uffae\100\uffae\101\uffae\102\uffae\103\uffae\104\uffae" +
    "\107\uffae\110\uffae\114\uffae\117\uffae\120\uffae\121\uffae\123" +
    "\uffae\124\uffae\126\uffae\127\uffae\001\002\000\060\003\uffaf" +
    "\021\uffaf\022\uffaf\035\uffaf\041\uffaf\062\uffaf\063\uffaf\073" +
    "\uffaf\100\uffaf\101\uffaf\102\uffaf\103\uffaf\104\uffaf\107\uffaf" +
    "\110\uffaf\114\uffaf\117\uffaf\120\uffaf\121\uffaf\123\uffaf\124" +
    "\uffaf\126\uffaf\127\uffaf\001\002\000\030\004\uff8a\005\uff8a" +
    "\006\uff8a\007\uff8a\010\uff8a\020\uff8a\037\uff8a\056\uff8a\117" +
    "\uff8a\123\uff8a\130\uff8a\001\002\000\060\003\uffb5\021\uffb5" +
    "\022\uffb5\035\uffb5\041\uffb5\062\uffb5\063\uffb5\073\uffb5\100" +
    "\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\107\uffb5\110\uffb5" +
    "\114\uffb5\117\uffb5\120\uffb5\121\uffb5\123\uffb5\124\uffb5\126" +
    "\uffb5\127\uffb5\001\002\000\060\003\uffb9\021\uffb9\022\uffb9" +
    "\035\uffb9\041\uffb9\062\uffb9\063\uffb9\073\uffb9\100\uffb9\101" +
    "\uffb9\102\uffb9\103\uffb9\104\uffb9\107\uffb9\110\uffb9\114\uffb9" +
    "\117\uffb9\120\uffb9\121\uffb9\123\uffb9\124\uffb9\126\uffb9\127" +
    "\uffb9\001\002\000\030\004\uff8c\005\uff8c\006\uff8c\007\uff8c" +
    "\010\uff8c\020\uff8c\037\uff8c\056\uff8c\117\uff8c\123\uff8c\130" +
    "\uff8c\001\002\000\030\004\uff88\005\uff88\006\uff88\007\uff88" +
    "\010\uff88\020\uff88\037\uff88\056\uff88\117\uff88\123\uff88\130" +
    "\uff88\001\002\000\030\004\uffb8\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\020\uffb8\037\uffb8\056\uffb8\117\uffb8\123\uffb8\130" +
    "\uffb8\001\002\000\030\004\uff8b\005\uff8b\006\uff8b\007\uff8b" +
    "\010\uff8b\020\uff8b\037\uff8b\056\uff8b\117\uff8b\123\uff8b\130" +
    "\uff8b\001\002\000\030\004\uff89\005\uff89\006\uff89\007\uff89" +
    "\010\uff89\020\uff89\037\uff89\056\uff89\117\uff89\123\uff89\130" +
    "\uff89\001\002\000\030\004\uff87\005\uff87\006\uff87\007\uff87" +
    "\010\uff87\020\uff87\037\uff87\056\uff87\117\uff87\123\uff87\130" +
    "\uff87\001\002\000\030\004\025\005\033\006\031\007\024" +
    "\010\017\020\027\037\124\056\030\117\125\123\133\130" +
    "\141\001\002\000\060\003\uffb7\021\uffb7\022\uffb7\035\uffb7" +
    "\041\uffb7\062\uffb7\063\uffb7\073\uffb7\100\uffb7\101\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\107\uffb7\110\uffb7\114\uffb7\117\uffb7" +
    "\120\uffb7\121\uffb7\123\uffb7\124\uffb7\126\uffb7\127\uffb7\001" +
    "\002\000\060\003\uff68\021\uff68\022\uff68\035\uff68\041\225" +
    "\062\uff68\063\231\073\uff68\100\uff68\101\uff68\102\uff68\103" +
    "\uff68\104\uff68\107\uff68\110\uff68\114\230\117\uff68\120\227" +
    "\121\uff68\123\uff68\124\224\126\221\127\uff68\001\002\000" +
    "\060\003\uffb6\021\uffb6\022\uffb6\035\uffb6\041\uffb6\062\uffb6" +
    "\063\uffb6\073\uffb6\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104" +
    "\uffb6\107\uffb6\110\uffb6\114\uffb6\117\uffb6\120\uffb6\121\uffb6" +
    "\123\uffb6\124\uffb6\126\uffb6\127\uffb6\001\002\000\060\003" +
    "\uffb1\021\uffb1\022\uffb1\035\uffb1\041\uffb1\062\uffb1\063\uffb1" +
    "\073\uffb1\100\uffb1\101\uffb1\102\uffb1\103\uffb1\104\uffb1\107" +
    "\uffb1\110\uffb1\114\uffb1\117\uffb1\120\uffb1\121\uffb1\123\uffb1" +
    "\124\uffb1\126\uffb1\127\uffb1\001\002\000\060\003\uffb3\021" +
    "\uffb3\022\uffb3\035\uffb3\041\uffb3\062\uffb3\063\uffb3\073\uffb3" +
    "\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\107\uffb3\110" +
    "\uffb3\114\uffb3\117\uffb3\120\uffb3\121\uffb3\123\uffb3\124\uffb3" +
    "\126\uffb3\127\uffb3\001\002\000\060\003\uffb0\021\uffb0\022" +
    "\uffb0\035\uffb0\041\uffb0\062\uffb0\063\uffb0\073\uffb0\100\uffb0" +
    "\101\uffb0\102\uffb0\103\uffb0\104\uffb0\107\uffb0\110\uffb0\114" +
    "\uffb0\117\uffb0\120\uffb0\121\uffb0\123\uffb0\124\uffb0\126\uffb0" +
    "\127\uffb0\001\002\000\030\004\025\005\033\006\031\007" +
    "\024\010\017\020\027\037\124\056\030\117\125\123\133" +
    "\130\141\001\002\000\030\004\uff84\005\uff84\006\uff84\007" +
    "\uff84\010\uff84\020\uff84\037\uff84\056\uff84\117\uff84\123\uff84" +
    "\130\uff84\001\002\000\060\003\uffac\021\uffac\022\uffac\035" +
    "\uffac\041\uffac\062\uffac\063\uffac\073\uffac\100\uffac\101\uffac" +
    "\102\uffac\103\uffac\104\uffac\107\uffac\110\uffac\114\uffac\117" +
    "\uffac\120\uffac\121\uffac\123\uffac\124\uffac\126\uffac\127\uffac" +
    "\001\002\000\060\003\uffa8\021\uffa8\022\uffa8\035\uffa8\041" +
    "\uffa8\062\uffa8\063\uffa8\073\uffa8\100\uffa8\101\uffa8\102\uffa8" +
    "\103\uffa8\104\uffa8\107\uffa8\110\uffa8\114\uffa8\117\uffa8\120" +
    "\uffa8\121\uffa8\123\uffa8\124\uffa8\126\uffa8\127\uffa8\001\002" +
    "\000\030\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\020" +
    "\uff86\037\uff86\056\uff86\117\uff86\123\uff86\130\uff86\001\002" +
    "\000\030\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\020" +
    "\uff82\037\uff82\056\uff82\117\uff82\123\uff82\130\uff82\001\002" +
    "\000\030\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\020" +
    "\uff83\037\uff83\056\uff83\117\uff83\123\uff83\130\uff83\001\002" +
    "\000\034\003\uff68\004\025\005\033\006\031\007\024\010" +
    "\017\020\027\037\124\056\030\117\125\123\133\127\uff68" +
    "\130\141\001\002\000\030\004\uff85\005\uff85\006\uff85\007" +
    "\uff85\010\uff85\020\uff85\037\uff85\056\uff85\117\uff85\123\uff85" +
    "\130\uff85\001\002\000\010\003\uff68\121\261\127\uff68\001" +
    "\002\000\026\003\uffa6\004\uff8d\005\uff8d\006\uff8d\007\uff8d" +
    "\010\uff8d\020\uff8d\056\uff8d\127\uffa6\130\uff8d\001\002\000" +
    "\006\003\255\127\256\001\002\000\060\003\uffaa\021\uffaa" +
    "\022\uffaa\035\uffaa\041\uffaa\062\uffaa\063\uffaa\073\uffaa\100" +
    "\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\107\uffaa\110\uffaa" +
    "\114\uffaa\117\uffaa\120\uffaa\121\uffaa\123\uffaa\124\uffaa\126" +
    "\uffaa\127\uffaa\001\002\000\060\003\uffab\021\uffab\022\uffab" +
    "\035\uffab\041\uffab\062\uffab\063\uffab\073\uffab\100\uffab\101" +
    "\uffab\102\uffab\103\uffab\104\uffab\107\uffab\110\uffab\114\uffab" +
    "\117\uffab\120\uffab\121\uffab\123\uffab\124\uffab\126\uffab\127" +
    "\uffab\001\002\000\006\003\uffa7\127\uffa7\001\002\000\006" +
    "\003\uffa3\127\uffa3\001\002\000\032\003\263\004\025\005" +
    "\033\006\031\007\024\010\017\020\027\037\124\056\030" +
    "\117\125\123\133\130\141\001\002\000\010\003\uff68\121" +
    "\261\127\uff68\001\002\000\006\003\uffa4\127\uffa4\001\002" +
    "\000\006\003\uffa5\127\uffa5\001\002\000\060\003\uffa9\021" +
    "\uffa9\022\uffa9\035\uffa9\041\uffa9\062\uffa9\063\uffa9\073\uffa9" +
    "\100\uffa9\101\uffa9\102\uffa9\103\uffa9\104\uffa9\107\uffa9\110" +
    "\uffa9\114\uffa9\117\uffa9\120\uffa9\121\uffa9\123\uffa9\124\uffa9" +
    "\126\uffa9\127\uffa9\001\002\000\006\057\uffc1\060\uffc1\001" +
    "\002\000\006\003\300\022\301\001\002\000\004\022\271" +
    "\001\002\000\044\003\144\004\025\005\033\006\031\007" +
    "\024\010\017\014\154\020\027\037\124\050\131\054\126" +
    "\056\030\057\uff68\060\uff68\117\125\123\133\130\141\001" +
    "\002\000\006\057\uff68\060\273\001\002\000\042\003\144" +
    "\004\025\005\033\006\031\007\024\010\017\014\154\020" +
    "\027\037\124\050\131\054\126\056\030\057\uff68\117\125" +
    "\123\133\130\141\001\002\000\004\057\276\001\002\000" +
    "\004\057\uff96\001\002\000\044\003\uff98\004\uff98\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\014\uff98\020\uff98\037\uff98\050" +
    "\uff98\054\uff98\056\uff98\057\uff98\060\uff98\117\uff98\123\uff98" +
    "\130\uff98\001\002\000\004\057\uff97\001\002\000\004\057" +
    "\305\001\002\000\044\003\144\004\025\005\033\006\031" +
    "\007\024\010\017\014\154\020\027\037\124\050\131\054" +
    "\126\056\030\057\uff68\060\uff68\117\125\123\133\130\141" +
    "\001\002\000\006\057\uff68\060\273\001\002\000\004\057" +
    "\304\001\002\000\044\003\uff9a\004\uff9a\005\uff9a\006\uff9a" +
    "\007\uff9a\010\uff9a\014\uff9a\020\uff9a\037\uff9a\050\uff9a\054" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\117\uff9a\123\uff9a\130\uff9a" +
    "\001\002\000\044\003\uff99\004\uff99\005\uff99\006\uff99\007" +
    "\uff99\010\uff99\014\uff99\020\uff99\037\uff99\050\uff99\054\uff99" +
    "\056\uff99\057\uff99\060\uff99\117\uff99\123\uff99\130\uff99\001" +
    "\002\000\044\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c" +
    "\010\uff9c\014\uff9c\020\uff9c\037\uff9c\050\uff9c\054\uff9c\056" +
    "\uff9c\057\uff9c\060\uff9c\117\uff9c\123\uff9c\130\uff9c\001\002" +
    "\000\004\057\321\001\002\000\004\111\311\001\002\000" +
    "\030\004\025\005\033\006\031\007\024\010\017\020\027" +
    "\037\124\056\030\117\125\123\133\130\141\001\002\000" +
    "\004\021\313\001\002\000\030\004\025\005\033\006\031" +
    "\007\024\010\017\020\027\037\124\056\030\117\125\123" +
    "\133\130\141\001\002\000\004\062\315\001\002\000\004" +
    "\071\316\001\002\000\042\003\144\004\025\005\033\006" +
    "\031\007\024\010\017\014\154\020\027\037\124\050\131" +
    "\054\126\056\030\057\uff68\117\125\123\133\130\141\001" +
    "\002\000\004\057\320\001\002\000\044\003\uff91\004\uff91" +
    "\005\uff91\006\uff91\007\uff91\010\uff91\014\uff91\020\uff91\037" +
    "\uff91\050\uff91\054\uff91\056\uff91\057\uff91\060\uff91\117\uff91" +
    "\123\uff91\130\uff91\001\002\000\044\003\uff90\004\uff90\005" +
    "\uff90\006\uff90\007\uff90\010\uff90\014\uff90\020\uff90\037\uff90" +
    "\050\uff90\054\uff90\056\uff90\057\uff90\060\uff90\117\uff90\123" +
    "\uff90\130\uff90\001\002\000\012\015\ufff4\033\ufff4\052\ufff4" +
    "\071\ufff4\001\002\000\014\015\uff68\033\047\052\045\071" +
    "\uff68\110\347\001\002\000\012\015\uffef\033\uffef\052\uffef" +
    "\071\uffef\001\002\000\012\015\uffee\033\uffee\052\uffee\071" +
    "\uffee\001\002\000\012\015\ufff3\033\ufff3\052\ufff3\071\ufff3" +
    "\001\002\000\006\112\uff68\121\332\001\002\000\004\112" +
    "\335\001\002\000\004\112\uffe7\001\002\000\004\010\017" +
    "\001\002\000\006\112\uff68\121\332\001\002\000\004\112" +
    "\uffe8\001\002\000\022\023\066\024\055\030\053\042\061" +
    "\043\056\045\065\065\057\070\064\001\002\000\006\102" +
    "\uffed\110\uffed\001\002\000\006\102\340\110\uff68\001\002" +
    "\000\016\004\025\005\033\006\031\007\024\020\027\056" +
    "\030\001\002\000\004\110\uffe5\001\002\000\004\110\343" +
    "\001\002\000\016\003\323\010\017\015\uff68\033\uff68\052" +
    "\uff68\071\uff68\001\002\000\012\015\uffec\033\uffec\052\uffec" +
    "\071\uffec\001\002\000\004\110\uffe6\001\002\000\012\015" +
    "\uffe9\033\uffe9\052\uffe9\071\uffe9\001\002\000\016\003\323" +
    "\010\017\015\uff68\033\uff68\052\uff68\071\uff68\001\002\000" +
    "\012\015\uffeb\033\uffeb\052\uffeb\071\uffeb\001\002\000\012" +
    "\015\uffea\033\uffea\052\uffea\071\uffea\001\002\000\042\003" +
    "\144\004\025\005\033\006\031\007\024\010\017\014\154" +
    "\020\027\037\124\050\131\054\126\056\030\057\uff68\117" +
    "\125\123\133\130\141\001\002\000\004\057\354\001\002" +
    "\000\012\015\uff68\033\047\052\045\071\uff68\001\002\000" +
    "\012\015\uffe1\033\uffe1\052\uffe1\071\uffe1\001\002\000\010" +
    "\033\uffff\052\uffff\071\uffff\001\002\000\010\033\ufff0\052" +
    "\ufff0\071\ufff0\001\002\000\014\003\323\010\017\033\uff68" +
    "\052\uff68\071\uff68\001\002\000\010\033\ufff1\052\ufff1\071" +
    "\ufff1\001\002\000\010\033\047\052\045\071\uff68\001\002" +
    "\000\004\071\364\001\002\000\042\003\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\014\ufffc\020\ufffc\037\ufffc" +
    "\050\ufffc\054\ufffc\056\ufffc\057\ufffc\117\ufffc\123\ufffc\130" +
    "\ufffc\001\002\000\004\002\ufffe\001\002\000\042\003\144" +
    "\004\025\005\033\006\031\007\024\010\017\014\154\020" +
    "\027\037\124\050\131\054\126\056\030\057\uff68\117\125" +
    "\123\133\130\141\001\002\000\004\057\370\001\002\000" +
    "\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\366\000\004\007\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\104\010\001\001\000\006\006\011\014\012\001\001\000" +
    "\002\001\001\000\006\006\356\021\355\001\001\000\012" +
    "\006\020\012\021\015\014\016\017\001\001\000\002\001" +
    "\001\000\016\006\043\017\045\030\035\031\036\041\042" +
    "\042\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\102\025\103\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\020\012" +
    "\021\015\034\016\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\324\012\326\022\325\023\323\001\001\000\012\006\020" +
    "\012\021\015\321\016\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\103\001\001\000\002\001\001" +
    "\000\004\012\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\057\043\062\044\061\101\053\001\001" +
    "\000\002\001\001\000\004\110\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\071\001\001\000" +
    "\006\006\073\045\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\101\075\001\001\000\002\001\001\000" +
    "\006\006\073\045\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\057\043\105\044\061\101\053\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\101\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\116\005\117\101\120\001\001\000\004\101" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\006\127\012\133\046" +
    "\147\047\152\050\144\051\126\053\142\055\141\057\137" +
    "\060\136\061\135\066\131\067\151\071\150\072\122\073" +
    "\145\100\134\102\146\103\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\157\012\133" +
    "\051\266\053\142\055\141\057\137\060\136\061\135\073" +
    "\145\100\134\102\146\103\031\001\001\000\050\006\127" +
    "\012\133\046\265\047\152\050\144\051\126\053\142\055" +
    "\141\057\137\060\136\061\135\066\131\067\151\071\150" +
    "\072\122\073\145\100\134\102\146\103\031\001\001\000" +
    "\002\001\001\000\012\006\243\062\237\065\242\075\240" +
    "\001\001\000\014\012\133\060\236\061\135\102\146\103" +
    "\031\001\001\000\006\006\157\073\235\001\001\000\002" +
    "\001\001\000\010\006\221\056\222\074\225\001\001\000" +
    "\032\006\157\012\133\051\215\053\142\055\141\057\137" +
    "\060\136\061\135\073\145\100\134\102\146\103\031\001" +
    "\001\000\010\006\204\054\202\076\207\001\001\000\010" +
    "\006\175\052\173\077\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\012\133\060\170\061\135\102\146" +
    "\103\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\113\155\001\001\000\002\001\001\000\032\006\157\012" +
    "\133\051\156\053\142\055\141\057\137\060\136\061\135" +
    "\073\145\100\134\102\146\103\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\114\161\001\001\000\002" +
    "\001\001\000\050\006\127\012\133\046\163\047\152\050" +
    "\144\051\126\053\142\055\141\057\137\060\136\061\135" +
    "\066\131\067\151\071\150\072\122\073\145\100\134\102" +
    "\146\103\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\043\030\167\031\036\041" +
    "\042\042\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\006\157\012\133\053\200\055\141\057\137\060\136\061" +
    "\135\073\145\100\134\102\146\103\031\001\001\000\010" +
    "\006\175\052\201\077\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\157\012\133\055" +
    "\213\057\137\060\136\061\135\073\145\100\134\102\146" +
    "\103\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\204\054\214\076\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\111" +
    "\231\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\006\157\012\133\057\232\060\136\061" +
    "\135\073\145\100\134\102\146\103\031\001\001\000\004" +
    "\112\233\001\001\000\010\006\221\056\234\074\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\157\012\133\051\264\053" +
    "\142\055\141\057\137\060\136\061\135\073\145\100\134" +
    "\102\146\103\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\252\012\133\051\251\053" +
    "\142\055\141\057\137\060\136\061\135\063\253\073\145" +
    "\100\134\102\146\103\031\001\001\000\002\001\001\000" +
    "\006\006\257\064\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\006\157\012\133\051\261" +
    "\053\142\055\141\057\137\060\136\061\135\073\145\100" +
    "\134\102\146\103\031\001\001\000\006\006\257\064\263" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\006\127\012\133\046\271\047\152\050\144\051" +
    "\126\053\142\055\141\057\137\060\136\061\135\066\131" +
    "\067\151\071\150\072\122\073\145\100\134\102\146\103" +
    "\031\001\001\000\006\006\274\070\273\001\001\000\050" +
    "\006\127\012\133\046\276\047\152\050\144\051\126\053" +
    "\142\055\141\057\137\060\136\061\135\066\131\067\151" +
    "\071\150\072\122\073\145\100\134\102\146\103\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\006\127\012" +
    "\133\046\301\047\152\050\144\051\126\053\142\055\141" +
    "\057\137\060\136\061\135\066\131\067\151\071\150\072" +
    "\122\073\145\100\134\102\146\103\031\001\001\000\006" +
    "\006\274\070\302\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\157\012\133\051\311\053" +
    "\142\055\141\057\137\060\136\061\135\073\145\100\134" +
    "\102\146\103\031\001\001\000\002\001\001\000\032\006" +
    "\157\012\133\051\313\053\142\055\141\057\137\060\136" +
    "\061\135\073\145\100\134\102\146\103\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\127\012\133" +
    "\046\316\047\152\050\144\051\126\053\142\055\141\057" +
    "\137\060\136\061\135\066\131\067\151\071\150\072\122" +
    "\073\145\100\134\102\146\103\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\043\025\347\030\345\031\036\041\042\042" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\330\026\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\332\001\001\000\006" +
    "\006\330\026\333\001\001\000\002\001\001\000\004\101" +
    "\335\001\001\000\004\107\336\001\001\000\006\006\340" +
    "\027\341\001\001\000\006\102\344\103\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\324\012\326" +
    "\022\343\023\323\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\324\012\326\022\350" +
    "\023\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\006\127\012\133\046\352\047\152\050\144\051\126" +
    "\053\142\055\141\057\137\060\136\061\135\066\131\067" +
    "\151\071\150\072\122\073\145\100\134\102\146\103\031" +
    "\001\001\000\002\001\001\000\014\006\043\030\354\031" +
    "\036\041\042\042\037\001\001\000\002\001\001\000\004" +
    "\105\361\001\001\000\002\001\001\000\012\006\324\012" +
    "\326\022\360\023\323\001\001\000\002\001\001\000\014" +
    "\006\043\030\362\031\036\041\042\042\037\001\001\000" +
    "\004\013\364\001\001\000\004\106\365\001\001\000\002" +
    "\001\001\000\050\006\127\012\133\046\366\047\152\050" +
    "\144\051\126\053\142\055\141\057\137\060\136\061\135" +
    "\066\131\067\151\071\150\072\122\073\145\100\134\102" +
    "\146\103\031\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Generador_Codigo generador = new Generador_Codigo();

    public Generador_Codigo getGenerador() {
        return generador;
    }
    public String resultado="";
    public static ArrayList<Simbolo> tablaSimbolos = new ArrayList();

    public static boolean inCiclo=false;
    public static ArrayList<String> errores = new ArrayList<>();
    public static ArrayList<String> errSemantic = new ArrayList<>();
    public static ArrayList<String> lista_vars = new ArrayList<>();
    public static ArrayList<String[]> lista_params = new ArrayList<>();
    public static ArrayList<ArrayList<String>> funciones = new ArrayList<>();
    public static String funActual;
    public static String tipoActual;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);


        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), (linea+1)));
        //System.out.println(ScannerABC.errores.size());
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);

        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), linea+1));
     
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador_Sintactico$actions {



  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // empty ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("empty",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // id ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT = i; parser.getGenerador().recordar_identificador((String) i);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("id",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Boolean ::= PR_FALSE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = l; parser.getGenerador().recordar_RS_DO("Boolean",(String) l);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",65, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Boolean ::= PR_TRUE 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = l; parser.getGenerador().recordar_RS_DO("Boolean",(String) l);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",65, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // literal ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = l; parser.getGenerador().recordar_RS_DO("Char",(String) l);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // literal ::= L_STRING 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = l; parser.getGenerador().recordar_RS_DO("String",(String) l);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // literal ::= L_FLOAT 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = l; parser.getGenerador().recordar_RS_DO("Float",(String) l);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // literal ::= L_INTEGER 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = l; parser.getGenerador().recordar_RS_DO("Int",(String) l);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Tipo ::= PR_FLOAT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Tipo ::= PR_REAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Tipo ::= PR_STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Tipo ::= PR_SHORTINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Tipo ::= PR_LONGINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Tipo ::= PR_CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Tipo ::= PR_INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Tipo ::= PR_BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OperadoresLogicosUnarios ::= O_NOT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosUnarios",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OperadoresLogicosBinarios ::= O_AND 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OperadoresLogicosBinarios ::= O_OR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OperadoresComparacion ::= O_LESS_GREATER 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OperadoresComparacion ::= O_LESS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OperadoresComparacion ::= O_LESS_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OperadoresComparacion ::= O_GREATER 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OperadoresComparacion ::= O_GREATER_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OperadoresComparacion ::= O_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OperadorAsignacion ::= O_SLASH_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OperadorAsignacion ::= O_ASTERISK_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OperadorAsignacion ::= O_MINUS_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OperadorAsignacion ::= O_PLUS_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OperadorAsignacion ::= O_COLON_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OperadoresEnteros ::= O_DIV 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OperadoresEnteros ::= O_MOD 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OperadoresEnteros ::= O_SLASH 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OperadoresEnteros ::= O_ASTERISK 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OperadoresEnteros ::= O_MINUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OperadoresEnteros ::= O_PLUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; System.out.println("HOLA"+(String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IncrementoDecremento ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IncrementoDecremento ::= O_MINUS_MINUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IncrementoDecremento ::= O_PLUS_PLUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // For ::= PR_FOR error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion FOR Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // For ::= PR_FOR IDENTIFICADOR O_COLON_EQUALS Expresion PR_TO Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // While ::= PR_WHILE error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion WHILE Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // While ::= PR_WHILE NT$7 Expresion PR_DO NT$8 PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		 parser.getGenerador().end_while(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
 parser.getGenerador().eval_exp_while(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",74, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$7 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().start_while(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",73, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Else ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",54, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Else ::= PR_ELSE Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",54, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IfThenElse ::= PR_IF error PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IfThenElse ::= PR_IF Expresion error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END, Espera un PR_THEN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IfThenElse ::= PR_IF Expresion PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // InstruccionSC ::= error O_SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion sc Recuperado con O_SEMICOLON");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // InstruccionSC ::= Expresion O_SEMICOLON 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // InstruccionBE ::= error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccionbe Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // InstruccionBE ::= For 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // InstruccionBE ::= While 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // InstruccionBE ::= IfThenElse 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Instruccion ::= InstruccionSC 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Instruccion ::= InstruccionBE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ListaParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ListaParametros ::= O_COMMA error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix: Expresion esperada despues de la coma.");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ListaParametros ::= O_COMMA Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LParametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LParametro ::= Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExpresionAsignacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExpresionAsignacion ::= OperadorAsignacion Expresion 
            {
              Object RESULT =null;
		 parser.getGenerador().generarCodigoAsignacion();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expresion7 ::= ExpresionAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expresion6 ::= literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expresion6 ::= id Expresion7 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expresion5 ::= Expresion6 IncrementoDecremento 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion5",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expresion4 ::= Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expresion4 ::= OperadoresLogicosUnarios Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expresion4 ::= IncrementoDecremento Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExpresionOperadoresEnteros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExpresionOperadoresEnteros ::= OperadoresEnteros NT$5 Expresion4 NT$6 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
 parser.getGenerador().eval_exp_binaria();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",72, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // NT$5 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
 parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",71, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expresion3 ::= Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExpresionOperadoresComparacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExpresionOperadoresComparacion ::= OperadoresComparacion Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expresion2 ::= Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExpresionOperadoresLogicos ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpresionOperadoresLogicos ::= OperadoresLogicosBinarios Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expresion ::= Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Instrucciones ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Instrucciones ::= Instruccion Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // masParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // masParametros ::= O_COMMA Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Parametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Parametro ::= Tipo error 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros recuperado en Parametro"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Parametro ::= Tipo NT$4 id masParametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
 parser.getGenerador().recordar_tipo((String) t);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",70, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // kk ::= r 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("kk",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // kk ::= Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("kk",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EncabezadoFuncion ::= PR_FUNCTION id O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS error kk 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros2"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EncabezadoFuncion ::= PR_FUNCTION id O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EncabezadoFuncion ::= PR_FUNCTION id O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 parser.getGenerador().guardar_funcion_TS((String) i,((String) t));
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EncabezadoProcedimiento ::= PR_PROCEDURE id O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VariableFuncion ::= error ErroresVariables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con ErroresVariables Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VariableFuncion",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VariableFuncion ::= IDENTIFICADOR Identificadores O_COLON Tipo Inicializar O_SEMICOLON VariablesFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VariableFuncion",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VariablesFuncion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VariablesFuncion",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VariablesFuncion ::= VariableFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VariablesFuncion",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SeccionVariablesFuncion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariablesFuncion",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SeccionVariablesFuncion ::= PR_VAR VariablesFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariablesFuncion",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ErrorConstanteFuncion ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstanteFuncion",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ErrorConstanteFuncion ::= PR_VAR VariablesFuncion 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstanteFuncion",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ErrorConstanteFuncion ::= O_SEMICOLON ConstantesFuncion 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstanteFuncion",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ConstanteFuncion ::= error ErrorConstante 
            {
              Object RESULT =null;
		System.out.println("Error");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ConstanteFuncion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ConstanteFuncion ::= IDENTIFICADOR O_EQUALS literal O_SEMICOLON ConstantesFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ConstanteFuncion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ConstantesFuncion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ConstantesFuncion",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ConstantesFuncion ::= ConstanteFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ConstantesFuncion",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SeccionConstantesFuncion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantesFuncion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SeccionConstantesFuncion ::= PR_CONST ConstantesFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantesFuncion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rr ::= Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rr",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rr ::= PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rr",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Rutina ::= EncabezadoFuncion PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Rutina ::= EncabezadoProcedimiento PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Rutinas ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Rutinas ::= Rutina 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Inicializar ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Inicializar ::= O_EQUALS literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Identificadores ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Identificadores ::= O_COMMA id Identificadores 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ErroresVariables ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ErroresVariables ::= O_SEMICOLON Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con O_SEMICOLON Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Variable ::= error ErroresVariables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con ErroresVariables Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Variable ::= id Identificadores O_COLON Tipo NT$3 Inicializar O_SEMICOLON Variables 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
 System.out.println("Tipo variables: " + (String) tipo); parser.getGenerador().guardar_variables_TS((String)tipo,1); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",69, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Variables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Variables ::= Variable 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SeccionVariables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SeccionVariables ::= PR_VAR Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ErrorConstante ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ErrorConstante ::= PR_VAR Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ErrorConstante ::= O_SEMICOLON Constantes 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Constante ::= error ErrorConstante 
            {
              Object RESULT =null;
		System.out.println("Error");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Constante ::= id O_EQUALS literal O_SEMICOLON Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Constantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Constantes ::= Constante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SeccionConstantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SeccionConstantes ::= PR_CONST Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EntradaPrograma ::= PR_BEGIN NT$2 Instrucciones PR_END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		 parser.getGenerador().fin_programa(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EntradaPrograma",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().inicio_programa(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",68, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la estructura del programa");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= PR_PROGRAM IDENTIFICADOR NT$0 SeccionConstantes SeccionVariables NT$1 Rutinas EntradaPrograma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		 System.out.println(parser.getGenerador().getCodigo());System.out.println(parser.getGenerador().getTabla_simbolos().toString()); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
 parser.getGenerador().finalizar_variables(); parser.getGenerador().inicializar_pila(); parser.getGenerador().iniciar_codigo(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",67, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().iniciar_variables(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",66, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

