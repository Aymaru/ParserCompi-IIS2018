
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 15 21:11:13 CST 2018
//----------------------------------------------------

package Compilador;

import Compilador.ErrorToken;
import Compilador.ScannerABC;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 15 21:11:13 CST 2018
  */
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\004\000\002\007\010\000\002\007" +
    "\003\000\002\012\005\000\002\013\004\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\015\007\000" +
    "\002\015\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\003\000\002\020\004\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\011\000\002\022\004" +
    "\000\002\024\004\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\026\004\000\002\026\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\007\000\002\030" +
    "\004\000\002\004\006\000\002\004\004\000\002\003\003" +
    "\000\002\003\003\000\002\031\007\000\002\031\007\000" +
    "\002\032\011\000\002\032\011\000\002\032\011\000\002" +
    "\005\003\000\002\005\003\000\002\033\003\000\002\034" +
    "\005\000\002\034\004\000\002\034\003\000\002\035\006" +
    "\000\002\035\003\000\002\036\004\000\002\036\003\000" +
    "\002\041\004\000\002\042\005\000\002\042\003\000\002" +
    "\043\004\000\002\044\005\000\002\044\003\000\002\045" +
    "\004\000\002\046\005\000\002\046\003\000\002\047\004" +
    "\000\002\047\004\000\002\047\003\000\002\050\004\000" +
    "\002\051\004\000\002\051\005\000\002\051\005\000\002" +
    "\051\003\000\002\052\003\000\002\052\005\000\002\052" +
    "\005\000\002\055\004\000\002\055\003\000\002\053\004" +
    "\000\002\053\003\000\002\054\005\000\002\054\004\000" +
    "\002\054\003\000\002\056\003\000\002\056\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\004\000\002\040\004\000\002\040\004\000\002\057\010" +
    "\000\002\057\006\000\002\057\010\000\002\002\006\000" +
    "\002\002\005\000\002\002\004\000\002\002\003\000\002" +
    "\060\004\000\002\060\003\000\002\061\010\000\002\061" +
    "\005\000\002\062\014\000\002\062\005\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\065\003\000\002\065\003" +
    "\000\002\066\003\000\002\066\003\000\002\066\003\000" +
    "\002\066\003\000\002\066\003\000\002\066\003\000\002" +
    "\067\003\000\002\067\003\000\002\070\003\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\073\003\000\002\073" +
    "\003\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\006\003\004\032\005\001\002\000\004\002" +
    "\uffff\001\002\000\004\010\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\014\015\uff7c\033" +
    "\uff7c\051\uff7c\063\013\070\uff7c\001\002\000\012\015\ufffc" +
    "\033\ufffc\051\ufffc\070\ufffc\001\002\000\012\015\352\033" +
    "\uff7c\051\uff7c\070\uff7c\001\002\000\016\003\015\010\016" +
    "\015\uff7c\033\uff7c\051\uff7c\070\uff7c\001\002\000\012\015" +
    "\ufffd\033\ufffd\051\ufffd\070\ufffd\001\002\000\014\015\036" +
    "\033\045\051\043\070\uff7c\107\040\001\002\000\004\101" +
    "\021\001\002\000\012\015\ufffb\033\ufffb\051\ufffb\070\ufffb" +
    "\001\002\000\012\015\ufffa\033\ufffa\051\ufffa\070\ufffa\001" +
    "\002\000\016\004\023\005\031\006\027\007\022\020\026" +
    "\055\024\001\002\000\060\003\uff81\021\uff81\022\uff81\035" +
    "\uff81\041\uff81\061\uff81\062\uff81\072\uff81\077\uff81\100\uff81" +
    "\101\uff81\102\uff81\103\uff81\106\uff81\107\uff81\113\uff81\116" +
    "\uff81\117\uff81\120\uff81\122\uff81\123\uff81\125\uff81\126\uff81" +
    "\001\002\000\060\003\uff83\021\uff83\022\uff83\035\uff83\041" +
    "\uff83\061\uff83\062\uff83\072\uff83\077\uff83\100\uff83\101\uff83" +
    "\102\uff83\103\uff83\106\uff83\107\uff83\113\uff83\116\uff83\117" +
    "\uff83\120\uff83\122\uff83\123\uff83\125\uff83\126\uff83\001\002" +
    "\000\060\003\uff7d\021\uff7d\022\uff7d\035\uff7d\041\uff7d\061" +
    "\uff7d\062\uff7d\072\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d" +
    "\103\uff7d\106\uff7d\107\uff7d\113\uff7d\116\uff7d\117\uff7d\120" +
    "\uff7d\122\uff7d\123\uff7d\125\uff7d\126\uff7d\001\002\000\004" +
    "\107\032\001\002\000\060\003\uff7e\021\uff7e\022\uff7e\035" +
    "\uff7e\041\uff7e\061\uff7e\062\uff7e\072\uff7e\077\uff7e\100\uff7e" +
    "\101\uff7e\102\uff7e\103\uff7e\106\uff7e\107\uff7e\113\uff7e\116" +
    "\uff7e\117\uff7e\120\uff7e\122\uff7e\123\uff7e\125\uff7e\126\uff7e" +
    "\001\002\000\060\003\uff82\021\uff82\022\uff82\035\uff82\041" +
    "\uff82\061\uff82\062\uff82\072\uff82\077\uff82\100\uff82\101\uff82" +
    "\102\uff82\103\uff82\106\uff82\107\uff82\113\uff82\116\uff82\117" +
    "\uff82\120\uff82\122\uff82\123\uff82\125\uff82\126\uff82\001\002" +
    "\000\060\003\uff7f\021\uff7f\022\uff7f\035\uff7f\041\uff7f\061" +
    "\uff7f\062\uff7f\072\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f" +
    "\103\uff7f\106\uff7f\107\uff7f\113\uff7f\116\uff7f\117\uff7f\120" +
    "\uff7f\122\uff7f\123\uff7f\125\uff7f\126\uff7f\001\002\000\060" +
    "\003\uff80\021\uff80\022\uff80\035\uff80\041\uff80\061\uff80\062" +
    "\uff80\072\uff80\077\uff80\100\uff80\101\uff80\102\uff80\103\uff80" +
    "\106\uff80\107\uff80\113\uff80\116\uff80\117\uff80\120\uff80\122" +
    "\uff80\123\uff80\125\uff80\126\uff80\001\002\000\016\003\015" +
    "\010\016\015\uff7c\033\uff7c\051\uff7c\070\uff7c\001\002\000" +
    "\012\015\ufff9\033\ufff9\051\ufff9\070\ufff9\001\002\000\012" +
    "\015\ufff5\033\ufff5\051\ufff5\070\ufff5\001\002\000\014\003" +
    "\uffe8\015\uffe8\033\uffe8\051\uffe8\070\uffe8\001\002\000\016" +
    "\003\322\010\323\015\uff7c\033\uff7c\051\uff7c\070\uff7c\001" +
    "\002\000\006\003\114\070\113\001\002\000\016\003\015" +
    "\010\016\015\uff7c\033\uff7c\051\uff7c\070\uff7c\001\002\000" +
    "\004\070\314\001\002\000\014\003\uffe7\015\uffe7\033\uffe7" +
    "\051\uffe7\070\uffe7\001\002\000\004\010\076\001\002\000" +
    "\012\015\ufff8\033\ufff8\051\ufff8\070\ufff8\001\002\000\004" +
    "\010\046\001\002\000\004\127\047\001\002\000\024\003" +
    "\061\023\062\024\052\030\050\042\055\044\063\064\053" +
    "\067\060\126\uff7c\001\002\000\014\003\uff84\010\uff84\070" +
    "\uff84\101\uff84\107\uff84\001\002\000\006\003\066\010\067" +
    "\001\002\000\014\003\uff86\010\uff86\070\uff86\101\uff86\107" +
    "\uff86\001\002\000\014\003\uff88\010\uff88\070\uff88\101\uff88" +
    "\107\uff88\001\002\000\004\126\uffd6\001\002\000\014\003" +
    "\uff87\010\uff87\070\uff87\101\uff87\107\uff87\001\002\000\004" +
    "\126\uffd9\001\002\000\004\126\065\001\002\000\014\003" +
    "\uff8a\010\uff8a\070\uff8a\101\uff8a\107\uff8a\001\002\000\004" +
    "\126\064\001\002\000\014\003\uff85\010\uff85\070\uff85\101" +
    "\uff85\107\uff85\001\002\000\014\003\uff89\010\uff89\070\uff89" +
    "\101\uff89\107\uff89\001\002\000\004\070\uffdf\001\002\000" +
    "\004\070\uffe0\001\002\000\004\126\uffd7\001\002\000\006" +
    "\120\072\126\uff7c\001\002\000\004\126\uffd8\001\002\000" +
    "\004\126\uffd4\001\002\000\020\023\062\024\052\030\050" +
    "\042\055\044\063\064\053\067\060\001\002\000\004\010" +
    "\074\001\002\000\006\120\072\126\uff7c\001\002\000\004" +
    "\126\uffd5\001\002\000\004\127\077\001\002\000\024\003" +
    "\101\023\062\024\052\030\050\042\055\044\063\064\053" +
    "\067\060\126\uff7c\001\002\000\004\126\105\001\002\000" +
    "\004\126\102\001\002\000\004\111\103\001\002\000\020" +
    "\023\062\024\052\030\050\042\055\044\063\064\053\067" +
    "\060\001\002\000\006\003\uffdd\070\uffdd\001\002\000\006" +
    "\003\107\111\106\001\002\000\020\023\062\024\052\030" +
    "\050\042\055\044\063\064\053\067\060\001\002\000\024" +
    "\003\114\023\062\024\052\030\050\042\055\044\063\064" +
    "\053\067\060\070\113\001\002\000\006\003\uffda\070\uffda" +
    "\001\002\000\006\003\uffdc\070\uffdc\001\002\000\006\003" +
    "\uffdb\070\uffdb\001\002\000\042\003\140\004\023\005\031" +
    "\006\027\007\022\010\143\014\151\020\026\037\121\047" +
    "\126\053\123\055\024\056\uff7c\116\122\122\130\127\135" +
    "\001\002\000\016\003\uff7c\015\uff7c\033\045\051\043\056" +
    "\117\070\uff7c\001\002\000\014\003\uffe1\015\uffe1\033\uffe1" +
    "\051\uffe1\070\uffe1\001\002\000\014\003\uffe3\015\uffe3\033" +
    "\uffe3\051\uffe3\070\uffe3\001\002\000\014\003\uffe2\015\uffe2" +
    "\033\uffe2\051\uffe2\070\uffe2\001\002\000\044\003\uffb2\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\014\uffb2\020\uffb2" +
    "\037\uffb2\047\uffb2\053\uffb2\055\uffb2\056\uffb2\057\uffb2\116" +
    "\uffb2\122\uffb2\127\uffb2\001\002\000\022\004\uff8b\005\uff8b" +
    "\006\uff8b\007\uff8b\010\uff8b\020\uff8b\055\uff8b\127\uff8b\001" +
    "\002\000\100\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0" +
    "\010\uffa0\020\uffa0\021\uffa0\022\uffa0\035\uffa0\041\uffa0\055" +
    "\uffa0\061\uffa0\062\uffa0\072\uffa0\077\uffa0\100\uffa0\101\uffa0" +
    "\102\uffa0\103\uffa0\106\uffa0\107\uffa0\113\uffa0\116\uffa0\117" +
    "\uffa0\120\uffa0\122\uffa0\123\uffa0\125\uffa0\126\uffa0\127\uffa0" +
    "\001\002\000\006\003\300\010\301\001\002\000\004\107" +
    "\277\001\002\000\026\004\uff9f\005\uff9f\006\uff9f\007\uff9f" +
    "\010\uff9f\020\uff9f\055\uff9f\056\uffd2\057\uffd2\127\uff9f\001" +
    "\002\000\032\003\261\004\023\005\031\006\027\007\022" +
    "\010\143\020\026\037\121\055\024\116\122\122\130\127" +
    "\135\001\002\000\044\003\140\004\023\005\031\006\027" +
    "\007\022\010\143\014\151\020\026\037\121\047\126\053" +
    "\123\055\024\056\uff7c\057\uff7c\116\122\122\130\127\135" +
    "\001\002\000\100\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007" +
    "\uffa1\010\uffa1\020\uffa1\021\uffa1\022\uffa1\035\uffa1\041\uffa1" +
    "\055\uffa1\061\uffa1\062\uffa1\072\uffa1\077\uffa1\100\uffa1\101" +
    "\uffa1\102\uffa1\103\uffa1\106\uffa1\107\uffa1\113\uffa1\116\uffa1" +
    "\117\uffa1\120\uffa1\122\uffa1\123\uffa1\125\uffa1\126\uffa1\127" +
    "\uffa1\001\002\000\022\004\023\005\031\006\027\007\022" +
    "\010\143\020\026\055\024\127\135\001\002\000\060\003" +
    "\uff7c\021\uff7c\022\uff7c\035\uff7c\041\uff7c\061\uff7c\062\uff7c" +
    "\072\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c\103\uff7c\106" +
    "\uff7c\107\uff7c\113\uff7c\116\122\117\uff7c\120\uff7c\122\130" +
    "\123\uff7c\125\uff7c\126\uff7c\001\002\000\060\003\uffc6\021" +
    "\uffc6\022\uffc6\035\uffc6\041\uffc6\061\uffc6\062\uffc6\072\uffc6" +
    "\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\106\uffc6\107" +
    "\uffc6\113\uffc6\116\uffc6\117\uffc6\120\uffc6\122\uffc6\123\uffc6" +
    "\125\uffc6\126\uffc6\001\002\000\060\003\uff7c\021\uff7c\022" +
    "\uff7c\035\uff7c\041\246\061\uff7c\062\252\072\uff7c\077\uff7c" +
    "\100\uff7c\101\uff7c\102\uff7c\103\uff7c\106\uff7c\107\uff7c\113" +
    "\251\116\uff7c\117\250\120\uff7c\122\uff7c\123\245\125\242" +
    "\126\uff7c\001\002\000\030\004\023\005\031\006\027\007" +
    "\022\010\143\020\026\037\121\055\024\116\122\122\130" +
    "\127\135\001\002\000\060\003\uff7c\021\uff7c\022\uff7c\035" +
    "\uff7c\041\uff7c\061\uff7c\062\uff7c\072\uff7c\077\233\100\230" +
    "\101\225\102\227\103\234\106\232\107\uff7c\113\uff7c\116" +
    "\uff7c\117\uff7c\120\uff7c\122\uff7c\123\uff7c\125\uff7c\126\uff7c" +
    "\001\002\000\060\003\uff7c\021\uff7c\022\uff7c\035\220\041" +
    "\uff7c\061\uff7c\062\uff7c\072\216\077\uff7c\100\uff7c\101\uff7c" +
    "\102\uff7c\103\uff7c\106\uff7c\107\uff7c\113\uff7c\116\uff7c\117" +
    "\uff7c\120\uff7c\122\uff7c\123\uff7c\125\uff7c\126\uff7c\001\002" +
    "\000\006\056\214\107\213\001\002\000\044\003\uffb5\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\014\uffb5\020\uffb5" +
    "\037\uffb5\047\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5\116" +
    "\uffb5\122\uffb5\127\uffb5\001\002\000\022\004\023\005\031" +
    "\006\027\007\022\010\143\020\026\055\024\127\135\001" +
    "\002\000\074\003\uff7c\021\uff7c\022\uff7c\035\uff7c\041\uff7c" +
    "\061\uff7c\062\uff7c\072\uff7c\077\uff7c\100\uff7c\101\uff7c\102" +
    "\uff7c\103\uff7c\106\uff7c\107\uff7c\110\171\112\172\113\uff7c" +
    "\115\166\116\uff7c\117\uff7c\120\uff7c\121\175\122\uff7c\123" +
    "\uff7c\124\173\125\uff7c\126\uff7c\127\174\001\002\000\060" +
    "\003\uffc1\021\uffc1\022\uffc1\035\uffc1\041\uffc1\061\uffc1\062" +
    "\uffc1\072\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1" +
    "\106\uffc1\107\uffc1\113\uffc1\116\uffc1\117\uffc1\120\uffc1\122" +
    "\uffc1\123\uffc1\125\uffc1\126\uffc1\001\002\000\004\056\162" +
    "\001\002\000\044\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\014\uffb3\020\uffb3\037\uffb3\047\uffb3\053\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\116\uffb3\122\uffb3\127\uffb3\001" +
    "\002\000\044\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4" +
    "\010\uffb4\014\uffb4\020\uffb4\037\uffb4\047\uffb4\053\uffb4\055" +
    "\uffb4\056\uffb4\057\uffb4\116\uffb4\122\uffb4\127\uffb4\001\002" +
    "\000\044\003\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\014\uffb6\020\uffb6\037\uffb6\047\uffb6\053\uffb6\055\uffb6" +
    "\056\uffb6\057\uffb6\116\uffb6\122\uffb6\127\uffb6\001\002\000" +
    "\032\003\154\004\023\005\031\006\027\007\022\010\143" +
    "\020\026\037\121\055\024\116\122\122\130\127\135\001" +
    "\002\000\004\061\156\001\002\000\100\003\uff9f\004\uff9f" +
    "\005\uff9f\006\uff9f\007\uff9f\010\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\035\uff9f\041\uff9f\055\uff9f\061\uff9f\062\uff9f\072\uff9f" +
    "\077\uff9f\100\uff9f\101\uff9f\102\uff9f\103\uff9f\106\uff9f\107" +
    "\uff9f\113\uff9f\116\uff9f\117\uff9f\120\uff9f\122\uff9f\123\uff9f" +
    "\125\uff9f\126\uff9f\127\uff9f\001\002\000\004\056\155\001" +
    "\002\000\044\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4" +
    "\010\uffa4\014\uffa4\020\uffa4\037\uffa4\047\uffa4\053\uffa4\055" +
    "\uffa4\056\uffa4\057\uffa4\116\uffa4\122\uffa4\127\uffa4\001\002" +
    "\000\004\070\157\001\002\000\042\003\140\004\023\005" +
    "\031\006\027\007\022\010\143\014\151\020\026\037\121" +
    "\047\126\053\123\055\024\056\uff7c\116\122\122\130\127" +
    "\135\001\002\000\004\056\161\001\002\000\044\003\uffa5" +
    "\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\014\uffa5\020" +
    "\uffa5\037\uffa5\047\uffa5\053\uffa5\055\uffa5\056\uffa5\057\uffa5" +
    "\116\uffa5\122\uffa5\127\uffa5\001\002\000\014\003\uff7c\015" +
    "\uff7c\033\045\051\043\070\uff7c\001\002\000\014\003\uffe4" +
    "\015\uffe4\033\uffe4\051\uffe4\070\uffe4\001\002\000\060\003" +
    "\uffc4\021\uffc4\022\uffc4\035\uffc4\041\uffc4\061\uffc4\062\uffc4" +
    "\072\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\106" +
    "\uffc4\107\uffc4\113\uffc4\116\uffc4\117\uffc4\120\uffc4\122\uffc4" +
    "\123\uffc4\125\uffc4\126\uffc4\001\002\000\030\004\023\005" +
    "\031\006\027\007\022\010\143\020\026\037\121\055\024" +
    "\116\122\122\130\127\135\001\002\000\030\004\uff96\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\020\uff96\037\uff96\055\uff96" +
    "\116\uff96\122\uff96\127\uff96\001\002\000\060\003\uffc0\021" +
    "\uffc0\022\uffc0\035\uffc0\041\uffc0\061\uffc0\062\uffc0\072\uffc0" +
    "\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\106\uffc0\107" +
    "\uffc0\113\uffc0\116\uffc0\117\uffc0\120\uffc0\122\uffc0\123\uffc0" +
    "\125\uffc0\126\uffc0\001\002\000\060\003\uffbc\021\uffbc\022" +
    "\uffbc\035\uffbc\041\uffbc\061\uffbc\062\uffbc\072\uffbc\077\uffbc" +
    "\100\uffbc\101\uffbc\102\uffbc\103\uffbc\106\uffbc\107\uffbc\113" +
    "\uffbc\116\uffbc\117\uffbc\120\uffbc\122\uffbc\123\uffbc\125\uffbc" +
    "\126\uffbc\001\002\000\030\004\uff98\005\uff98\006\uff98\007" +
    "\uff98\010\uff98\020\uff98\037\uff98\055\uff98\116\uff98\122\uff98" +
    "\127\uff98\001\002\000\030\004\uff94\005\uff94\006\uff94\007" +
    "\uff94\010\uff94\020\uff94\037\uff94\055\uff94\116\uff94\122\uff94" +
    "\127\uff94\001\002\000\030\004\uff95\005\uff95\006\uff95\007" +
    "\uff95\010\uff95\020\uff95\037\uff95\055\uff95\116\uff95\122\uff95" +
    "\127\uff95\001\002\000\034\003\uff7c\004\023\005\031\006" +
    "\027\007\022\010\143\020\026\037\121\055\024\116\122" +
    "\122\130\126\uff7c\127\135\001\002\000\030\004\uff97\005" +
    "\uff97\006\uff97\007\uff97\010\uff97\020\uff97\037\uff97\055\uff97" +
    "\116\uff97\122\uff97\127\uff97\001\002\000\010\003\uff7c\120" +
    "\205\126\uff7c\001\002\000\006\003\201\126\202\001\002" +
    "\000\026\003\uffba\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010" +
    "\uff9f\020\uff9f\055\uff9f\126\uffba\127\uff9f\001\002\000\060" +
    "\003\uffbe\021\uffbe\022\uffbe\035\uffbe\041\uffbe\061\uffbe\062" +
    "\uffbe\072\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe" +
    "\106\uffbe\107\uffbe\113\uffbe\116\uffbe\117\uffbe\120\uffbe\122" +
    "\uffbe\123\uffbe\125\uffbe\126\uffbe\001\002\000\060\003\uffbf" +
    "\021\uffbf\022\uffbf\035\uffbf\041\uffbf\061\uffbf\062\uffbf\072" +
    "\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\106\uffbf" +
    "\107\uffbf\113\uffbf\116\uffbf\117\uffbf\120\uffbf\122\uffbf\123" +
    "\uffbf\125\uffbf\126\uffbf\001\002\000\006\003\uffbb\126\uffbb" +
    "\001\002\000\006\003\uffb7\126\uffb7\001\002\000\032\003" +
    "\207\004\023\005\031\006\027\007\022\010\143\020\026" +
    "\037\121\055\024\116\122\122\130\127\135\001\002\000" +
    "\010\003\uff7c\120\205\126\uff7c\001\002\000\006\003\uffb8" +
    "\126\uffb8\001\002\000\006\003\uffb9\126\uffb9\001\002\000" +
    "\060\003\uffbd\021\uffbd\022\uffbd\035\uffbd\041\uffbd\061\uffbd" +
    "\062\uffbd\072\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103" +
    "\uffbd\106\uffbd\107\uffbd\113\uffbd\116\uffbd\117\uffbd\120\uffbd" +
    "\122\uffbd\123\uffbd\125\uffbd\126\uffbd\001\002\000\060\003" +
    "\uffc8\021\uffc8\022\uffc8\035\uffc8\041\uffc8\061\uffc8\062\uffc8" +
    "\072\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\106" +
    "\uffc8\107\uffc8\113\uffc8\116\uffc8\117\uffc8\120\uffc8\122\uffc8" +
    "\123\uffc8\125\uffc8\126\uffc8\001\002\000\044\003\uffaf\004" +
    "\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\014\uffaf\020\uffaf" +
    "\037\uffaf\047\uffaf\053\uffaf\055\uffaf\056\uffaf\057\uffaf\116" +
    "\uffaf\122\uffaf\127\uffaf\001\002\000\044\003\uffb1\004\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\014\uffb1\020\uffb1\037" +
    "\uffb1\047\uffb1\053\uffb1\055\uffb1\056\uffb1\057\uffb1\116\uffb1" +
    "\122\uffb1\127\uffb1\001\002\000\060\003\uffd1\021\uffd1\022" +
    "\uffd1\035\uffd1\041\uffd1\061\uffd1\062\uffd1\072\uffd1\077\uffd1" +
    "\100\uffd1\101\uffd1\102\uffd1\103\uffd1\106\uffd1\107\uffd1\113" +
    "\uffd1\116\uffd1\117\uffd1\120\uffd1\122\uffd1\123\uffd1\125\uffd1" +
    "\126\uffd1\001\002\000\030\004\uff8c\005\uff8c\006\uff8c\007" +
    "\uff8c\010\uff8c\020\uff8c\037\uff8c\055\uff8c\116\uff8c\122\uff8c" +
    "\127\uff8c\001\002\000\060\003\uffcf\021\uffcf\022\uffcf\035" +
    "\uffcf\041\uffcf\061\uffcf\062\uffcf\072\uffcf\077\uffcf\100\uffcf" +
    "\101\uffcf\102\uffcf\103\uffcf\106\uffcf\107\uffcf\113\uffcf\116" +
    "\uffcf\117\uffcf\120\uffcf\122\uffcf\123\uffcf\125\uffcf\126\uffcf" +
    "\001\002\000\030\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\020\uff8d\037\uff8d\055\uff8d\116\uff8d\122\uff8d\127\uff8d" +
    "\001\002\000\030\004\023\005\031\006\027\007\022\010" +
    "\143\020\026\037\121\055\024\116\122\122\130\127\135" +
    "\001\002\000\060\003\uff7c\021\uff7c\022\uff7c\035\220\041" +
    "\uff7c\061\uff7c\062\uff7c\072\216\077\uff7c\100\uff7c\101\uff7c" +
    "\102\uff7c\103\uff7c\106\uff7c\107\uff7c\113\uff7c\116\uff7c\117" +
    "\uff7c\120\uff7c\122\uff7c\123\uff7c\125\uff7c\126\uff7c\001\002" +
    "\000\060\003\uffd0\021\uffd0\022\uffd0\035\uffd0\041\uffd0\061" +
    "\uffd0\062\uffd0\072\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0" +
    "\103\uffd0\106\uffd0\107\uffd0\113\uffd0\116\uffd0\117\uffd0\120" +
    "\uffd0\122\uffd0\123\uffd0\125\uffd0\126\uffd0\001\002\000\060" +
    "\003\uffce\021\uffce\022\uffce\035\uffce\041\uffce\061\uffce\062" +
    "\uffce\072\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce" +
    "\106\uffce\107\uffce\113\uffce\116\uffce\117\uffce\120\uffce\122" +
    "\uffce\123\uffce\125\uffce\126\uffce\001\002\000\030\004\uff93" +
    "\005\uff93\006\uff93\007\uff93\010\uff93\020\uff93\037\uff93\055" +
    "\uff93\116\uff93\122\uff93\127\uff93\001\002\000\060\003\uffcc" +
    "\021\uffcc\022\uffcc\035\uffcc\041\uffcc\061\uffcc\062\uffcc\072" +
    "\uffcc\077\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\106\uffcc" +
    "\107\uffcc\113\uffcc\116\uffcc\117\uffcc\120\uffcc\122\uffcc\123" +
    "\uffcc\125\uffcc\126\uffcc\001\002\000\030\004\uff8e\005\uff8e" +
    "\006\uff8e\007\uff8e\010\uff8e\020\uff8e\037\uff8e\055\uff8e\116" +
    "\uff8e\122\uff8e\127\uff8e\001\002\000\030\004\uff91\005\uff91" +
    "\006\uff91\007\uff91\010\uff91\020\uff91\037\uff91\055\uff91\116" +
    "\uff91\122\uff91\127\uff91\001\002\000\030\004\023\005\031" +
    "\006\027\007\022\010\143\020\026\037\121\055\024\116" +
    "\122\122\130\127\135\001\002\000\030\004\uff8f\005\uff8f" +
    "\006\uff8f\007\uff8f\010\uff8f\020\uff8f\037\uff8f\055\uff8f\116" +
    "\uff8f\122\uff8f\127\uff8f\001\002\000\030\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\020\uff92\037\uff92\055\uff92\116" +
    "\uff92\122\uff92\127\uff92\001\002\000\030\004\uff90\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\020\uff90\037\uff90\055\uff90\116" +
    "\uff90\122\uff90\127\uff90\001\002\000\060\003\uff7c\021\uff7c" +
    "\022\uff7c\035\uff7c\041\uff7c\061\uff7c\062\uff7c\072\uff7c\077" +
    "\233\100\230\101\225\102\227\103\234\106\232\107\uff7c" +
    "\113\uff7c\116\uff7c\117\uff7c\120\uff7c\122\uff7c\123\uff7c\125" +
    "\uff7c\126\uff7c\001\002\000\060\003\uffcd\021\uffcd\022\uffcd" +
    "\035\uffcd\041\uffcd\061\uffcd\062\uffcd\072\uffcd\077\uffcd\100" +
    "\uffcd\101\uffcd\102\uffcd\103\uffcd\106\uffcd\107\uffcd\113\uffcd" +
    "\116\uffcd\117\uffcd\120\uffcd\122\uffcd\123\uffcd\125\uffcd\126" +
    "\uffcd\001\002\000\006\003\240\126\241\001\002\000\060" +
    "\003\uffc2\021\uffc2\022\uffc2\035\uffc2\041\uffc2\061\uffc2\062" +
    "\uffc2\072\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2" +
    "\106\uffc2\107\uffc2\113\uffc2\116\uffc2\117\uffc2\120\uffc2\122" +
    "\uffc2\123\uffc2\125\uffc2\126\uffc2\001\002\000\060\003\uffc3" +
    "\021\uffc3\022\uffc3\035\uffc3\041\uffc3\061\uffc3\062\uffc3\072" +
    "\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\106\uffc3" +
    "\107\uffc3\113\uffc3\116\uffc3\117\uffc3\120\uffc3\122\uffc3\123" +
    "\uffc3\125\uffc3\126\uffc3\001\002\000\030\004\uff9c\005\uff9c" +
    "\006\uff9c\007\uff9c\010\uff9c\020\uff9c\037\uff9c\055\uff9c\116" +
    "\uff9c\122\uff9c\127\uff9c\001\002\000\060\003\uffc9\021\uffc9" +
    "\022\uffc9\035\uffc9\041\uffc9\061\uffc9\062\uffc9\072\uffc9\077" +
    "\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\106\uffc9\107\uffc9" +
    "\113\uffc9\116\uffc9\117\uffc9\120\uffc9\122\uffc9\123\uffc9\125" +
    "\uffc9\126\uffc9\001\002\000\060\003\uffcb\021\uffcb\022\uffcb" +
    "\035\uffcb\041\uffcb\061\uffcb\062\uffcb\072\uffcb\077\uffcb\100" +
    "\uffcb\101\uffcb\102\uffcb\103\uffcb\106\uffcb\107\uffcb\113\uffcb" +
    "\116\uffcb\117\uffcb\120\uffcb\122\uffcb\123\uffcb\125\uffcb\126" +
    "\uffcb\001\002\000\030\004\uff9e\005\uff9e\006\uff9e\007\uff9e" +
    "\010\uff9e\020\uff9e\037\uff9e\055\uff9e\116\uff9e\122\uff9e\127" +
    "\uff9e\001\002\000\030\004\uff9a\005\uff9a\006\uff9a\007\uff9a" +
    "\010\uff9a\020\uff9a\037\uff9a\055\uff9a\116\uff9a\122\uff9a\127" +
    "\uff9a\001\002\000\030\004\023\005\031\006\027\007\022" +
    "\010\143\020\026\037\121\055\024\116\122\122\130\127" +
    "\135\001\002\000\030\004\uff9d\005\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\020\uff9d\037\uff9d\055\uff9d\116\uff9d\122\uff9d\127" +
    "\uff9d\001\002\000\030\004\uff9b\005\uff9b\006\uff9b\007\uff9b" +
    "\010\uff9b\020\uff9b\037\uff9b\055\uff9b\116\uff9b\122\uff9b\127" +
    "\uff9b\001\002\000\030\004\uff99\005\uff99\006\uff99\007\uff99" +
    "\010\uff99\020\uff99\037\uff99\055\uff99\116\uff99\122\uff99\127" +
    "\uff99\001\002\000\060\003\uff7c\021\uff7c\022\uff7c\035\uff7c" +
    "\041\246\061\uff7c\062\252\072\uff7c\077\uff7c\100\uff7c\101" +
    "\uff7c\102\uff7c\103\uff7c\106\uff7c\107\uff7c\113\251\116\uff7c" +
    "\117\250\120\uff7c\122\uff7c\123\245\125\242\126\uff7c\001" +
    "\002\000\060\003\uffca\021\uffca\022\uffca\035\uffca\041\uffca" +
    "\061\uffca\062\uffca\072\uffca\077\uffca\100\uffca\101\uffca\102" +
    "\uffca\103\uffca\106\uffca\107\uffca\113\uffca\116\uffca\117\uffca" +
    "\120\uffca\122\uffca\123\uffca\125\uffca\126\uffca\001\002\000" +
    "\060\003\uffc5\021\uffc5\022\uffc5\035\uffc5\041\uffc5\061\uffc5" +
    "\062\uffc5\072\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103" +
    "\uffc5\106\uffc5\107\uffc5\113\uffc5\116\uffc5\117\uffc5\120\uffc5" +
    "\122\uffc5\123\uffc5\125\uffc5\126\uffc5\001\002\000\060\003" +
    "\uffc7\021\uffc7\022\uffc7\035\uffc7\041\uffc7\061\uffc7\062\uffc7" +
    "\072\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\106" +
    "\uffc7\107\uffc7\113\uffc7\116\uffc7\117\uffc7\120\uffc7\122\uffc7" +
    "\123\uffc7\125\uffc7\126\uffc7\001\002\000\006\056\uffd3\057" +
    "\uffd3\001\002\000\006\003\271\022\272\001\002\000\004" +
    "\022\262\001\002\000\044\003\140\004\023\005\031\006" +
    "\027\007\022\010\143\014\151\020\026\037\121\047\126" +
    "\053\123\055\024\056\uff7c\057\uff7c\116\122\122\130\127" +
    "\135\001\002\000\006\056\uff7c\057\264\001\002\000\042" +
    "\003\140\004\023\005\031\006\027\007\022\010\143\014" +
    "\151\020\026\037\121\047\126\053\123\055\024\056\uff7c" +
    "\116\122\122\130\127\135\001\002\000\004\056\267\001" +
    "\002\000\004\056\uffa6\001\002\000\044\003\uffac\004\uffac" +
    "\005\uffac\006\uffac\007\uffac\010\uffac\014\uffac\020\uffac\037" +
    "\uffac\047\uffac\053\uffac\055\uffac\056\uffac\057\uffac\116\uffac" +
    "\122\uffac\127\uffac\001\002\000\004\056\uffa7\001\002\000" +
    "\004\056\276\001\002\000\044\003\140\004\023\005\031" +
    "\006\027\007\022\010\143\014\151\020\026\037\121\047" +
    "\126\053\123\055\024\056\uff7c\057\uff7c\116\122\122\130" +
    "\127\135\001\002\000\006\056\uff7c\057\264\001\002\000" +
    "\004\056\275\001\002\000\044\003\uffae\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\014\uffae\020\uffae\037\uffae\047" +
    "\uffae\053\uffae\055\uffae\056\uffae\057\uffae\116\uffae\122\uffae" +
    "\127\uffae\001\002\000\044\003\uffad\004\uffad\005\uffad\006" +
    "\uffad\007\uffad\010\uffad\014\uffad\020\uffad\037\uffad\047\uffad" +
    "\053\uffad\055\uffad\056\uffad\057\uffad\116\uffad\122\uffad\127" +
    "\uffad\001\002\000\044\003\uffb0\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\014\uffb0\020\uffb0\037\uffb0\047\uffb0\053" +
    "\uffb0\055\uffb0\056\uffb0\057\uffb0\116\uffb0\122\uffb0\127\uffb0" +
    "\001\002\000\004\056\312\001\002\000\004\110\302\001" +
    "\002\000\030\004\023\005\031\006\027\007\022\010\143" +
    "\020\026\037\121\055\024\116\122\122\130\127\135\001" +
    "\002\000\004\021\304\001\002\000\030\004\023\005\031" +
    "\006\027\007\022\010\143\020\026\037\121\055\024\116" +
    "\122\122\130\127\135\001\002\000\004\061\306\001\002" +
    "\000\004\070\307\001\002\000\042\003\140\004\023\005" +
    "\031\006\027\007\022\010\143\014\151\020\026\037\121" +
    "\047\126\053\123\055\024\056\uff7c\116\122\122\130\127" +
    "\135\001\002\000\004\056\311\001\002\000\044\003\uffa3" +
    "\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\014\uffa3\020" +
    "\uffa3\037\uffa3\047\uffa3\053\uffa3\055\uffa3\056\uffa3\057\uffa3" +
    "\116\uffa3\122\uffa3\127\uffa3\001\002\000\044\003\uffa2\004" +
    "\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\014\uffa2\020\uffa2" +
    "\037\uffa2\047\uffa2\053\uffa2\055\uffa2\056\uffa2\057\uffa2\116" +
    "\uffa2\122\uffa2\127\uffa2\001\002\000\006\003\uffde\070\uffde" +
    "\001\002\000\042\003\140\004\023\005\031\006\027\007" +
    "\022\010\143\014\151\020\026\037\121\047\126\053\123" +
    "\055\024\056\uff7c\116\122\122\130\127\135\001\002\000" +
    "\004\056\316\001\002\000\014\003\uff7c\015\uff7c\033\045" +
    "\051\043\070\uff7c\001\002\000\014\003\uffe6\015\uffe6\033" +
    "\uffe6\051\uffe6\070\uffe6\001\002\000\012\015\ufff7\033\ufff7" +
    "\051\ufff7\070\ufff7\001\002\000\014\003\uffe5\015\uffe5\033" +
    "\uffe5\051\uffe5\070\uffe5\001\002\000\014\015\uff7c\033\045" +
    "\051\043\070\uff7c\107\345\001\002\000\006\111\uff7c\120" +
    "\331\001\002\000\012\015\ufff2\033\ufff2\051\ufff2\070\ufff2" +
    "\001\002\000\012\015\ufff1\033\ufff1\051\ufff1\070\ufff1\001" +
    "\002\000\012\015\ufff6\033\ufff6\051\ufff6\070\ufff6\001\002" +
    "\000\004\111\334\001\002\000\004\111\uffeb\001\002\000" +
    "\004\010\332\001\002\000\006\111\uff7c\120\331\001\002" +
    "\000\004\111\uffec\001\002\000\020\023\062\024\052\030" +
    "\050\042\055\044\063\064\053\067\060\001\002\000\006" +
    "\101\336\107\uff7c\001\002\000\016\004\023\005\031\006" +
    "\027\007\022\020\026\055\024\001\002\000\004\107\uffe9" +
    "\001\002\000\004\107\341\001\002\000\016\003\322\010" +
    "\323\015\uff7c\033\uff7c\051\uff7c\070\uff7c\001\002\000\012" +
    "\015\ufff0\033\ufff0\051\ufff0\070\ufff0\001\002\000\004\107" +
    "\uffea\001\002\000\012\015\uffed\033\uffed\051\uffed\070\uffed" +
    "\001\002\000\016\003\322\010\323\015\uff7c\033\uff7c\051" +
    "\uff7c\070\uff7c\001\002\000\012\015\uffef\033\uffef\051\uffef" +
    "\070\uffef\001\002\000\012\015\uffee\033\uffee\051\uffee\070" +
    "\uffee\001\002\000\010\033\045\051\043\070\uff7c\001\002" +
    "\000\010\033\ufff3\051\ufff3\070\ufff3\001\002\000\014\003" +
    "\322\010\323\033\uff7c\051\uff7c\070\uff7c\001\002\000\010" +
    "\033\ufff4\051\ufff4\070\ufff4\001\002\000\004\070\355\001" +
    "\002\000\042\003\140\004\023\005\031\006\027\007\022" +
    "\010\143\014\151\020\026\037\121\047\126\053\123\055" +
    "\024\056\uff7c\116\122\122\130\127\135\001\002\000\004" +
    "\002\000\001\002\000\004\056\360\001\002\000\004\002" +
    "\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\007\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\010\013\011\001\001\000\002\001\001\000\006\006" +
    "\350\020\347\001\001\000\010\006\017\014\013\015\016" +
    "\001\001\000\002\001\001\000\016\006\041\016\043\027" +
    "\033\030\034\031\040\032\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\072\024\073" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\017" +
    "\014\032\015\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\324\021\325\022\323" +
    "\001\001\000\004\004\320\001\001\000\010\006\017\014" +
    "\317\015\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\053\033\056\034\055\071\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\070\035\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\072\001\001\000\002\001\001\000\006\006" +
    "\070\035\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\053\033\077\034\055\071\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\312\001\001\000\010\004\107\005\110\071\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\006\124\036\144\037\147\040\140\041\123" +
    "\043\136\045\135\047\133\050\132\051\131\056\126\057" +
    "\146\061\145\062\117\063\141\070\130\072\143\073\027" +
    "\001\001\000\016\003\115\006\041\027\114\030\034\031" +
    "\040\032\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\152\041\257\043\136\045\135\047" +
    "\133\050\132\051\131\063\141\070\130\072\143\073\027" +
    "\001\001\000\046\006\124\036\256\037\147\040\140\041" +
    "\123\043\136\045\135\047\133\050\132\051\131\056\126" +
    "\057\146\061\145\062\117\063\141\070\130\072\143\073" +
    "\027\001\001\000\002\001\001\000\012\050\255\051\131" +
    "\072\143\073\027\001\001\000\006\006\152\063\254\001" +
    "\001\000\002\001\001\000\010\006\242\046\243\064\246" +
    "\001\001\000\030\006\152\041\236\043\136\045\135\047" +
    "\133\050\132\051\131\063\141\070\130\072\143\073\027" +
    "\001\001\000\010\006\225\044\223\066\230\001\001\000" +
    "\010\006\216\042\214\067\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\050\211\051\131\072\143\073" +
    "\027\001\001\000\012\006\167\052\163\055\166\065\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\152" +
    "\041\151\043\136\045\135\047\133\050\132\051\131\063" +
    "\141\070\130\072\143\073\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\006\124\036\157\037\147\040\140" +
    "\041\123\043\136\045\135\047\133\050\132\051\131\056" +
    "\126\057\146\061\145\062\117\063\141\070\130\072\143" +
    "\073\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\041\027\162\030\034\031\040\032\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\152\041" +
    "\210\043\136\045\135\047\133\050\132\051\131\063\141" +
    "\070\130\072\143\073\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\177\041\175\043" +
    "\136\045\135\047\133\050\132\051\131\053\176\063\141" +
    "\070\130\072\143\073\027\001\001\000\002\001\001\000" +
    "\006\006\203\054\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\006\152\041\205\043\136" +
    "\045\135\047\133\050\132\051\131\063\141\070\130\072" +
    "\143\073\027\001\001\000\006\006\203\054\207\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\006\152\043\221\045\135\047\133\050\132" +
    "\051\131\063\141\070\130\072\143\073\027\001\001\000" +
    "\010\006\216\042\222\067\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\006\152\045\234" +
    "\047\133\050\132\051\131\063\141\070\130\072\143\073" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\225\044\235\066\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\152" +
    "\047\252\050\132\051\131\063\141\070\130\072\143\073" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\242\046\253\064\246\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\006" +
    "\124\036\262\037\147\040\140\041\123\043\136\045\135" +
    "\047\133\050\132\051\131\056\126\057\146\061\145\062" +
    "\117\063\141\070\130\072\143\073\027\001\001\000\006" +
    "\006\265\060\264\001\001\000\046\006\124\036\267\037" +
    "\147\040\140\041\123\043\136\045\135\047\133\050\132" +
    "\051\131\056\126\057\146\061\145\062\117\063\141\070" +
    "\130\072\143\073\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\006\124\036\272\037\147\040\140\041\123" +
    "\043\136\045\135\047\133\050\132\051\131\056\126\057" +
    "\146\061\145\062\117\063\141\070\130\072\143\073\027" +
    "\001\001\000\006\006\265\060\273\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\152\041" +
    "\302\043\136\045\135\047\133\050\132\051\131\063\141" +
    "\070\130\072\143\073\027\001\001\000\002\001\001\000" +
    "\030\006\152\041\304\043\136\045\135\047\133\050\132" +
    "\051\131\063\141\070\130\072\143\073\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\006\124\036\307" +
    "\037\147\040\140\041\123\043\136\045\135\047\133\050" +
    "\132\051\131\056\126\057\146\061\145\062\117\063\141" +
    "\070\130\072\143\073\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\006\124\036\314\037\147\040\140\041\123\043\136\045" +
    "\135\047\133\050\132\051\131\056\126\057\146\061\145" +
    "\062\117\063\141\070\130\072\143\073\027\001\001\000" +
    "\002\001\001\000\014\006\041\027\316\030\034\031\040" +
    "\032\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\041\024\345\027\343\030\034" +
    "\031\040\032\036\001\001\000\006\006\327\025\326\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\327\025\332\001\001\000\002\001\001\000\004" +
    "\071\334\001\001\000\006\006\336\026\337\001\001\000" +
    "\006\072\342\073\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\324\021\341\022\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\324\021\346\022\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\041\027\353\030\034\031\040" +
    "\032\036\001\001\000\002\001\001\000\010\006\324\021" +
    "\352\022\323\001\001\000\002\001\001\000\004\012\355" +
    "\001\001\000\046\006\124\036\356\037\147\040\140\041" +
    "\123\043\136\045\135\047\133\050\132\051\131\056\126" +
    "\057\146\061\145\062\117\063\141\070\130\072\143\073" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);


        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), (linea+1)));
        System.out.println(ScannerABC.errores.size());
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);

        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), linea+1));
     
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador_Sintactico$actions {



  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // empty ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("empty",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Boolean ::= PR_FALSE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Boolean ::= PR_TRUE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // literal ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // literal ::= L_CHAR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // literal ::= L_STRING 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // literal ::= L_FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // literal ::= L_INTEGER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Tipo ::= PR_REAL 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Tipo ::= PR_STRING 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Tipo ::= PR_SHORTINT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Tipo ::= PR_LONGINT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Tipo ::= PR_CHAR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Tipo ::= PR_INT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Tipo ::= PR_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OperadoresLogicosUnarios ::= O_NOT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosUnarios",54, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OperadoresLogicosBinarios ::= O_AND 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OperadoresLogicosBinarios ::= O_OR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OperadoresComparacion ::= O_LESS_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OperadoresComparacion ::= O_LESS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OperadoresComparacion ::= O_LESS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OperadoresComparacion ::= O_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OperadoresComparacion ::= O_GREATER_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OperadoresComparacion ::= O_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OperadorAsignacion ::= O_SLASH_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OperadorAsignacion ::= O_ASTERISK_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OperadorAsignacion ::= O_MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OperadorAsignacion ::= O_PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OperadorAsignacion ::= O_COLON_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OperadoresEnteros ::= O_DIV 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OperadoresEnteros ::= O_MOD 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OperadoresEnteros ::= O_SLASH 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OperadoresEnteros ::= O_ASTERISK 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OperadoresEnteros ::= O_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OperadoresEnteros ::= O_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IncrementoDecremento ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // IncrementoDecremento ::= O_MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // IncrementoDecremento ::= O_PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // For ::= PR_FOR error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion FOR Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // For ::= PR_FOR IDENTIFICADOR O_COLON_EQUALS Expresion PR_TO Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // While ::= PR_WHILE error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion WHILE Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // While ::= PR_WHILE Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Else ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Else ::= PR_ELSE Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // rrr ::= PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rrr",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // rrr ::= Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rrr",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // rrr ::= Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rrr",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // rrr ::= PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rrr",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IfThenElse ::= PR_IF error PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IfThenElse ::= PR_IF Expresion error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END, Espera un PR_THEN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IfThenElse ::= PR_IF Expresion PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // InstruccionSC ::= error O_SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion sc Recuperado con O_SEMICOLON");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // InstruccionSC ::= Expresion O_SEMICOLON 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // InstruccionBE ::= error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccionbe Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // InstruccionBE ::= For 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // InstruccionBE ::= While 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // InstruccionBE ::= IfThenElse 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Instruccion ::= InstruccionSC 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Instruccion ::= InstruccionBE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ListaParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ListaParametros ::= O_COMMA error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix: Expresion esperada despues de la coma.");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ListaParametros ::= O_COMMA Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LParametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LParametro ::= Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExpresionAsignacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExpresionAsignacion ::= OperadorAsignacion Expresion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expresion7 ::= ExpresionAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expresion6 ::= literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expresion6 ::= IDENTIFICADOR Expresion7 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expresion5 ::= Expresion6 IncrementoDecremento 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion5",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresion4 ::= Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion4 ::= OperadoresLogicosUnarios Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion4 ::= IncrementoDecremento Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExpresionOperadoresEnteros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExpresionOperadoresEnteros ::= OperadoresEnteros Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion3 ::= Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpresionOperadoresComparacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpresionOperadoresComparacion ::= OperadoresComparacion Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion2 ::= Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpresionOperadoresLogicos ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpresionOperadoresLogicos ::= OperadoresLogicosBinarios Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion ::= Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Instrucciones ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Instrucciones ::= Instruccion Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // masParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // masParametros ::= O_COMMA Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Parametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Parametro ::= Tipo error 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros recuperado en Parametro"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Parametro ::= Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // kk ::= r 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("kk",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // kk ::= Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("kk",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS error kk 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros2"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rr ::= Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rr",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rr ::= PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rr",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // r ::= error rr 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // r ::= PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Rutina ::= EncabezadoFuncion r 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Rutina ::= EncabezadoProcedimiento PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Rutinas ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Rutinas ::= Rutina 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Inicializar ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Inicializar ::= O_EQUALS literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Identificadores ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Identificadores ::= O_COMMA IDENTIFICADOR Identificadores 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ErroresVariables ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ErroresVariables ::= O_SEMICOLON Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con O_SEMICOLON Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Variable ::= error ErroresVariables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con ErroresVariables Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Variable ::= IDENTIFICADOR Identificadores O_COLON Tipo Inicializar O_SEMICOLON Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Variables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Variables ::= Variable 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SeccionVariables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SeccionVariables ::= PR_VAR Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ErrorConstante ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ErrorConstante ::= PR_VAR Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ErrorConstante ::= O_SEMICOLON Constantes 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Constante ::= error ErrorConstante 
            {
              Object RESULT =null;
		System.out.println("Error");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Constante ::= IDENTIFICADOR O_EQUALS literal O_SEMICOLON Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Constantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Constantes ::= Constante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SeccionConstantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SeccionConstantes ::= PR_CONST Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EntradaPrograma ::= PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EntradaPrograma",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la estructura del programa");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PR_PROGRAM IDENTIFICADOR SeccionConstantes SeccionVariables Rutinas EntradaPrograma 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

