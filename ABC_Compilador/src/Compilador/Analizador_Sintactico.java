
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\003\010\000\002\006" +
    "\005\000\002\007\004\000\002\007\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\007\000\002\011\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\003\000\002" +
    "\014\004\000\002\014\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\011\000\002\016\004\000\002\020\004" +
    "\000\002\020\003\000\002\021\005\000\002\021\003\000" +
    "\002\022\004\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\007\000\002\024\007\000\002\025" +
    "\007\000\002\025\007\000\002\026\011\000\002\026\011" +
    "\000\002\027\003\000\002\030\005\000\002\030\004\000" +
    "\002\030\003\000\002\031\006\000\002\031\003\000\002" +
    "\032\004\000\002\032\003\000\002\035\004\000\002\036" +
    "\005\000\002\036\003\000\002\037\004\000\002\040\005" +
    "\000\002\040\003\000\002\041\004\000\002\042\005\000" +
    "\002\042\003\000\002\043\004\000\002\043\004\000\002" +
    "\043\003\000\002\044\004\000\002\045\004\000\002\045" +
    "\005\000\002\045\005\000\002\045\003\000\002\046\003" +
    "\000\002\046\005\000\002\046\005\000\002\051\004\000" +
    "\002\051\003\000\002\047\004\000\002\047\003\000\002" +
    "\050\005\000\002\050\004\000\002\050\003\000\002\052" +
    "\003\000\002\052\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\004\000\002\034\004\000" +
    "\002\034\004\000\002\053\010\000\002\053\005\000\002" +
    "\053\006\000\002\053\005\000\002\054\004\000\002\054" +
    "\003\000\002\055\010\000\002\055\005\000\002\056\014" +
    "\000\002\056\005\000\002\057\003\000\002\057\003\000" +
    "\002\057\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\060\003\000\002\060" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\062\003\000\002\062\003\000\002\063\003\000\002\063" +
    "\003\000\002\064\003\000\002\065\003\000\002\065\003" +
    "\000\002\065\003\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\066\003\000\002" +
    "\066\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\067\003\000\002\067\003\000\002\002\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\032\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\014\015\uff87\033\uff87\051\uff87\063\012\070\uff87\001" +
    "\002\000\012\015\ufffd\033\ufffd\051\ufffd\070\ufffd\001\002" +
    "\000\012\015\336\033\uff87\051\uff87\070\uff87\001\002\000" +
    "\016\003\014\010\015\015\uff87\033\uff87\051\uff87\070\uff87" +
    "\001\002\000\012\015\ufffe\033\ufffe\051\ufffe\070\ufffe\001" +
    "\002\000\014\015\035\033\044\051\042\070\uff87\107\037" +
    "\001\002\000\004\101\020\001\002\000\012\015\ufffb\033" +
    "\ufffb\051\ufffb\070\ufffb\001\002\000\012\015\ufffc\033\ufffc" +
    "\051\ufffc\070\ufffc\001\002\000\016\004\022\005\030\006" +
    "\026\007\021\020\024\055\023\001\002\000\060\003\uff8c" +
    "\021\uff8c\022\uff8c\035\uff8c\041\uff8c\061\uff8c\062\uff8c\072" +
    "\uff8c\077\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c\106\uff8c" +
    "\107\uff8c\113\uff8c\116\uff8c\117\uff8c\120\uff8c\122\uff8c\123" +
    "\uff8c\125\uff8c\126\uff8c\001\002\000\060\003\uff8e\021\uff8e" +
    "\022\uff8e\035\uff8e\041\uff8e\061\uff8e\062\uff8e\072\uff8e\077" +
    "\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e\106\uff8e\107\uff8e" +
    "\113\uff8e\116\uff8e\117\uff8e\120\uff8e\122\uff8e\123\uff8e\125" +
    "\uff8e\126\uff8e\001\002\000\060\003\uff88\021\uff88\022\uff88" +
    "\035\uff88\041\uff88\061\uff88\062\uff88\072\uff88\077\uff88\100" +
    "\uff88\101\uff88\102\uff88\103\uff88\106\uff88\107\uff88\113\uff88" +
    "\116\uff88\117\uff88\120\uff88\122\uff88\123\uff88\125\uff88\126" +
    "\uff88\001\002\000\060\003\uff89\021\uff89\022\uff89\035\uff89" +
    "\041\uff89\061\uff89\062\uff89\072\uff89\077\uff89\100\uff89\101" +
    "\uff89\102\uff89\103\uff89\106\uff89\107\uff89\113\uff89\116\uff89" +
    "\117\uff89\120\uff89\122\uff89\123\uff89\125\uff89\126\uff89\001" +
    "\002\000\004\107\031\001\002\000\060\003\uff8d\021\uff8d" +
    "\022\uff8d\035\uff8d\041\uff8d\061\uff8d\062\uff8d\072\uff8d\077" +
    "\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\106\uff8d\107\uff8d" +
    "\113\uff8d\116\uff8d\117\uff8d\120\uff8d\122\uff8d\123\uff8d\125" +
    "\uff8d\126\uff8d\001\002\000\060\003\uff8a\021\uff8a\022\uff8a" +
    "\035\uff8a\041\uff8a\061\uff8a\062\uff8a\072\uff8a\077\uff8a\100" +
    "\uff8a\101\uff8a\102\uff8a\103\uff8a\106\uff8a\107\uff8a\113\uff8a" +
    "\116\uff8a\117\uff8a\120\uff8a\122\uff8a\123\uff8a\125\uff8a\126" +
    "\uff8a\001\002\000\060\003\uff8b\021\uff8b\022\uff8b\035\uff8b" +
    "\041\uff8b\061\uff8b\062\uff8b\072\uff8b\077\uff8b\100\uff8b\101" +
    "\uff8b\102\uff8b\103\uff8b\106\uff8b\107\uff8b\113\uff8b\116\uff8b" +
    "\117\uff8b\120\uff8b\122\uff8b\123\uff8b\125\uff8b\126\uff8b\001" +
    "\002\000\016\003\014\010\015\015\uff87\033\uff87\051\uff87" +
    "\070\uff87\001\002\000\012\015\ufffa\033\ufffa\051\ufffa\070" +
    "\ufffa\001\002\000\012\015\ufff6\033\ufff6\051\ufff6\070\ufff6" +
    "\001\002\000\012\015\uffe9\033\uffe9\051\uffe9\070\uffe9\001" +
    "\002\000\016\003\306\010\310\015\uff87\033\uff87\051\uff87" +
    "\070\uff87\001\002\000\004\070\302\001\002\000\016\003" +
    "\014\010\015\015\uff87\033\uff87\051\uff87\070\uff87\001\002" +
    "\000\004\070\107\001\002\000\012\015\uffe8\033\uffe8\051" +
    "\uffe8\070\uffe8\001\002\000\004\010\075\001\002\000\012" +
    "\015\ufff9\033\ufff9\051\ufff9\070\ufff9\001\002\000\004\010" +
    "\045\001\002\000\004\127\046\001\002\000\024\003\057" +
    "\023\061\024\051\030\047\042\054\044\062\064\052\067" +
    "\060\126\uff87\001\002\000\014\003\uff8f\010\uff8f\070\uff8f" +
    "\101\uff8f\107\uff8f\001\002\000\006\003\065\010\066\001" +
    "\002\000\014\003\uff91\010\uff91\070\uff91\101\uff91\107\uff91" +
    "\001\002\000\014\003\uff93\010\uff93\070\uff93\101\uff93\107" +
    "\uff93\001\002\000\004\126\uffde\001\002\000\014\003\uff92" +
    "\010\uff92\070\uff92\101\uff92\107\uff92\001\002\000\004\126" +
    "\uffe1\001\002\000\004\126\064\001\002\000\004\126\063" +
    "\001\002\000\014\003\uff95\010\uff95\070\uff95\101\uff95\107" +
    "\uff95\001\002\000\014\003\uff90\010\uff90\070\uff90\101\uff90" +
    "\107\uff90\001\002\000\014\003\uff94\010\uff94\070\uff94\101" +
    "\uff94\107\uff94\001\002\000\004\070\uffe4\001\002\000\004" +
    "\070\uffe5\001\002\000\004\126\uffdf\001\002\000\006\120" +
    "\071\126\uff87\001\002\000\004\126\uffe0\001\002\000\004" +
    "\126\uffdc\001\002\000\020\023\061\024\051\030\047\042" +
    "\054\044\062\064\052\067\060\001\002\000\004\010\073" +
    "\001\002\000\006\120\071\126\uff87\001\002\000\004\126" +
    "\uffdd\001\002\000\004\127\076\001\002\000\024\003\100" +
    "\023\061\024\051\030\047\042\054\044\062\064\052\067" +
    "\060\126\uff87\001\002\000\004\126\104\001\002\000\004" +
    "\126\101\001\002\000\004\111\102\001\002\000\020\023" +
    "\061\024\051\030\047\042\054\044\062\064\052\067\060" +
    "\001\002\000\004\070\uffe2\001\002\000\004\111\105\001" +
    "\002\000\020\023\061\024\051\030\047\042\054\044\062" +
    "\064\052\067\060\001\002\000\004\070\uffe3\001\002\000" +
    "\042\003\130\004\022\005\030\006\026\007\021\010\133" +
    "\014\141\020\024\037\111\047\116\053\113\055\023\056" +
    "\uff87\116\112\122\120\127\126\001\002\000\044\003\uffba" +
    "\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\014\uffba\020" +
    "\uffba\037\uffba\047\uffba\053\uffba\055\uffba\056\uffba\057\uffba" +
    "\116\uffba\122\uffba\127\uffba\001\002\000\022\004\uff96\005" +
    "\uff96\006\uff96\007\uff96\010\uff96\020\uff96\055\uff96\127\uff96" +
    "\001\002\000\100\003\uffab\004\uffab\005\uffab\006\uffab\007" +
    "\uffab\010\uffab\020\uffab\021\uffab\022\uffab\035\uffab\041\uffab" +
    "\055\uffab\061\uffab\062\uffab\072\uffab\077\uffab\100\uffab\101" +
    "\uffab\102\uffab\103\uffab\106\uffab\107\uffab\113\uffab\116\uffab" +
    "\117\uffab\120\uffab\122\uffab\123\uffab\125\uffab\126\uffab\127" +
    "\uffab\001\002\000\006\003\266\010\267\001\002\000\004" +
    "\107\265\001\002\000\026\004\uffaa\005\uffaa\006\uffaa\007" +
    "\uffaa\010\uffaa\020\uffaa\055\uffaa\056\uffda\057\uffda\127\uffaa" +
    "\001\002\000\032\003\251\004\022\005\030\006\026\007" +
    "\021\010\133\020\024\037\111\055\023\116\112\122\120" +
    "\127\126\001\002\000\044\003\130\004\022\005\030\006" +
    "\026\007\021\010\133\014\141\020\024\037\111\047\116" +
    "\053\113\055\023\056\uff87\057\uff87\116\112\122\120\127" +
    "\126\001\002\000\100\003\uffac\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\020\uffac\021\uffac\022\uffac\035\uffac\041" +
    "\uffac\055\uffac\061\uffac\062\uffac\072\uffac\077\uffac\100\uffac" +
    "\101\uffac\102\uffac\103\uffac\106\uffac\107\uffac\113\uffac\116" +
    "\uffac\117\uffac\120\uffac\122\uffac\123\uffac\125\uffac\126\uffac" +
    "\127\uffac\001\002\000\022\004\022\005\030\006\026\007" +
    "\021\010\133\020\024\055\023\127\126\001\002\000\060" +
    "\003\uff87\021\uff87\022\uff87\035\uff87\041\uff87\061\uff87\062" +
    "\uff87\072\uff87\077\uff87\100\uff87\101\uff87\102\uff87\103\uff87" +
    "\106\uff87\107\uff87\113\uff87\116\112\117\uff87\120\uff87\122" +
    "\120\123\uff87\125\uff87\126\uff87\001\002\000\060\003\uffce" +
    "\021\uffce\022\uffce\035\uffce\041\uffce\061\uffce\062\uffce\072" +
    "\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\106\uffce" +
    "\107\uffce\113\uffce\116\uffce\117\uffce\120\uffce\122\uffce\123" +
    "\uffce\125\uffce\126\uffce\001\002\000\060\003\uff87\021\uff87" +
    "\022\uff87\035\uff87\041\236\061\uff87\062\242\072\uff87\077" +
    "\uff87\100\uff87\101\uff87\102\uff87\103\uff87\106\uff87\107\uff87" +
    "\113\241\116\uff87\117\240\120\uff87\122\uff87\123\235\125" +
    "\232\126\uff87\001\002\000\060\003\uff87\021\uff87\022\uff87" +
    "\035\uff87\041\uff87\061\uff87\062\uff87\072\uff87\077\226\100" +
    "\222\101\220\102\223\103\227\106\225\107\uff87\113\uff87" +
    "\116\uff87\117\uff87\120\uff87\122\uff87\123\uff87\125\uff87\126" +
    "\uff87\001\002\000\030\004\022\005\030\006\026\007\021" +
    "\010\133\020\024\037\111\055\023\116\112\122\120\127" +
    "\126\001\002\000\060\003\uff87\021\uff87\022\uff87\035\210" +
    "\041\uff87\061\uff87\062\uff87\072\205\077\uff87\100\uff87\101" +
    "\uff87\102\uff87\103\uff87\106\uff87\107\uff87\113\uff87\116\uff87" +
    "\117\uff87\120\uff87\122\uff87\123\uff87\125\uff87\126\uff87\001" +
    "\002\000\006\056\204\107\203\001\002\000\022\004\022" +
    "\005\030\006\026\007\021\010\133\020\024\055\023\127" +
    "\126\001\002\000\044\003\uffbd\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\014\uffbd\020\uffbd\037\uffbd\047\uffbd\053" +
    "\uffbd\055\uffbd\056\uffbd\057\uffbd\116\uffbd\122\uffbd\127\uffbd" +
    "\001\002\000\074\003\uff87\021\uff87\022\uff87\035\uff87\041" +
    "\uff87\061\uff87\062\uff87\072\uff87\077\uff87\100\uff87\101\uff87" +
    "\102\uff87\103\uff87\106\uff87\107\uff87\110\161\112\162\113" +
    "\uff87\115\156\116\uff87\117\uff87\120\uff87\121\165\122\uff87" +
    "\123\uff87\124\163\125\uff87\126\uff87\127\164\001\002\000" +
    "\060\003\uffc9\021\uffc9\022\uffc9\035\uffc9\041\uffc9\061\uffc9" +
    "\062\uffc9\072\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103" +
    "\uffc9\106\uffc9\107\uffc9\113\uffc9\116\uffc9\117\uffc9\120\uffc9" +
    "\122\uffc9\123\uffc9\125\uffc9\126\uffc9\001\002\000\004\056" +
    "\152\001\002\000\044\003\uffbb\004\uffbb\005\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\014\uffbb\020\uffbb\037\uffbb\047\uffbb\053" +
    "\uffbb\055\uffbb\056\uffbb\057\uffbb\116\uffbb\122\uffbb\127\uffbb" +
    "\001\002\000\044\003\uffbc\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\014\uffbc\020\uffbc\037\uffbc\047\uffbc\053\uffbc" +
    "\055\uffbc\056\uffbc\057\uffbc\116\uffbc\122\uffbc\127\uffbc\001" +
    "\002\000\044\003\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe" +
    "\010\uffbe\014\uffbe\020\uffbe\037\uffbe\047\uffbe\053\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\116\uffbe\122\uffbe\127\uffbe\001\002" +
    "\000\032\003\144\004\022\005\030\006\026\007\021\010" +
    "\133\020\024\037\111\055\023\116\112\122\120\127\126" +
    "\001\002\000\004\061\146\001\002\000\100\003\uffaa\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\020\uffaa\021\uffaa" +
    "\022\uffaa\035\uffaa\041\uffaa\055\uffaa\061\uffaa\062\uffaa\072" +
    "\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\106\uffaa" +
    "\107\uffaa\113\uffaa\116\uffaa\117\uffaa\120\uffaa\122\uffaa\123" +
    "\uffaa\125\uffaa\126\uffaa\127\uffaa\001\002\000\004\056\145" +
    "\001\002\000\044\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007" +
    "\uffaf\010\uffaf\014\uffaf\020\uffaf\037\uffaf\047\uffaf\053\uffaf" +
    "\055\uffaf\056\uffaf\057\uffaf\116\uffaf\122\uffaf\127\uffaf\001" +
    "\002\000\004\070\147\001\002\000\042\003\130\004\022" +
    "\005\030\006\026\007\021\010\133\014\141\020\024\037" +
    "\111\047\116\053\113\055\023\056\uff87\116\112\122\120" +
    "\127\126\001\002\000\004\056\151\001\002\000\044\003" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\014\uffb0" +
    "\020\uffb0\037\uffb0\047\uffb0\053\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\116\uffb0\122\uffb0\127\uffb0\001\002\000\012\015\uff87" +
    "\033\044\051\042\070\uff87\001\002\000\012\015\uffe7\033" +
    "\uffe7\051\uffe7\070\uffe7\001\002\000\060\003\uffcc\021\uffcc" +
    "\022\uffcc\035\uffcc\041\uffcc\061\uffcc\062\uffcc\072\uffcc\077" +
    "\uffcc\100\uffcc\101\uffcc\102\uffcc\103\uffcc\106\uffcc\107\uffcc" +
    "\113\uffcc\116\uffcc\117\uffcc\120\uffcc\122\uffcc\123\uffcc\125" +
    "\uffcc\126\uffcc\001\002\000\030\004\022\005\030\006\026" +
    "\007\021\010\133\020\024\037\111\055\023\116\112\122" +
    "\120\127\126\001\002\000\030\004\uffa1\005\uffa1\006\uffa1" +
    "\007\uffa1\010\uffa1\020\uffa1\037\uffa1\055\uffa1\116\uffa1\122" +
    "\uffa1\127\uffa1\001\002\000\060\003\uffc8\021\uffc8\022\uffc8" +
    "\035\uffc8\041\uffc8\061\uffc8\062\uffc8\072\uffc8\077\uffc8\100" +
    "\uffc8\101\uffc8\102\uffc8\103\uffc8\106\uffc8\107\uffc8\113\uffc8" +
    "\116\uffc8\117\uffc8\120\uffc8\122\uffc8\123\uffc8\125\uffc8\126" +
    "\uffc8\001\002\000\060\003\uffc4\021\uffc4\022\uffc4\035\uffc4" +
    "\041\uffc4\061\uffc4\062\uffc4\072\uffc4\077\uffc4\100\uffc4\101" +
    "\uffc4\102\uffc4\103\uffc4\106\uffc4\107\uffc4\113\uffc4\116\uffc4" +
    "\117\uffc4\120\uffc4\122\uffc4\123\uffc4\125\uffc4\126\uffc4\001" +
    "\002\000\030\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\020\uffa3\037\uffa3\055\uffa3\116\uffa3\122\uffa3\127\uffa3\001" +
    "\002\000\030\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f" +
    "\020\uff9f\037\uff9f\055\uff9f\116\uff9f\122\uff9f\127\uff9f\001" +
    "\002\000\030\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\020\uffa0\037\uffa0\055\uffa0\116\uffa0\122\uffa0\127\uffa0\001" +
    "\002\000\034\003\uff87\004\022\005\030\006\026\007\021" +
    "\010\133\020\024\037\111\055\023\116\112\122\120\126" +
    "\uff87\127\126\001\002\000\030\004\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\010\uffa2\020\uffa2\037\uffa2\055\uffa2\116\uffa2\122" +
    "\uffa2\127\uffa2\001\002\000\010\003\uff87\120\175\126\uff87" +
    "\001\002\000\006\003\171\126\172\001\002\000\026\003" +
    "\uffc2\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\020\uffaa" +
    "\055\uffaa\126\uffc2\127\uffaa\001\002\000\060\003\uffc6\021" +
    "\uffc6\022\uffc6\035\uffc6\041\uffc6\061\uffc6\062\uffc6\072\uffc6" +
    "\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\106\uffc6\107" +
    "\uffc6\113\uffc6\116\uffc6\117\uffc6\120\uffc6\122\uffc6\123\uffc6" +
    "\125\uffc6\126\uffc6\001\002\000\060\003\uffc7\021\uffc7\022" +
    "\uffc7\035\uffc7\041\uffc7\061\uffc7\062\uffc7\072\uffc7\077\uffc7" +
    "\100\uffc7\101\uffc7\102\uffc7\103\uffc7\106\uffc7\107\uffc7\113" +
    "\uffc7\116\uffc7\117\uffc7\120\uffc7\122\uffc7\123\uffc7\125\uffc7" +
    "\126\uffc7\001\002\000\006\003\uffc3\126\uffc3\001\002\000" +
    "\006\003\uffbf\126\uffbf\001\002\000\032\003\177\004\022" +
    "\005\030\006\026\007\021\010\133\020\024\037\111\055" +
    "\023\116\112\122\120\127\126\001\002\000\010\003\uff87" +
    "\120\175\126\uff87\001\002\000\006\003\uffc0\126\uffc0\001" +
    "\002\000\006\003\uffc1\126\uffc1\001\002\000\060\003\uffc5" +
    "\021\uffc5\022\uffc5\035\uffc5\041\uffc5\061\uffc5\062\uffc5\072" +
    "\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\106\uffc5" +
    "\107\uffc5\113\uffc5\116\uffc5\117\uffc5\120\uffc5\122\uffc5\123" +
    "\uffc5\125\uffc5\126\uffc5\001\002\000\060\003\uffd0\021\uffd0" +
    "\022\uffd0\035\uffd0\041\uffd0\061\uffd0\062\uffd0\072\uffd0\077" +
    "\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\106\uffd0\107\uffd0" +
    "\113\uffd0\116\uffd0\117\uffd0\120\uffd0\122\uffd0\123\uffd0\125" +
    "\uffd0\126\uffd0\001\002\000\044\003\uffb7\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\014\uffb7\020\uffb7\037\uffb7\047" +
    "\uffb7\053\uffb7\055\uffb7\056\uffb7\057\uffb7\116\uffb7\122\uffb7" +
    "\127\uffb7\001\002\000\044\003\uffb9\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\014\uffb9\020\uffb9\037\uffb9\047\uffb9" +
    "\053\uffb9\055\uffb9\056\uffb9\057\uffb9\116\uffb9\122\uffb9\127" +
    "\uffb9\001\002\000\030\004\uff97\005\uff97\006\uff97\007\uff97" +
    "\010\uff97\020\uff97\037\uff97\055\uff97\116\uff97\122\uff97\127" +
    "\uff97\001\002\000\060\003\uffd9\021\uffd9\022\uffd9\035\uffd9" +
    "\041\uffd9\061\uffd9\062\uffd9\072\uffd9\077\uffd9\100\uffd9\101" +
    "\uffd9\102\uffd9\103\uffd9\106\uffd9\107\uffd9\113\uffd9\116\uffd9" +
    "\117\uffd9\120\uffd9\122\uffd9\123\uffd9\125\uffd9\126\uffd9\001" +
    "\002\000\060\003\uffd7\021\uffd7\022\uffd7\035\uffd7\041\uffd7" +
    "\061\uffd7\062\uffd7\072\uffd7\077\uffd7\100\uffd7\101\uffd7\102" +
    "\uffd7\103\uffd7\106\uffd7\107\uffd7\113\uffd7\116\uffd7\117\uffd7" +
    "\120\uffd7\122\uffd7\123\uffd7\125\uffd7\126\uffd7\001\002\000" +
    "\030\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98\020\uff98" +
    "\037\uff98\055\uff98\116\uff98\122\uff98\127\uff98\001\002\000" +
    "\030\004\022\005\030\006\026\007\021\010\133\020\024" +
    "\037\111\055\023\116\112\122\120\127\126\001\002\000" +
    "\060\003\uff87\021\uff87\022\uff87\035\210\041\uff87\061\uff87" +
    "\062\uff87\072\205\077\uff87\100\uff87\101\uff87\102\uff87\103" +
    "\uff87\106\uff87\107\uff87\113\uff87\116\uff87\117\uff87\120\uff87" +
    "\122\uff87\123\uff87\125\uff87\126\uff87\001\002\000\060\003" +
    "\uffd8\021\uffd8\022\uffd8\035\uffd8\041\uffd8\061\uffd8\062\uffd8" +
    "\072\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\103\uffd8\106" +
    "\uffd8\107\uffd8\113\uffd8\116\uffd8\117\uffd8\120\uffd8\122\uffd8" +
    "\123\uffd8\125\uffd8\126\uffd8\001\002\000\006\003\215\126" +
    "\216\001\002\000\060\003\uffca\021\uffca\022\uffca\035\uffca" +
    "\041\uffca\061\uffca\062\uffca\072\uffca\077\uffca\100\uffca\101" +
    "\uffca\102\uffca\103\uffca\106\uffca\107\uffca\113\uffca\116\uffca" +
    "\117\uffca\120\uffca\122\uffca\123\uffca\125\uffca\126\uffca\001" +
    "\002\000\060\003\uffcb\021\uffcb\022\uffcb\035\uffcb\041\uffcb" +
    "\061\uffcb\062\uffcb\072\uffcb\077\uffcb\100\uffcb\101\uffcb\102" +
    "\uffcb\103\uffcb\106\uffcb\107\uffcb\113\uffcb\116\uffcb\117\uffcb" +
    "\120\uffcb\122\uffcb\123\uffcb\125\uffcb\126\uffcb\001\002\000" +
    "\060\003\uffd6\021\uffd6\022\uffd6\035\uffd6\041\uffd6\061\uffd6" +
    "\062\uffd6\072\uffd6\077\uffd6\100\uffd6\101\uffd6\102\uffd6\103" +
    "\uffd6\106\uffd6\107\uffd6\113\uffd6\116\uffd6\117\uffd6\120\uffd6" +
    "\122\uffd6\123\uffd6\125\uffd6\126\uffd6\001\002\000\030\004" +
    "\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\020\uff9e\037\uff9e" +
    "\055\uff9e\116\uff9e\122\uff9e\127\uff9e\001\002\000\060\003" +
    "\uffd4\021\uffd4\022\uffd4\035\uffd4\041\uffd4\061\uffd4\062\uffd4" +
    "\072\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\106" +
    "\uffd4\107\uffd4\113\uffd4\116\uffd4\117\uffd4\120\uffd4\122\uffd4" +
    "\123\uffd4\125\uffd4\126\uffd4\001\002\000\030\004\uff9c\005" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\020\uff9c\037\uff9c\055\uff9c" +
    "\116\uff9c\122\uff9c\127\uff9c\001\002\000\030\004\uff99\005" +
    "\uff99\006\uff99\007\uff99\010\uff99\020\uff99\037\uff99\055\uff99" +
    "\116\uff99\122\uff99\127\uff99\001\002\000\030\004\022\005" +
    "\030\006\026\007\021\010\133\020\024\037\111\055\023" +
    "\116\112\122\120\127\126\001\002\000\030\004\uff9a\005" +
    "\uff9a\006\uff9a\007\uff9a\010\uff9a\020\uff9a\037\uff9a\055\uff9a" +
    "\116\uff9a\122\uff9a\127\uff9a\001\002\000\030\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\020\uff9d\037\uff9d\055\uff9d" +
    "\116\uff9d\122\uff9d\127\uff9d\001\002\000\030\004\uff9b\005" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\020\uff9b\037\uff9b\055\uff9b" +
    "\116\uff9b\122\uff9b\127\uff9b\001\002\000\060\003\uff87\021" +
    "\uff87\022\uff87\035\uff87\041\uff87\061\uff87\062\uff87\072\uff87" +
    "\077\226\100\222\101\220\102\223\103\227\106\225\107" +
    "\uff87\113\uff87\116\uff87\117\uff87\120\uff87\122\uff87\123\uff87" +
    "\125\uff87\126\uff87\001\002\000\060\003\uffd5\021\uffd5\022" +
    "\uffd5\035\uffd5\041\uffd5\061\uffd5\062\uffd5\072\uffd5\077\uffd5" +
    "\100\uffd5\101\uffd5\102\uffd5\103\uffd5\106\uffd5\107\uffd5\113" +
    "\uffd5\116\uffd5\117\uffd5\120\uffd5\122\uffd5\123\uffd5\125\uffd5" +
    "\126\uffd5\001\002\000\030\004\uffa7\005\uffa7\006\uffa7\007" +
    "\uffa7\010\uffa7\020\uffa7\037\uffa7\055\uffa7\116\uffa7\122\uffa7" +
    "\127\uffa7\001\002\000\060\003\uffd1\021\uffd1\022\uffd1\035" +
    "\uffd1\041\uffd1\061\uffd1\062\uffd1\072\uffd1\077\uffd1\100\uffd1" +
    "\101\uffd1\102\uffd1\103\uffd1\106\uffd1\107\uffd1\113\uffd1\116" +
    "\uffd1\117\uffd1\120\uffd1\122\uffd1\123\uffd1\125\uffd1\126\uffd1" +
    "\001\002\000\060\003\uffd3\021\uffd3\022\uffd3\035\uffd3\041" +
    "\uffd3\061\uffd3\062\uffd3\072\uffd3\077\uffd3\100\uffd3\101\uffd3" +
    "\102\uffd3\103\uffd3\106\uffd3\107\uffd3\113\uffd3\116\uffd3\117" +
    "\uffd3\120\uffd3\122\uffd3\123\uffd3\125\uffd3\126\uffd3\001\002" +
    "\000\030\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\020" +
    "\uffa9\037\uffa9\055\uffa9\116\uffa9\122\uffa9\127\uffa9\001\002" +
    "\000\030\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\020" +
    "\uffa5\037\uffa5\055\uffa5\116\uffa5\122\uffa5\127\uffa5\001\002" +
    "\000\030\004\022\005\030\006\026\007\021\010\133\020" +
    "\024\037\111\055\023\116\112\122\120\127\126\001\002" +
    "\000\030\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\020" +
    "\uffa8\037\uffa8\055\uffa8\116\uffa8\122\uffa8\127\uffa8\001\002" +
    "\000\030\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\020" +
    "\uffa6\037\uffa6\055\uffa6\116\uffa6\122\uffa6\127\uffa6\001\002" +
    "\000\030\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\020" +
    "\uffa4\037\uffa4\055\uffa4\116\uffa4\122\uffa4\127\uffa4\001\002" +
    "\000\060\003\uff87\021\uff87\022\uff87\035\uff87\041\236\061" +
    "\uff87\062\242\072\uff87\077\uff87\100\uff87\101\uff87\102\uff87" +
    "\103\uff87\106\uff87\107\uff87\113\241\116\uff87\117\240\120" +
    "\uff87\122\uff87\123\235\125\232\126\uff87\001\002\000\060" +
    "\003\uffd2\021\uffd2\022\uffd2\035\uffd2\041\uffd2\061\uffd2\062" +
    "\uffd2\072\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2" +
    "\106\uffd2\107\uffd2\113\uffd2\116\uffd2\117\uffd2\120\uffd2\122" +
    "\uffd2\123\uffd2\125\uffd2\126\uffd2\001\002\000\060\003\uffcd" +
    "\021\uffcd\022\uffcd\035\uffcd\041\uffcd\061\uffcd\062\uffcd\072" +
    "\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\106\uffcd" +
    "\107\uffcd\113\uffcd\116\uffcd\117\uffcd\120\uffcd\122\uffcd\123" +
    "\uffcd\125\uffcd\126\uffcd\001\002\000\060\003\uffcf\021\uffcf" +
    "\022\uffcf\035\uffcf\041\uffcf\061\uffcf\062\uffcf\072\uffcf\077" +
    "\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf\106\uffcf\107\uffcf" +
    "\113\uffcf\116\uffcf\117\uffcf\120\uffcf\122\uffcf\123\uffcf\125" +
    "\uffcf\126\uffcf\001\002\000\006\056\uffdb\057\uffdb\001\002" +
    "\000\006\003\254\022\255\001\002\000\006\022\252\056" +
    "\253\001\002\000\044\003\uffb5\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\014\uffb5\020\uffb5\037\uffb5\047\uffb5\053" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\116\uffb5\122\uffb5\127\uffb5" +
    "\001\002\000\044\003\uffb3\004\uffb3\005\uffb3\006\uffb3\007" +
    "\uffb3\010\uffb3\014\uffb3\020\uffb3\037\uffb3\047\uffb3\053\uffb3" +
    "\055\uffb3\056\uffb3\057\uffb3\116\uffb3\122\uffb3\127\uffb3\001" +
    "\002\000\004\056\264\001\002\000\044\003\130\004\022" +
    "\005\030\006\026\007\021\010\133\014\141\020\024\037" +
    "\111\047\116\053\113\055\023\056\uff87\057\uff87\116\112" +
    "\122\120\127\126\001\002\000\006\056\uff87\057\257\001" +
    "\002\000\042\003\130\004\022\005\030\006\026\007\021" +
    "\010\133\014\141\020\024\037\111\047\116\053\113\055" +
    "\023\056\uff87\116\112\122\120\127\126\001\002\000\004" +
    "\056\262\001\002\000\004\056\uffb1\001\002\000\044\003" +
    "\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\014\uffb6" +
    "\020\uffb6\037\uffb6\047\uffb6\053\uffb6\055\uffb6\056\uffb6\057" +
    "\uffb6\116\uffb6\122\uffb6\127\uffb6\001\002\000\004\056\uffb2" +
    "\001\002\000\044\003\uffb4\004\uffb4\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\014\uffb4\020\uffb4\037\uffb4\047\uffb4\053\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\116\uffb4\122\uffb4\127\uffb4\001" +
    "\002\000\044\003\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\014\uffb8\020\uffb8\037\uffb8\047\uffb8\053\uffb8\055" +
    "\uffb8\056\uffb8\057\uffb8\116\uffb8\122\uffb8\127\uffb8\001\002" +
    "\000\004\056\300\001\002\000\004\110\270\001\002\000" +
    "\030\004\022\005\030\006\026\007\021\010\133\020\024" +
    "\037\111\055\023\116\112\122\120\127\126\001\002\000" +
    "\004\021\272\001\002\000\030\004\022\005\030\006\026" +
    "\007\021\010\133\020\024\037\111\055\023\116\112\122" +
    "\120\127\126\001\002\000\004\061\274\001\002\000\004" +
    "\070\275\001\002\000\042\003\130\004\022\005\030\006" +
    "\026\007\021\010\133\014\141\020\024\037\111\047\116" +
    "\053\113\055\023\056\uff87\116\112\122\120\127\126\001" +
    "\002\000\004\056\277\001\002\000\044\003\uffae\004\uffae" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\014\uffae\020\uffae\037" +
    "\uffae\047\uffae\053\uffae\055\uffae\056\uffae\057\uffae\116\uffae" +
    "\122\uffae\127\uffae\001\002\000\044\003\uffad\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\010\uffad\014\uffad\020\uffad\037\uffad" +
    "\047\uffad\053\uffad\055\uffad\056\uffad\057\uffad\116\uffad\122" +
    "\uffad\127\uffad\001\002\000\012\015\ufff8\033\ufff8\051\ufff8" +
    "\070\ufff8\001\002\000\042\003\130\004\022\005\030\006" +
    "\026\007\021\010\133\014\141\020\024\037\111\047\116" +
    "\053\113\055\023\056\uff87\116\112\122\120\127\126\001" +
    "\002\000\004\056\304\001\002\000\012\015\uff87\033\044" +
    "\051\042\070\uff87\001\002\000\012\015\uffe6\033\uffe6\051" +
    "\uffe6\070\uffe6\001\002\000\014\015\uff87\033\044\051\042" +
    "\070\uff87\107\331\001\002\000\012\015\ufff3\033\ufff3\051" +
    "\ufff3\070\ufff3\001\002\000\006\111\uff87\120\315\001\002" +
    "\000\012\015\ufff2\033\ufff2\051\ufff2\070\ufff2\001\002\000" +
    "\012\015\ufff7\033\ufff7\051\ufff7\070\ufff7\001\002\000\004" +
    "\111\320\001\002\000\004\111\uffec\001\002\000\004\010" +
    "\316\001\002\000\006\111\uff87\120\315\001\002\000\004" +
    "\111\uffed\001\002\000\020\023\061\024\051\030\047\042" +
    "\054\044\062\064\052\067\060\001\002\000\006\101\322" +
    "\107\uff87\001\002\000\016\004\022\005\030\006\026\007" +
    "\021\020\024\055\023\001\002\000\004\107\uffea\001\002" +
    "\000\004\107\325\001\002\000\016\003\306\010\310\015" +
    "\uff87\033\uff87\051\uff87\070\uff87\001\002\000\012\015\ufff1" +
    "\033\ufff1\051\ufff1\070\ufff1\001\002\000\004\107\uffeb\001" +
    "\002\000\012\015\uffee\033\uffee\051\uffee\070\uffee\001\002" +
    "\000\016\003\306\010\310\015\uff87\033\uff87\051\uff87\070" +
    "\uff87\001\002\000\012\015\ufff0\033\ufff0\051\ufff0\070\ufff0" +
    "\001\002\000\012\015\uffef\033\uffef\051\uffef\070\uffef\001" +
    "\002\000\010\033\044\051\042\070\uff87\001\002\000\010" +
    "\033\ufff4\051\ufff4\070\ufff4\001\002\000\014\003\306\010" +
    "\310\033\uff87\051\uff87\070\uff87\001\002\000\010\033\ufff5" +
    "\051\ufff5\070\ufff5\001\002\000\004\070\341\001\002\000" +
    "\042\003\130\004\022\005\030\006\026\007\021\010\133" +
    "\014\141\020\024\037\111\047\116\053\113\055\023\056" +
    "\uff87\116\112\122\120\127\126\001\002\000\004\002\000" +
    "\001\002\000\004\056\344\001\002\000\004\002\uffff\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\007\007\010" +
    "\001\001\000\002\001\001\000\006\002\334\014\333\001" +
    "\001\000\010\002\015\010\012\011\016\001\001\000\002" +
    "\001\001\000\016\002\040\012\042\023\032\024\033\025" +
    "\037\026\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\066\024\067\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\015\010\031\011\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\310\015\311\016\306\001\001\000\002" +
    "\001\001\000\010\002\015\010\300\011\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\052\027\055\030\054\065\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\067\031\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\071\001\001" +
    "\000\002\001\001\000\006\002\067\031\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\002\052\027\076" +
    "\030\054\065\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\102\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\065\105\001\001\000" +
    "\002\001\001\000\046\002\114\032\134\033\137\034\131" +
    "\035\113\037\126\041\124\043\123\044\122\045\121\052" +
    "\116\053\136\055\135\056\107\057\130\064\120\066\133" +
    "\067\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\002\142\035\247\037\126\041\124\043" +
    "\123\044\122\045\121\057\130\064\120\066\133\067\026" +
    "\001\001\000\046\002\114\032\246\033\137\034\131\035" +
    "\113\037\126\041\124\043\123\044\122\045\121\052\116" +
    "\053\136\055\135\056\107\057\130\064\120\066\133\067" +
    "\026\001\001\000\002\001\001\000\012\044\245\045\121" +
    "\066\133\067\026\001\001\000\006\002\142\057\244\001" +
    "\001\000\002\001\001\000\010\002\232\042\233\060\236" +
    "\001\001\000\010\002\220\040\216\062\223\001\001\000" +
    "\030\002\142\035\213\037\126\041\124\043\123\044\122" +
    "\045\121\057\130\064\120\066\133\067\026\001\001\000" +
    "\010\002\206\036\205\063\210\001\001\000\002\001\001" +
    "\000\012\044\201\045\121\066\133\067\026\001\001\000" +
    "\002\001\001\000\012\002\157\046\153\051\156\061\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\142" +
    "\035\141\037\126\041\124\043\123\044\122\045\121\057" +
    "\130\064\120\066\133\067\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\002\114\032\147\033\137\034\131" +
    "\035\113\037\126\041\124\043\123\044\122\045\121\052" +
    "\116\053\136\055\135\056\107\057\130\064\120\066\133" +
    "\067\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\040\023\152\024\033\025\037\026\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\142\035" +
    "\200\037\126\041\124\043\123\044\122\045\121\057\130" +
    "\064\120\066\133\067\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\002\167\035\165\037" +
    "\126\041\124\043\123\044\122\045\121\047\166\057\130" +
    "\064\120\066\133\067\026\001\001\000\002\001\001\000" +
    "\006\002\173\050\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\142\035\175\037\126" +
    "\041\124\043\123\044\122\045\121\057\130\064\120\066" +
    "\133\067\026\001\001\000\006\002\173\050\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\142\037\211\041\124\043\123\044\122" +
    "\045\121\057\130\064\120\066\133\067\026\001\001\000" +
    "\010\002\206\036\212\063\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\142\041\227\043" +
    "\123\044\122\045\121\057\130\064\120\066\133\067\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\220\040\230\062\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\002\142" +
    "\043\242\044\122\045\121\057\130\064\120\066\133\067" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\232\042\243\060\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\002\114" +
    "\032\255\033\137\034\131\035\113\037\126\041\124\043" +
    "\123\044\122\045\121\052\116\053\136\055\135\056\107" +
    "\057\130\064\120\066\133\067\026\001\001\000\006\002" +
    "\260\054\257\001\001\000\046\002\114\032\262\033\137" +
    "\034\131\035\113\037\126\041\124\043\123\044\122\045" +
    "\121\052\116\053\136\055\135\056\107\057\130\064\120" +
    "\066\133\067\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\142\035\270\037\126\041\124\043\123\044\122" +
    "\045\121\057\130\064\120\066\133\067\026\001\001\000" +
    "\002\001\001\000\030\002\142\035\272\037\126\041\124" +
    "\043\123\044\122\045\121\057\130\064\120\066\133\067" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\046" +
    "\002\114\032\275\033\137\034\131\035\113\037\126\041" +
    "\124\043\123\044\122\045\121\052\116\053\136\055\135" +
    "\056\107\057\130\064\120\066\133\067\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\002\114\032\302\033\137\034\131\035" +
    "\113\037\126\041\124\043\123\044\122\045\121\052\116" +
    "\053\136\055\135\056\107\057\130\064\120\066\133\067" +
    "\026\001\001\000\002\001\001\000\014\002\040\023\304" +
    "\024\033\025\037\026\035\001\001\000\002\001\001\000" +
    "\016\002\040\020\331\023\327\024\033\025\037\026\035" +
    "\001\001\000\002\001\001\000\006\002\313\021\312\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\313\021" +
    "\316\001\001\000\002\001\001\000\004\065\320\001\001" +
    "\000\006\002\322\022\323\001\001\000\006\066\326\067" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\310\015\325\016\306\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\310\015\332" +
    "\016\306\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\002\040\023\337\024\033\025\037\026\035\001\001" +
    "\000\002\001\001\000\010\002\310\015\336\016\306\001" +
    "\001\000\002\001\001\000\004\006\341\001\001\000\046" +
    "\002\114\032\342\033\137\034\131\035\113\037\126\041" +
    "\124\043\123\044\122\045\121\052\116\053\136\055\135" +
    "\056\107\057\130\064\120\066\133\067\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);


        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), (linea+1)));
        System.out.println(ScannerABC.errores.size());
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);

        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), linea+1));
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {



  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PR_PROGRAM IDENTIFICADOR SeccionConstantes SeccionVariables Rutinas EntradaPrograma 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EntradaPrograma ::= PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EntradaPrograma",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SeccionConstantes ::= PR_CONST Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SeccionConstantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Constantes ::= Constante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Constantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Constante ::= IDENTIFICADOR O_EQUALS literal O_SEMICOLON Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Constante ::= error ErrorConstante 
            {
              Object RESULT =null;
		System.out.println("Error");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ErrorConstante ::= O_SEMICOLON Constantes 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ErrorConstante ::= PR_VAR Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ErrorConstante ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SeccionVariables ::= PR_VAR Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SeccionVariables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Variables ::= Variable 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Variables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Variable ::= IDENTIFICADOR Identificadores O_COLON Tipo Inicializar O_SEMICOLON Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Variable ::= error ErroresVariables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con ErroresVariables Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ErroresVariables ::= O_SEMICOLON Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con O_SEMICOLON Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ErroresVariables ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Identificadores ::= O_COMMA IDENTIFICADOR Identificadores 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Identificadores ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Inicializar ::= O_EQUALS literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Inicializar ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Rutinas ::= Rutina 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Rutinas ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Rutina ::= EncabezadoProcedimiento PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Rutina ::= EncabezadoFuncion PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Parametro ::= Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Parametro ::= Tipo error 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros recuperado en Parametro"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Parametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // masParametros ::= O_COMMA Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // masParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instrucciones ::= Instruccion Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Instrucciones ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion ::= Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpresionOperadoresLogicos ::= OperadoresLogicosBinarios Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExpresionOperadoresLogicos ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion2 ::= Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpresionOperadoresComparacion ::= OperadoresComparacion Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ExpresionOperadoresComparacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion3 ::= Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpresionOperadoresEnteros ::= OperadoresEnteros Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpresionOperadoresEnteros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion4 ::= IncrementoDecremento Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion4 ::= OperadoresLogicosUnarios Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion4 ::= Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion5 ::= Expresion6 IncrementoDecremento 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion5",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion6 ::= IDENTIFICADOR Expresion7 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion6 ::= literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion7 ::= ExpresionAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ExpresionAsignacion ::= OperadorAsignacion Expresion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpresionAsignacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LParametro ::= Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LParametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ListaParametros ::= O_COMMA Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ListaParametros ::= O_COMMA error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix: Expresion esperada despues de la coma.");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ListaParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Instruccion ::= InstruccionBE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Instruccion ::= InstruccionSC 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // InstruccionBE ::= IfThenElse 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // InstruccionBE ::= While 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // InstruccionBE ::= For 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // InstruccionBE ::= error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccionbe Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // InstruccionSC ::= Expresion O_SEMICOLON 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // InstruccionSC ::= error O_SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion sc Recuperado con O_SEMICOLON");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IfThenElse ::= PR_IF Expresion PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IfThenElse ::= PR_IF error PR_THEN 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END, Espera un PR_THEN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IfThenElse ::= PR_IF Expresion error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END, Espera un PR_THEN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IfThenElse ::= PR_IF error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Else ::= PR_ELSE Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Else ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // While ::= PR_WHILE Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // While ::= PR_WHILE error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion WHILE Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // For ::= PR_FOR IDENTIFICADOR O_COLON_EQUALS Expresion PR_TO Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // For ::= PR_FOR error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion FOR Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IncrementoDecremento ::= O_PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IncrementoDecremento ::= O_MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IncrementoDecremento ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OperadoresEnteros ::= O_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OperadoresEnteros ::= O_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OperadoresEnteros ::= O_ASTERISK 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OperadoresEnteros ::= O_SLASH 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OperadoresEnteros ::= O_MOD 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OperadoresEnteros ::= O_DIV 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OperadorAsignacion ::= O_COLON_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OperadorAsignacion ::= O_PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OperadorAsignacion ::= O_MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OperadorAsignacion ::= O_ASTERISK_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OperadorAsignacion ::= O_SLASH_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OperadoresComparacion ::= O_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OperadoresComparacion ::= O_GREATER_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OperadoresComparacion ::= O_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OperadoresComparacion ::= O_LESS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OperadoresComparacion ::= O_LESS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OperadoresComparacion ::= O_LESS_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OperadoresLogicosBinarios ::= O_OR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OperadoresLogicosBinarios ::= O_AND 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OperadoresLogicosUnarios ::= O_NOT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosUnarios",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Tipo ::= PR_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Tipo ::= PR_INT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Tipo ::= PR_CHAR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Tipo ::= PR_LONGINT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Tipo ::= PR_SHORTINT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Tipo ::= PR_STRING 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Tipo ::= PR_REAL 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // literal ::= L_INTEGER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // literal ::= L_FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // literal ::= L_STRING 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // literal ::= L_CHAR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // literal ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Boolean ::= PR_TRUE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Boolean ::= PR_FALSE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // empty ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("empty",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
