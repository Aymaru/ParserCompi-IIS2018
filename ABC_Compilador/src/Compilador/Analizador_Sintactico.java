
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 26 16:58:45 CST 2018
//----------------------------------------------------

package Compilador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Analisis_Semantico.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 26 16:58:45 CST 2018
  */
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\230\000\002\002\004\000\002\103\002\000\002\104" +
    "\002\000\002\007\012\000\002\007\003\000\002\105\002" +
    "\000\002\012\006\000\002\013\004\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\007\000\002" +
    "\015\004\000\002\016\004\000\002\016\004\000\002\016" +
    "\003\000\002\020\004\000\002\020\003\000\002\021\003" +
    "\000\002\021\003\000\002\022\011\000\002\022\004\000" +
    "\002\024\004\000\002\024\003\000\002\025\005\000\002" +
    "\025\003\000\002\026\004\000\002\026\003\000\002\027" +
    "\003\000\002\027\003\000\002\030\011\000\002\030\004" +
    "\000\002\004\010\000\002\004\004\000\002\003\003\000" +
    "\002\003\003\000\002\031\004\000\002\031\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\007\000\002\033" +
    "\004\000\002\034\004\000\002\034\004\000\002\034\003" +
    "\000\002\035\004\000\002\035\003\000\002\036\003\000" +
    "\002\036\003\000\002\037\011\000\002\037\004\000\002" +
    "\040\007\000\002\040\007\000\002\041\011\000\002\041" +
    "\011\000\002\041\011\000\002\005\003\000\002\005\003" +
    "\000\002\042\003\000\002\043\005\000\002\043\004\000" +
    "\002\043\003\000\002\044\006\000\002\044\003\000\002" +
    "\045\004\000\002\045\003\000\002\050\004\000\002\051" +
    "\005\000\002\051\003\000\002\052\004\000\002\053\005" +
    "\000\002\053\003\000\002\054\004\000\002\055\005\000" +
    "\002\055\003\000\002\056\004\000\002\056\004\000\002" +
    "\056\003\000\002\057\004\000\002\060\004\000\002\060" +
    "\005\000\002\060\005\000\002\060\003\000\002\061\003" +
    "\000\002\061\005\000\002\061\005\000\002\064\004\000" +
    "\002\064\003\000\002\062\004\000\002\062\003\000\002" +
    "\063\005\000\002\063\004\000\002\063\003\000\002\065" +
    "\003\000\002\065\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\004\000\002\047\004\000" +
    "\002\047\004\000\002\066\010\000\002\066\006\000\002" +
    "\066\010\000\002\002\006\000\002\002\005\000\002\002" +
    "\004\000\002\002\003\000\002\067\004\000\002\067\003" +
    "\000\002\070\010\000\002\070\005\000\002\071\014\000" +
    "\002\071\005\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\073\003\000\002\073\003\000\002\073\003" +
    "\000\002\074\003\000\002\074\003\000\002\074\003\000" +
    "\002\074\003\000\002\074\003\000\002\075\003\000\002" +
    "\075\003\000\002\075\003\000\002\075\003\000\002\075" +
    "\003\000\002\075\003\000\002\076\003\000\002\076\003" +
    "\000\002\077\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\100\003\000\002" +
    "\100\003\000\002\100\003\000\002\101\003\000\002\101" +
    "\003\000\002\101\003\000\002\101\003\000\002\101\003" +
    "\000\002\102\003\000\002\102\003\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\006\003\004\032\005\001\002\000\004\002" +
    "\ufffd\001\002\000\004\010\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\014\015\000\033" +
    "\000\051\000\063\000\070\000\001\002\000\014\015\uff6a" +
    "\033\uff6a\051\uff6a\063\014\070\uff6a\001\002\000\012\015" +
    "\ufff9\033\ufff9\051\ufff9\070\ufff9\001\002\000\012\015\u0102" +
    "\033\uff6a\051\uff6a\070\uff6a\001\002\000\016\003\016\010" +
    "\017\015\uff6a\033\uff6a\051\uff6a\070\uff6a\001\002\000\012" +
    "\015\ufffa\033\ufffa\051\ufffa\070\ufffa\001\002\000\014\015" +
    "\037\033\046\051\044\070\uff6a\107\041\001\002\000\004" +
    "\101\022\001\002\000\012\015\ufff8\033\ufff8\051\ufff8\070" +
    "\ufff8\001\002\000\012\015\ufff7\033\ufff7\051\ufff7\070\ufff7" +
    "\001\002\000\016\004\024\005\031\006\030\007\023\020" +
    "\026\055\027\001\002\000\060\003\uff6f\021\uff6f\022\uff6f" +
    "\035\uff6f\041\uff6f\061\uff6f\062\uff6f\072\uff6f\077\uff6f\100" +
    "\uff6f\101\uff6f\102\uff6f\103\uff6f\106\uff6f\107\uff6f\113\uff6f" +
    "\116\uff6f\117\uff6f\120\uff6f\122\uff6f\123\uff6f\125\uff6f\126" +
    "\uff6f\001\002\000\060\003\uff71\021\uff71\022\uff71\035\uff71" +
    "\041\uff71\061\uff71\062\uff71\072\uff71\077\uff71\100\uff71\101" +
    "\uff71\102\uff71\103\uff71\106\uff71\107\uff71\113\uff71\116\uff71" +
    "\117\uff71\120\uff71\122\uff71\123\uff71\125\uff71\126\uff71\001" +
    "\002\000\004\107\033\001\002\000\060\003\uff6c\021\uff6c" +
    "\022\uff6c\035\uff6c\041\uff6c\061\uff6c\062\uff6c\072\uff6c\077" +
    "\uff6c\100\uff6c\101\uff6c\102\uff6c\103\uff6c\106\uff6c\107\uff6c" +
    "\113\uff6c\116\uff6c\117\uff6c\120\uff6c\122\uff6c\123\uff6c\125" +
    "\uff6c\126\uff6c\001\002\000\060\003\uff6b\021\uff6b\022\uff6b" +
    "\035\uff6b\041\uff6b\061\uff6b\062\uff6b\072\uff6b\077\uff6b\100" +
    "\uff6b\101\uff6b\102\uff6b\103\uff6b\106\uff6b\107\uff6b\113\uff6b" +
    "\116\uff6b\117\uff6b\120\uff6b\122\uff6b\123\uff6b\125\uff6b\126" +
    "\uff6b\001\002\000\060\003\uff70\021\uff70\022\uff70\035\uff70" +
    "\041\uff70\061\uff70\062\uff70\072\uff70\077\uff70\100\uff70\101" +
    "\uff70\102\uff70\103\uff70\106\uff70\107\uff70\113\uff70\116\uff70" +
    "\117\uff70\120\uff70\122\uff70\123\uff70\125\uff70\126\uff70\001" +
    "\002\000\060\003\uff6e\021\uff6e\022\uff6e\035\uff6e\041\uff6e" +
    "\061\uff6e\062\uff6e\072\uff6e\077\uff6e\100\uff6e\101\uff6e\102" +
    "\uff6e\103\uff6e\106\uff6e\107\uff6e\113\uff6e\116\uff6e\117\uff6e" +
    "\120\uff6e\122\uff6e\123\uff6e\125\uff6e\126\uff6e\001\002\000" +
    "\060\003\uff6d\021\uff6d\022\uff6d\035\uff6d\041\uff6d\061\uff6d" +
    "\062\uff6d\072\uff6d\077\uff6d\100\uff6d\101\uff6d\102\uff6d\103" +
    "\uff6d\106\uff6d\107\uff6d\113\uff6d\116\uff6d\117\uff6d\120\uff6d" +
    "\122\uff6d\123\uff6d\125\uff6d\126\uff6d\001\002\000\016\003" +
    "\016\010\017\015\uff6a\033\uff6a\051\uff6a\070\uff6a\001\002" +
    "\000\012\015\ufff6\033\ufff6\051\ufff6\070\ufff6\001\002\000" +
    "\012\015\ufff2\033\ufff2\051\ufff2\070\ufff2\001\002\000\016" +
    "\003\uffe5\015\uffe5\033\uffe5\051\uffe5\063\uffe5\070\uffe5\001" +
    "\002\000\016\003\151\010\152\015\uff6a\033\uff6a\051\uff6a" +
    "\070\uff6a\001\002\000\012\003\117\015\uff6a\063\115\070" +
    "\uff6a\001\002\000\016\003\016\010\017\015\uff6a\033\uff6a" +
    "\051\uff6a\070\uff6a\001\002\000\010\015\uff6a\063\115\070" +
    "\uff6a\001\002\000\016\003\uffe4\015\uffe4\033\uffe4\051\uffe4" +
    "\063\uffe4\070\uffe4\001\002\000\004\010\077\001\002\000" +
    "\012\015\ufff5\033\ufff5\051\ufff5\070\ufff5\001\002\000\004" +
    "\010\047\001\002\000\004\127\050\001\002\000\024\003" +
    "\062\023\064\024\053\030\051\042\056\044\063\064\054" +
    "\067\061\126\uff6a\001\002\000\020\003\uff72\010\uff72\015" +
    "\uff72\063\uff72\070\uff72\101\uff72\107\uff72\001\002\000\006" +
    "\003\067\010\070\001\002\000\020\003\uff74\010\uff74\015" +
    "\uff74\063\uff74\070\uff74\101\uff74\107\uff74\001\002\000\020" +
    "\003\uff76\010\uff76\015\uff76\063\uff76\070\uff76\101\uff76\107" +
    "\uff76\001\002\000\004\126\uffc4\001\002\000\020\003\uff75" +
    "\010\uff75\015\uff75\063\uff75\070\uff75\101\uff75\107\uff75\001" +
    "\002\000\004\126\uffc7\001\002\000\004\126\066\001\002" +
    "\000\020\003\uff78\010\uff78\015\uff78\063\uff78\070\uff78\101" +
    "\uff78\107\uff78\001\002\000\004\126\065\001\002\000\020" +
    "\003\uff77\010\uff77\015\uff77\063\uff77\070\uff77\101\uff77\107" +
    "\uff77\001\002\000\020\003\uff73\010\uff73\015\uff73\063\uff73" +
    "\070\uff73\101\uff73\107\uff73\001\002\000\010\015\uffcd\063" +
    "\uffcd\070\uffcd\001\002\000\010\015\uffce\063\uffce\070\uffce" +
    "\001\002\000\004\126\uffc5\001\002\000\006\120\073\126" +
    "\uff6a\001\002\000\004\126\uffc6\001\002\000\004\126\uffc2" +
    "\001\002\000\020\023\064\024\053\030\051\042\056\044" +
    "\063\064\054\067\061\001\002\000\004\010\075\001\002" +
    "\000\006\120\073\126\uff6a\001\002\000\004\126\uffc3\001" +
    "\002\000\004\127\100\001\002\000\024\003\102\023\064" +
    "\024\053\030\051\042\056\044\063\064\054\067\061\126" +
    "\uff6a\001\002\000\004\126\106\001\002\000\004\126\103" +
    "\001\002\000\004\111\104\001\002\000\020\023\064\024" +
    "\053\030\051\042\056\044\063\064\054\067\061\001\002" +
    "\000\012\003\uffcb\015\uffcb\063\uffcb\070\uffcb\001\002\000" +
    "\006\003\107\111\110\001\002\000\030\003\117\015\uff6a" +
    "\023\064\024\053\030\051\042\056\044\063\063\115\064" +
    "\054\067\061\070\uff6a\001\002\000\020\023\064\024\053" +
    "\030\051\042\056\044\063\064\054\067\061\001\002\000" +
    "\012\003\uffcc\015\uffcc\063\uffcc\070\uffcc\001\002\000\012" +
    "\003\uffc8\015\uffc8\063\uffc8\070\uffc8\001\002\000\012\003" +
    "\uffca\015\uffca\063\uffca\070\uffca\001\002\000\012\003\uffc9" +
    "\015\uffc9\063\uffc9\070\uffc9\001\002\000\012\003\016\010" +
    "\017\015\uff6a\070\uff6a\001\002\000\006\015\uffdc\070\uffdc" +
    "\001\002\000\020\003\uff6a\015\uff6a\033\046\051\044\056" +
    "\363\063\uff6a\070\uff6a\001\002\000\006\015\123\070\uff6a" +
    "\001\002\000\004\070\165\001\002\000\004\070\uffd3\001" +
    "\002\000\010\003\124\010\126\070\uff6a\001\002\000\012" +
    "\033\046\051\044\070\uff6a\107\147\001\002\000\004\070" +
    "\uffd4\001\002\000\006\111\uff6a\120\133\001\002\000\004" +
    "\070\uffd2\001\002\000\004\070\uffd1\001\002\000\004\111" +
    "\136\001\002\000\004\111\uffe8\001\002\000\004\010\134" +
    "\001\002\000\006\111\uff6a\120\133\001\002\000\004\111" +
    "\uffe9\001\002\000\020\023\064\024\053\030\051\042\056" +
    "\044\063\064\054\067\061\001\002\000\006\101\140\107" +
    "\uff6a\001\002\000\016\004\024\005\031\006\030\007\023" +
    "\020\026\055\027\001\002\000\004\107\uffe6\001\002\000" +
    "\004\107\143\001\002\000\010\003\124\010\126\070\uff6a" +
    "\001\002\000\004\070\uffd0\001\002\000\004\107\uffe7\001" +
    "\002\000\012\015\uffea\033\uffea\051\uffea\070\uffea\001\002" +
    "\000\016\003\151\010\152\015\uff6a\033\uff6a\051\uff6a\070" +
    "\uff6a\001\002\000\004\070\uffcf\001\002\000\014\015\uff6a" +
    "\033\046\051\044\070\uff6a\107\147\001\002\000\006\111" +
    "\uff6a\120\133\001\002\000\012\015\uffef\033\uffef\051\uffef" +
    "\070\uffef\001\002\000\012\015\uffee\033\uffee\051\uffee\070" +
    "\uffee\001\002\000\012\015\uffeb\033\uffeb\051\uffeb\070\uffeb" +
    "\001\002\000\004\111\157\001\002\000\020\023\064\024" +
    "\053\030\051\042\056\044\063\064\054\067\061\001\002" +
    "\000\006\101\140\107\uff6a\001\002\000\004\107\162\001" +
    "\002\000\016\003\151\010\152\015\uff6a\033\uff6a\051\uff6a" +
    "\070\uff6a\001\002\000\012\015\uffed\033\uffed\051\uffed\070" +
    "\uffed\001\002\000\012\015\uffec\033\uffec\051\uffec\070\uffec" +
    "\001\002\000\042\003\206\004\024\005\031\006\030\007" +
    "\023\010\211\014\217\020\026\037\167\047\174\053\171" +
    "\055\027\056\uff6a\116\170\122\176\127\203\001\002\000" +
    "\044\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\014\uffa0\020\uffa0\037\uffa0\047\uffa0\053\uffa0\055\uffa0\056" +
    "\uffa0\057\uffa0\116\uffa0\122\uffa0\127\uffa0\001\002\000\022" +
    "\004\uff79\005\uff79\006\uff79\007\uff79\010\uff79\020\uff79\055" +
    "\uff79\127\uff79\001\002\000\100\003\uff8e\004\uff8e\005\uff8e" +
    "\006\uff8e\007\uff8e\010\uff8e\020\uff8e\021\uff8e\022\uff8e\035" +
    "\uff8e\041\uff8e\055\uff8e\061\uff8e\062\uff8e\072\uff8e\077\uff8e" +
    "\100\uff8e\101\uff8e\102\uff8e\103\uff8e\106\uff8e\107\uff8e\113" +
    "\uff8e\116\uff8e\117\uff8e\120\uff8e\122\uff8e\123\uff8e\125\uff8e" +
    "\126\uff8e\127\uff8e\001\002\000\006\003\346\010\347\001" +
    "\002\000\004\107\345\001\002\000\026\004\uff8d\005\uff8d" +
    "\006\uff8d\007\uff8d\010\uff8d\020\uff8d\055\uff8d\056\uffc0\057" +
    "\uffc0\127\uff8d\001\002\000\032\003\327\004\024\005\031" +
    "\006\030\007\023\010\211\020\026\037\167\055\027\116" +
    "\170\122\176\127\203\001\002\000\044\003\206\004\024" +
    "\005\031\006\030\007\023\010\211\014\217\020\026\037" +
    "\167\047\174\053\171\055\027\056\uff6a\057\uff6a\116\170" +
    "\122\176\127\203\001\002\000\100\003\uff8f\004\uff8f\005" +
    "\uff8f\006\uff8f\007\uff8f\010\uff8f\020\uff8f\021\uff8f\022\uff8f" +
    "\035\uff8f\041\uff8f\055\uff8f\061\uff8f\062\uff8f\072\uff8f\077" +
    "\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\106\uff8f\107\uff8f" +
    "\113\uff8f\116\uff8f\117\uff8f\120\uff8f\122\uff8f\123\uff8f\125" +
    "\uff8f\126\uff8f\127\uff8f\001\002\000\022\004\024\005\031" +
    "\006\030\007\023\010\211\020\026\055\027\127\203\001" +
    "\002\000\060\003\uff6a\021\uff6a\022\uff6a\035\uff6a\041\uff6a" +
    "\061\uff6a\062\uff6a\072\uff6a\077\uff6a\100\uff6a\101\uff6a\102" +
    "\uff6a\103\uff6a\106\uff6a\107\uff6a\113\uff6a\116\170\117\uff6a" +
    "\120\uff6a\122\176\123\uff6a\125\uff6a\126\uff6a\001\002\000" +
    "\060\003\uffb4\021\uffb4\022\uffb4\035\uffb4\041\uffb4\061\uffb4" +
    "\062\uffb4\072\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103" +
    "\uffb4\106\uffb4\107\uffb4\113\uffb4\116\uffb4\117\uffb4\120\uffb4" +
    "\122\uffb4\123\uffb4\125\uffb4\126\uffb4\001\002\000\060\003" +
    "\uff6a\021\uff6a\022\uff6a\035\uff6a\041\314\061\uff6a\062\320" +
    "\072\uff6a\077\uff6a\100\uff6a\101\uff6a\102\uff6a\103\uff6a\106" +
    "\uff6a\107\uff6a\113\317\116\uff6a\117\316\120\uff6a\122\uff6a" +
    "\123\313\125\310\126\uff6a\001\002\000\030\004\024\005" +
    "\031\006\030\007\023\010\211\020\026\037\167\055\027" +
    "\116\170\122\176\127\203\001\002\000\060\003\uff6a\021" +
    "\uff6a\022\uff6a\035\uff6a\041\uff6a\061\uff6a\062\uff6a\072\uff6a" +
    "\077\301\100\275\101\273\102\276\103\302\106\300\107" +
    "\uff6a\113\uff6a\116\uff6a\117\uff6a\120\uff6a\122\uff6a\123\uff6a" +
    "\125\uff6a\126\uff6a\001\002\000\060\003\uff6a\021\uff6a\022" +
    "\uff6a\035\266\041\uff6a\061\uff6a\062\uff6a\072\264\077\uff6a" +
    "\100\uff6a\101\uff6a\102\uff6a\103\uff6a\106\uff6a\107\uff6a\113" +
    "\uff6a\116\uff6a\117\uff6a\120\uff6a\122\uff6a\123\uff6a\125\uff6a" +
    "\126\uff6a\001\002\000\006\056\262\107\261\001\002\000" +
    "\044\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\014\uffa3\020\uffa3\037\uffa3\047\uffa3\053\uffa3\055\uffa3\056" +
    "\uffa3\057\uffa3\116\uffa3\122\uffa3\127\uffa3\001\002\000\022" +
    "\004\024\005\031\006\030\007\023\010\211\020\026\055" +
    "\027\127\203\001\002\000\074\003\uff6a\021\uff6a\022\uff6a" +
    "\035\uff6a\041\uff6a\061\uff6a\062\uff6a\072\uff6a\077\uff6a\100" +
    "\uff6a\101\uff6a\102\uff6a\103\uff6a\106\uff6a\107\uff6a\110\237" +
    "\112\240\113\uff6a\115\234\116\uff6a\117\uff6a\120\uff6a\121" +
    "\243\122\uff6a\123\uff6a\124\241\125\uff6a\126\uff6a\127\242" +
    "\001\002\000\060\003\uffaf\021\uffaf\022\uffaf\035\uffaf\041" +
    "\uffaf\061\uffaf\062\uffaf\072\uffaf\077\uffaf\100\uffaf\101\uffaf" +
    "\102\uffaf\103\uffaf\106\uffaf\107\uffaf\113\uffaf\116\uffaf\117" +
    "\uffaf\120\uffaf\122\uffaf\123\uffaf\125\uffaf\126\uffaf\001\002" +
    "\000\004\056\230\001\002\000\044\003\uffa2\004\uffa2\005" +
    "\uffa2\006\uffa2\007\uffa2\010\uffa2\014\uffa2\020\uffa2\037\uffa2" +
    "\047\uffa2\053\uffa2\055\uffa2\056\uffa2\057\uffa2\116\uffa2\122" +
    "\uffa2\127\uffa2\001\002\000\044\003\uffa1\004\uffa1\005\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\014\uffa1\020\uffa1\037\uffa1\047" +
    "\uffa1\053\uffa1\055\uffa1\056\uffa1\057\uffa1\116\uffa1\122\uffa1" +
    "\127\uffa1\001\002\000\044\003\uffa4\004\uffa4\005\uffa4\006" +
    "\uffa4\007\uffa4\010\uffa4\014\uffa4\020\uffa4\037\uffa4\047\uffa4" +
    "\053\uffa4\055\uffa4\056\uffa4\057\uffa4\116\uffa4\122\uffa4\127" +
    "\uffa4\001\002\000\032\003\222\004\024\005\031\006\030" +
    "\007\023\010\211\020\026\037\167\055\027\116\170\122" +
    "\176\127\203\001\002\000\004\061\224\001\002\000\100" +
    "\003\uff8d\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\020" +
    "\uff8d\021\uff8d\022\uff8d\035\uff8d\041\uff8d\055\uff8d\061\uff8d" +
    "\062\uff8d\072\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\103" +
    "\uff8d\106\uff8d\107\uff8d\113\uff8d\116\uff8d\117\uff8d\120\uff8d" +
    "\122\uff8d\123\uff8d\125\uff8d\126\uff8d\127\uff8d\001\002\000" +
    "\004\056\223\001\002\000\044\003\uff92\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\014\uff92\020\uff92\037\uff92\047" +
    "\uff92\053\uff92\055\uff92\056\uff92\057\uff92\116\uff92\122\uff92" +
    "\127\uff92\001\002\000\004\070\225\001\002\000\042\003" +
    "\206\004\024\005\031\006\030\007\023\010\211\014\217" +
    "\020\026\037\167\047\174\053\171\055\027\056\uff6a\116" +
    "\170\122\176\127\203\001\002\000\004\056\227\001\002" +
    "\000\044\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010" +
    "\uff93\014\uff93\020\uff93\037\uff93\047\uff93\053\uff93\055\uff93" +
    "\056\uff93\057\uff93\116\uff93\122\uff93\127\uff93\001\002\000" +
    "\016\003\uff6a\015\uff6a\033\046\051\044\063\uff6a\070\uff6a" +
    "\001\002\000\016\003\uffe1\015\uffe1\033\uffe1\051\uffe1\063" +
    "\uffe1\070\uffe1\001\002\000\060\003\uffb2\021\uffb2\022\uffb2" +
    "\035\uffb2\041\uffb2\061\uffb2\062\uffb2\072\uffb2\077\uffb2\100" +
    "\uffb2\101\uffb2\102\uffb2\103\uffb2\106\uffb2\107\uffb2\113\uffb2" +
    "\116\uffb2\117\uffb2\120\uffb2\122\uffb2\123\uffb2\125\uffb2\126" +
    "\uffb2\001\002\000\030\004\024\005\031\006\030\007\023" +
    "\010\211\020\026\037\167\055\027\116\170\122\176\127" +
    "\203\001\002\000\030\004\uff84\005\uff84\006\uff84\007\uff84" +
    "\010\uff84\020\uff84\037\uff84\055\uff84\116\uff84\122\uff84\127" +
    "\uff84\001\002\000\060\003\uffae\021\uffae\022\uffae\035\uffae" +
    "\041\uffae\061\uffae\062\uffae\072\uffae\077\uffae\100\uffae\101" +
    "\uffae\102\uffae\103\uffae\106\uffae\107\uffae\113\uffae\116\uffae" +
    "\117\uffae\120\uffae\122\uffae\123\uffae\125\uffae\126\uffae\001" +
    "\002\000\060\003\uffaa\021\uffaa\022\uffaa\035\uffaa\041\uffaa" +
    "\061\uffaa\062\uffaa\072\uffaa\077\uffaa\100\uffaa\101\uffaa\102" +
    "\uffaa\103\uffaa\106\uffaa\107\uffaa\113\uffaa\116\uffaa\117\uffaa" +
    "\120\uffaa\122\uffaa\123\uffaa\125\uffaa\126\uffaa\001\002\000" +
    "\030\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\020\uff86" +
    "\037\uff86\055\uff86\116\uff86\122\uff86\127\uff86\001\002\000" +
    "\030\004\uff82\005\uff82\006\uff82\007\uff82\010\uff82\020\uff82" +
    "\037\uff82\055\uff82\116\uff82\122\uff82\127\uff82\001\002\000" +
    "\030\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\020\uff83" +
    "\037\uff83\055\uff83\116\uff83\122\uff83\127\uff83\001\002\000" +
    "\034\003\uff6a\004\024\005\031\006\030\007\023\010\211" +
    "\020\026\037\167\055\027\116\170\122\176\126\uff6a\127" +
    "\203\001\002\000\030\004\uff85\005\uff85\006\uff85\007\uff85" +
    "\010\uff85\020\uff85\037\uff85\055\uff85\116\uff85\122\uff85\127" +
    "\uff85\001\002\000\010\003\uff6a\120\253\126\uff6a\001\002" +
    "\000\026\003\uffa8\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\020\uff8d\055\uff8d\126\uffa8\127\uff8d\001\002\000\006" +
    "\003\247\126\250\001\002\000\060\003\uffac\021\uffac\022" +
    "\uffac\035\uffac\041\uffac\061\uffac\062\uffac\072\uffac\077\uffac" +
    "\100\uffac\101\uffac\102\uffac\103\uffac\106\uffac\107\uffac\113" +
    "\uffac\116\uffac\117\uffac\120\uffac\122\uffac\123\uffac\125\uffac" +
    "\126\uffac\001\002\000\060\003\uffad\021\uffad\022\uffad\035" +
    "\uffad\041\uffad\061\uffad\062\uffad\072\uffad\077\uffad\100\uffad" +
    "\101\uffad\102\uffad\103\uffad\106\uffad\107\uffad\113\uffad\116" +
    "\uffad\117\uffad\120\uffad\122\uffad\123\uffad\125\uffad\126\uffad" +
    "\001\002\000\006\003\uffa9\126\uffa9\001\002\000\006\003" +
    "\uffa5\126\uffa5\001\002\000\032\003\255\004\024\005\031" +
    "\006\030\007\023\010\211\020\026\037\167\055\027\116" +
    "\170\122\176\127\203\001\002\000\010\003\uff6a\120\253" +
    "\126\uff6a\001\002\000\006\003\uffa6\126\uffa6\001\002\000" +
    "\006\003\uffa7\126\uffa7\001\002\000\060\003\uffab\021\uffab" +
    "\022\uffab\035\uffab\041\uffab\061\uffab\062\uffab\072\uffab\077" +
    "\uffab\100\uffab\101\uffab\102\uffab\103\uffab\106\uffab\107\uffab" +
    "\113\uffab\116\uffab\117\uffab\120\uffab\122\uffab\123\uffab\125" +
    "\uffab\126\uffab\001\002\000\060\003\uffb6\021\uffb6\022\uffb6" +
    "\035\uffb6\041\uffb6\061\uffb6\062\uffb6\072\uffb6\077\uffb6\100" +
    "\uffb6\101\uffb6\102\uffb6\103\uffb6\106\uffb6\107\uffb6\113\uffb6" +
    "\116\uffb6\117\uffb6\120\uffb6\122\uffb6\123\uffb6\125\uffb6\126" +
    "\uffb6\001\002\000\044\003\uff9d\004\uff9d\005\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\014\uff9d\020\uff9d\037\uff9d\047\uff9d\053" +
    "\uff9d\055\uff9d\056\uff9d\057\uff9d\116\uff9d\122\uff9d\127\uff9d" +
    "\001\002\000\044\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007" +
    "\uff9f\010\uff9f\014\uff9f\020\uff9f\037\uff9f\047\uff9f\053\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\116\uff9f\122\uff9f\127\uff9f\001" +
    "\002\000\060\003\uffbf\021\uffbf\022\uffbf\035\uffbf\041\uffbf" +
    "\061\uffbf\062\uffbf\072\uffbf\077\uffbf\100\uffbf\101\uffbf\102" +
    "\uffbf\103\uffbf\106\uffbf\107\uffbf\113\uffbf\116\uffbf\117\uffbf" +
    "\120\uffbf\122\uffbf\123\uffbf\125\uffbf\126\uffbf\001\002\000" +
    "\030\004\uff7a\005\uff7a\006\uff7a\007\uff7a\010\uff7a\020\uff7a" +
    "\037\uff7a\055\uff7a\116\uff7a\122\uff7a\127\uff7a\001\002\000" +
    "\060\003\uffbd\021\uffbd\022\uffbd\035\uffbd\041\uffbd\061\uffbd" +
    "\062\uffbd\072\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103" +
    "\uffbd\106\uffbd\107\uffbd\113\uffbd\116\uffbd\117\uffbd\120\uffbd" +
    "\122\uffbd\123\uffbd\125\uffbd\126\uffbd\001\002\000\030\004" +
    "\uff7b\005\uff7b\006\uff7b\007\uff7b\010\uff7b\020\uff7b\037\uff7b" +
    "\055\uff7b\116\uff7b\122\uff7b\127\uff7b\001\002\000\030\004" +
    "\024\005\031\006\030\007\023\010\211\020\026\037\167" +
    "\055\027\116\170\122\176\127\203\001\002\000\060\003" +
    "\uff6a\021\uff6a\022\uff6a\035\266\041\uff6a\061\uff6a\062\uff6a" +
    "\072\264\077\uff6a\100\uff6a\101\uff6a\102\uff6a\103\uff6a\106" +
    "\uff6a\107\uff6a\113\uff6a\116\uff6a\117\uff6a\120\uff6a\122\uff6a" +
    "\123\uff6a\125\uff6a\126\uff6a\001\002\000\060\003\uffbe\021" +
    "\uffbe\022\uffbe\035\uffbe\041\uffbe\061\uffbe\062\uffbe\072\uffbe" +
    "\077\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\106\uffbe\107" +
    "\uffbe\113\uffbe\116\uffbe\117\uffbe\120\uffbe\122\uffbe\123\uffbe" +
    "\125\uffbe\126\uffbe\001\002\000\060\003\uffbc\021\uffbc\022" +
    "\uffbc\035\uffbc\041\uffbc\061\uffbc\062\uffbc\072\uffbc\077\uffbc" +
    "\100\uffbc\101\uffbc\102\uffbc\103\uffbc\106\uffbc\107\uffbc\113" +
    "\uffbc\116\uffbc\117\uffbc\120\uffbc\122\uffbc\123\uffbc\125\uffbc" +
    "\126\uffbc\001\002\000\030\004\uff81\005\uff81\006\uff81\007" +
    "\uff81\010\uff81\020\uff81\037\uff81\055\uff81\116\uff81\122\uff81" +
    "\127\uff81\001\002\000\060\003\uffba\021\uffba\022\uffba\035" +
    "\uffba\041\uffba\061\uffba\062\uffba\072\uffba\077\uffba\100\uffba" +
    "\101\uffba\102\uffba\103\uffba\106\uffba\107\uffba\113\uffba\116" +
    "\uffba\117\uffba\120\uffba\122\uffba\123\uffba\125\uffba\126\uffba" +
    "\001\002\000\030\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010" +
    "\uff7f\020\uff7f\037\uff7f\055\uff7f\116\uff7f\122\uff7f\127\uff7f" +
    "\001\002\000\030\004\uff7c\005\uff7c\006\uff7c\007\uff7c\010" +
    "\uff7c\020\uff7c\037\uff7c\055\uff7c\116\uff7c\122\uff7c\127\uff7c" +
    "\001\002\000\030\004\024\005\031\006\030\007\023\010" +
    "\211\020\026\037\167\055\027\116\170\122\176\127\203" +
    "\001\002\000\030\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010" +
    "\uff7d\020\uff7d\037\uff7d\055\uff7d\116\uff7d\122\uff7d\127\uff7d" +
    "\001\002\000\030\004\uff80\005\uff80\006\uff80\007\uff80\010" +
    "\uff80\020\uff80\037\uff80\055\uff80\116\uff80\122\uff80\127\uff80" +
    "\001\002\000\030\004\uff7e\005\uff7e\006\uff7e\007\uff7e\010" +
    "\uff7e\020\uff7e\037\uff7e\055\uff7e\116\uff7e\122\uff7e\127\uff7e" +
    "\001\002\000\060\003\uff6a\021\uff6a\022\uff6a\035\uff6a\041" +
    "\uff6a\061\uff6a\062\uff6a\072\uff6a\077\301\100\275\101\273" +
    "\102\276\103\302\106\300\107\uff6a\113\uff6a\116\uff6a\117" +
    "\uff6a\120\uff6a\122\uff6a\123\uff6a\125\uff6a\126\uff6a\001\002" +
    "\000\060\003\uffbb\021\uffbb\022\uffbb\035\uffbb\041\uffbb\061" +
    "\uffbb\062\uffbb\072\uffbb\077\uffbb\100\uffbb\101\uffbb\102\uffbb" +
    "\103\uffbb\106\uffbb\107\uffbb\113\uffbb\116\uffbb\117\uffbb\120" +
    "\uffbb\122\uffbb\123\uffbb\125\uffbb\126\uffbb\001\002\000\006" +
    "\003\306\126\307\001\002\000\060\003\uffb0\021\uffb0\022" +
    "\uffb0\035\uffb0\041\uffb0\061\uffb0\062\uffb0\072\uffb0\077\uffb0" +
    "\100\uffb0\101\uffb0\102\uffb0\103\uffb0\106\uffb0\107\uffb0\113" +
    "\uffb0\116\uffb0\117\uffb0\120\uffb0\122\uffb0\123\uffb0\125\uffb0" +
    "\126\uffb0\001\002\000\060\003\uffb1\021\uffb1\022\uffb1\035" +
    "\uffb1\041\uffb1\061\uffb1\062\uffb1\072\uffb1\077\uffb1\100\uffb1" +
    "\101\uffb1\102\uffb1\103\uffb1\106\uffb1\107\uffb1\113\uffb1\116" +
    "\uffb1\117\uffb1\120\uffb1\122\uffb1\123\uffb1\125\uffb1\126\uffb1" +
    "\001\002\000\030\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010" +
    "\uff8a\020\uff8a\037\uff8a\055\uff8a\116\uff8a\122\uff8a\127\uff8a" +
    "\001\002\000\060\003\uffb7\021\uffb7\022\uffb7\035\uffb7\041" +
    "\uffb7\061\uffb7\062\uffb7\072\uffb7\077\uffb7\100\uffb7\101\uffb7" +
    "\102\uffb7\103\uffb7\106\uffb7\107\uffb7\113\uffb7\116\uffb7\117" +
    "\uffb7\120\uffb7\122\uffb7\123\uffb7\125\uffb7\126\uffb7\001\002" +
    "\000\060\003\uffb9\021\uffb9\022\uffb9\035\uffb9\041\uffb9\061" +
    "\uffb9\062\uffb9\072\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9" +
    "\103\uffb9\106\uffb9\107\uffb9\113\uffb9\116\uffb9\117\uffb9\120" +
    "\uffb9\122\uffb9\123\uffb9\125\uffb9\126\uffb9\001\002\000\030" +
    "\004\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\020\uff8c\037" +
    "\uff8c\055\uff8c\116\uff8c\122\uff8c\127\uff8c\001\002\000\030" +
    "\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\020\uff88\037" +
    "\uff88\055\uff88\116\uff88\122\uff88\127\uff88\001\002\000\030" +
    "\004\024\005\031\006\030\007\023\010\211\020\026\037" +
    "\167\055\027\116\170\122\176\127\203\001\002\000\030" +
    "\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\020\uff8b\037" +
    "\uff8b\055\uff8b\116\uff8b\122\uff8b\127\uff8b\001\002\000\030" +
    "\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\020\uff89\037" +
    "\uff89\055\uff89\116\uff89\122\uff89\127\uff89\001\002\000\030" +
    "\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\020\uff87\037" +
    "\uff87\055\uff87\116\uff87\122\uff87\127\uff87\001\002\000\060" +
    "\003\uff6a\021\uff6a\022\uff6a\035\uff6a\041\314\061\uff6a\062" +
    "\320\072\uff6a\077\uff6a\100\uff6a\101\uff6a\102\uff6a\103\uff6a" +
    "\106\uff6a\107\uff6a\113\317\116\uff6a\117\316\120\uff6a\122" +
    "\uff6a\123\313\125\310\126\uff6a\001\002\000\060\003\uffb8" +
    "\021\uffb8\022\uffb8\035\uffb8\041\uffb8\061\uffb8\062\uffb8\072" +
    "\uffb8\077\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\106\uffb8" +
    "\107\uffb8\113\uffb8\116\uffb8\117\uffb8\120\uffb8\122\uffb8\123" +
    "\uffb8\125\uffb8\126\uffb8\001\002\000\060\003\uffb3\021\uffb3" +
    "\022\uffb3\035\uffb3\041\uffb3\061\uffb3\062\uffb3\072\uffb3\077" +
    "\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\106\uffb3\107\uffb3" +
    "\113\uffb3\116\uffb3\117\uffb3\120\uffb3\122\uffb3\123\uffb3\125" +
    "\uffb3\126\uffb3\001\002\000\060\003\uffb5\021\uffb5\022\uffb5" +
    "\035\uffb5\041\uffb5\061\uffb5\062\uffb5\072\uffb5\077\uffb5\100" +
    "\uffb5\101\uffb5\102\uffb5\103\uffb5\106\uffb5\107\uffb5\113\uffb5" +
    "\116\uffb5\117\uffb5\120\uffb5\122\uffb5\123\uffb5\125\uffb5\126" +
    "\uffb5\001\002\000\006\056\uffc1\057\uffc1\001\002\000\006" +
    "\003\337\022\340\001\002\000\004\022\330\001\002\000" +
    "\044\003\206\004\024\005\031\006\030\007\023\010\211" +
    "\014\217\020\026\037\167\047\174\053\171\055\027\056" +
    "\uff6a\057\uff6a\116\170\122\176\127\203\001\002\000\006" +
    "\056\uff6a\057\332\001\002\000\042\003\206\004\024\005" +
    "\031\006\030\007\023\010\211\014\217\020\026\037\167" +
    "\047\174\053\171\055\027\056\uff6a\116\170\122\176\127" +
    "\203\001\002\000\004\056\335\001\002\000\004\056\uff94" +
    "\001\002\000\044\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\014\uff9a\020\uff9a\037\uff9a\047\uff9a\053\uff9a" +
    "\055\uff9a\056\uff9a\057\uff9a\116\uff9a\122\uff9a\127\uff9a\001" +
    "\002\000\004\056\uff95\001\002\000\004\056\344\001\002" +
    "\000\044\003\206\004\024\005\031\006\030\007\023\010" +
    "\211\014\217\020\026\037\167\047\174\053\171\055\027" +
    "\056\uff6a\057\uff6a\116\170\122\176\127\203\001\002\000" +
    "\006\056\uff6a\057\332\001\002\000\004\056\343\001\002" +
    "\000\044\003\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010" +
    "\uff9c\014\uff9c\020\uff9c\037\uff9c\047\uff9c\053\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\116\uff9c\122\uff9c\127\uff9c\001\002\000" +
    "\044\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\014\uff9b\020\uff9b\037\uff9b\047\uff9b\053\uff9b\055\uff9b\056" +
    "\uff9b\057\uff9b\116\uff9b\122\uff9b\127\uff9b\001\002\000\044" +
    "\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\014" +
    "\uff9e\020\uff9e\037\uff9e\047\uff9e\053\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\116\uff9e\122\uff9e\127\uff9e\001\002\000\004\056" +
    "\360\001\002\000\004\110\350\001\002\000\030\004\024" +
    "\005\031\006\030\007\023\010\211\020\026\037\167\055" +
    "\027\116\170\122\176\127\203\001\002\000\004\021\352" +
    "\001\002\000\030\004\024\005\031\006\030\007\023\010" +
    "\211\020\026\037\167\055\027\116\170\122\176\127\203" +
    "\001\002\000\004\061\354\001\002\000\004\070\355\001" +
    "\002\000\042\003\206\004\024\005\031\006\030\007\023" +
    "\010\211\014\217\020\026\037\167\047\174\053\171\055" +
    "\027\056\uff6a\116\170\122\176\127\203\001\002\000\004" +
    "\056\357\001\002\000\044\003\uff91\004\uff91\005\uff91\006" +
    "\uff91\007\uff91\010\uff91\014\uff91\020\uff91\037\uff91\047\uff91" +
    "\053\uff91\055\uff91\056\uff91\057\uff91\116\uff91\122\uff91\127" +
    "\uff91\001\002\000\044\003\uff90\004\uff90\005\uff90\006\uff90" +
    "\007\uff90\010\uff90\014\uff90\020\uff90\037\uff90\047\uff90\053" +
    "\uff90\055\uff90\056\uff90\057\uff90\116\uff90\122\uff90\127\uff90" +
    "\001\002\000\016\003\uffde\015\uffde\033\uffde\051\uffde\063" +
    "\uffde\070\uffde\001\002\000\016\003\uffe0\015\uffe0\033\uffe0" +
    "\051\uffe0\063\uffe0\070\uffe0\001\002\000\016\003\uffdf\015" +
    "\uffdf\033\uffdf\051\uffdf\063\uffdf\070\uffdf\001\002\000\006" +
    "\015\uffdd\070\uffdd\001\002\000\006\015\uffda\070\uffda\001" +
    "\002\000\006\015\uffdb\070\uffdb\001\002\000\006\015\123" +
    "\070\uff6a\001\002\000\004\070\371\001\002\000\042\003" +
    "\206\004\024\005\031\006\030\007\023\010\211\014\217" +
    "\020\026\037\167\047\174\053\171\055\027\056\uff6a\116" +
    "\170\122\176\127\203\001\002\000\004\056\373\001\002" +
    "\000\016\003\uff6a\015\uff6a\033\046\051\044\063\uff6a\070" +
    "\uff6a\001\002\000\016\003\uffe3\015\uffe3\033\uffe3\051\uffe3" +
    "\063\uffe3\070\uffe3\001\002\000\012\015\ufff4\033\ufff4\051" +
    "\ufff4\070\ufff4\001\002\000\016\003\uffe2\015\uffe2\033\uffe2" +
    "\051\uffe2\063\uffe2\070\uffe2\001\002\000\012\015\ufff3\033" +
    "\ufff3\051\ufff3\070\ufff3\001\002\000\010\033\uffff\051\uffff" +
    "\070\uffff\001\002\000\010\033\ufff0\051\ufff0\070\ufff0\001" +
    "\002\000\014\003\151\010\152\033\uff6a\051\uff6a\070\uff6a" +
    "\001\002\000\010\033\ufff1\051\ufff1\070\ufff1\001\002\000" +
    "\010\033\046\051\044\070\uff6a\001\002\000\004\070\u0106" +
    "\001\002\000\042\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\014\ufffc\020\ufffc\037\ufffc\047\ufffc\053\ufffc" +
    "\055\ufffc\056\ufffc\116\ufffc\122\ufffc\127\ufffc\001\002\000" +
    "\004\002\ufffe\001\002\000\042\003\206\004\024\005\031" +
    "\006\030\007\023\010\211\014\217\020\026\037\167\047" +
    "\174\053\171\055\027\056\uff6a\116\170\122\176\127\203" +
    "\001\002\000\004\056\u010a\001\002\000\004\002\ufffb\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0108\000\004\007\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\103\010\001\001\000\006\006\011\013\012\001\001\000" +
    "\002\001\001\000\006\006\u0100\020\377\001\001\000\010" +
    "\006\020\014\014\015\017\001\001\000\002\001\001\000" +
    "\016\006\042\016\044\027\034\030\035\040\041\041\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\101\024\102\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\020\014\033\015\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\153\021\376\022\152\001\001\000\010\004\375\006" +
    "\115\031\117\001\001\000\010\006\020\014\374\015\017" +
    "\001\001\000\006\006\115\031\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\054\042\057\043\056\100" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\071\044\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\100\073\001\001\000\002\001\001\000\006" +
    "\006\071\044\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\054\042\100\043\056\100\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\100\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\111\005\112\006\115\031\117\100\113\001" +
    "\001\000\004\100\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\006" +
    "\364\015\365\032\363\001\001\000\002\001\001\000\016" +
    "\003\361\006\042\027\360\030\035\040\041\041\037\001" +
    "\001\000\006\006\121\035\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\127\036\124\037\126\001" +
    "\001\000\016\006\042\024\147\027\145\030\035\040\041" +
    "\041\037\001\001\000\002\001\001\000\006\006\131\025" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\131\025\134\001\001\000\002\001\001\000\004\100\136" +
    "\001\001\000\006\006\140\026\141\001\001\000\006\101" +
    "\144\102\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\127\036\143\037\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\153" +
    "\021\154\022\152\001\001\000\002\001\001\000\016\006" +
    "\042\024\163\027\145\030\035\040\041\041\037\001\001" +
    "\000\006\006\131\025\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\100\157\001\001\000\006\006\140\026\160\001\001\000" +
    "\002\001\001\000\010\006\153\021\162\022\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\006\172\045" +
    "\212\046\215\047\206\050\171\052\204\054\203\056\201" +
    "\057\200\060\177\065\174\066\213\070\214\071\165\072" +
    "\207\077\176\101\211\102\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\220\050\325" +
    "\052\204\054\203\056\201\057\200\060\177\072\207\077" +
    "\176\101\211\102\031\001\001\000\046\006\172\045\324" +
    "\046\215\047\206\050\171\052\204\054\203\056\201\057" +
    "\200\060\177\065\174\066\213\070\214\071\165\072\207" +
    "\077\176\101\211\102\031\001\001\000\002\001\001\000" +
    "\012\057\323\060\177\101\211\102\031\001\001\000\006" +
    "\006\220\072\322\001\001\000\002\001\001\000\010\006" +
    "\310\055\311\073\314\001\001\000\030\006\220\050\304" +
    "\052\204\054\203\056\201\057\200\060\177\072\207\077" +
    "\176\101\211\102\031\001\001\000\010\006\273\053\271" +
    "\075\276\001\001\000\010\006\264\051\262\076\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\057\257" +
    "\060\177\101\211\102\031\001\001\000\012\006\235\061" +
    "\231\064\234\074\232\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\006\220\050\217\052\204\054\203\056\201" +
    "\057\200\060\177\072\207\077\176\101\211\102\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\006\172\045" +
    "\225\046\215\047\206\050\171\052\204\054\203\056\201" +
    "\057\200\060\177\065\174\066\213\070\214\071\165\072" +
    "\207\077\176\101\211\102\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\042\027\230\030\035\040" +
    "\041\041\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\220\050\256\052\204\054\203\056\201\057" +
    "\200\060\177\072\207\077\176\101\211\102\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\006\244\050\243\052\204\054\203\056\201\057\200\060" +
    "\177\062\245\072\207\077\176\101\211\102\031\001\001" +
    "\000\002\001\001\000\006\006\251\063\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\220\050\253\052\204\054\203\056\201\057\200\060\177" +
    "\072\207\077\176\101\211\102\031\001\001\000\006\006" +
    "\251\063\255\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\220\052\267\054" +
    "\203\056\201\057\200\060\177\072\207\077\176\101\211" +
    "\102\031\001\001\000\010\006\264\051\270\076\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\006\220\054\302\056\201\057\200\060\177\072\207" +
    "\077\176\101\211\102\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\273\053\303" +
    "\075\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\006\220\056\320\057\200\060\177\072\207" +
    "\077\176\101\211\102\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\310\055\321" +
    "\073\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\006\172\045\330\046\215\047\206\050" +
    "\171\052\204\054\203\056\201\057\200\060\177\065\174" +
    "\066\213\070\214\071\165\072\207\077\176\101\211\102" +
    "\031\001\001\000\006\006\333\067\332\001\001\000\046" +
    "\006\172\045\335\046\215\047\206\050\171\052\204\054" +
    "\203\056\201\057\200\060\177\065\174\066\213\070\214" +
    "\071\165\072\207\077\176\101\211\102\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\006\172\045\340\046" +
    "\215\047\206\050\171\052\204\054\203\056\201\057\200" +
    "\060\177\065\174\066\213\070\214\071\165\072\207\077" +
    "\176\101\211\102\031\001\001\000\006\006\333\067\341" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\006\220\050\350\052\204\054\203\056\201\057" +
    "\200\060\177\072\207\077\176\101\211\102\031\001\001" +
    "\000\002\001\001\000\030\006\220\050\352\052\204\054" +
    "\203\056\201\057\200\060\177\072\207\077\176\101\211" +
    "\102\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\006\172\045\355\046\215\047\206\050\171\052\204" +
    "\054\203\056\201\057\200\060\177\065\174\066\213\070" +
    "\214\071\165\072\207\077\176\101\211\102\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\121\035\367\001\001\000\002\001\001\000\046\006\172" +
    "\045\371\046\215\047\206\050\171\052\204\054\203\056" +
    "\201\057\200\060\177\065\174\066\213\070\214\071\165" +
    "\072\207\077\176\101\211\102\031\001\001\000\002\001" +
    "\001\000\014\006\042\027\373\030\035\040\041\041\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\104\u0103\001\001\000\002" +
    "\001\001\000\010\006\153\021\u0102\022\152\001\001\000" +
    "\002\001\001\000\014\006\042\027\u0104\030\035\040\041" +
    "\041\037\001\001\000\004\012\u0106\001\001\000\004\105" +
    "\u0107\001\001\000\002\001\001\000\046\006\172\045\u0108" +
    "\046\215\047\206\050\171\052\204\054\203\056\201\057" +
    "\200\060\177\065\174\066\213\070\214\071\165\072\207" +
    "\077\176\101\211\102\031\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Generador_Codigo generador = new Generador_Codigo();

    public Generador_Codigo getGenerador() {
        return generador;
    }
    public String resultado="";
    public static ArrayList<Simbolo> tablaSimbolos = new ArrayList();

    public static boolean inCiclo=false;
    public static ArrayList<String> errores = new ArrayList<>();
    public static ArrayList<String> errSemantic = new ArrayList<>();
    public static ArrayList<String> lista_vars = new ArrayList<>();
    public static ArrayList<String[]> lista_params = new ArrayList<>();
    public static ArrayList<ArrayList<String>> funciones = new ArrayList<>();
    public static String funActual;
    public static String tipoActual;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);


        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), (linea+1)));
        //System.out.println(ScannerABC.errores.size());
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);

        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), linea+1));
     
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador_Sintactico$actions {



  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // empty ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("empty",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Boolean ::= PR_FALSE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Boolean ::= PR_TRUE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // literal ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // literal ::= L_CHAR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // literal ::= L_STRING 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // literal ::= L_FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // literal ::= L_INTEGER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Tipo ::= PR_REAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Tipo ::= PR_STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Tipo ::= PR_SHORTINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Tipo ::= PR_LONGINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Tipo ::= PR_CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Tipo ::= PR_INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Tipo ::= PR_BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = "BOOLEAN"; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OperadoresLogicosUnarios ::= O_NOT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosUnarios",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OperadoresLogicosBinarios ::= O_AND 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OperadoresLogicosBinarios ::= O_OR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OperadoresComparacion ::= O_LESS_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OperadoresComparacion ::= O_LESS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OperadoresComparacion ::= O_LESS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OperadoresComparacion ::= O_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OperadoresComparacion ::= O_GREATER_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OperadoresComparacion ::= O_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OperadorAsignacion ::= O_SLASH_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OperadorAsignacion ::= O_ASTERISK_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OperadorAsignacion ::= O_MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OperadorAsignacion ::= O_PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OperadorAsignacion ::= O_COLON_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OperadoresEnteros ::= O_DIV 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OperadoresEnteros ::= O_MOD 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OperadoresEnteros ::= O_SLASH 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OperadoresEnteros ::= O_ASTERISK 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OperadoresEnteros ::= O_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OperadoresEnteros ::= O_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IncrementoDecremento ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IncrementoDecremento ::= O_MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IncrementoDecremento ::= O_PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // For ::= PR_FOR error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion FOR Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // For ::= PR_FOR IDENTIFICADOR O_COLON_EQUALS Expresion PR_TO Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // While ::= PR_WHILE error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion WHILE Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",54, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // While ::= PR_WHILE Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",54, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Else ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Else ::= PR_ELSE Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // rrr ::= PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rrr",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // rrr ::= Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rrr",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // rrr ::= Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rrr",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // rrr ::= PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rrr",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // IfThenElse ::= PR_IF error PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // IfThenElse ::= PR_IF Expresion error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END, Espera un PR_THEN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // IfThenElse ::= PR_IF Expresion PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // InstruccionSC ::= error O_SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion sc Recuperado con O_SEMICOLON");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // InstruccionSC ::= Expresion O_SEMICOLON 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // InstruccionBE ::= error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccionbe Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // InstruccionBE ::= For 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // InstruccionBE ::= While 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // InstruccionBE ::= IfThenElse 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Instruccion ::= InstruccionSC 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Instruccion ::= InstruccionBE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ListaParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ListaParametros ::= O_COMMA error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix: Expresion esperada despues de la coma.");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ListaParametros ::= O_COMMA Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LParametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // LParametro ::= Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExpresionAsignacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExpresionAsignacion ::= OperadorAsignacion Expresion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expresion7 ::= ExpresionAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expresion6 ::= literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expresion6 ::= IDENTIFICADOR Expresion7 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expresion5 ::= Expresion6 IncrementoDecremento 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion5",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expresion4 ::= Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expresion4 ::= OperadoresLogicosUnarios Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expresion4 ::= IncrementoDecremento Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExpresionOperadoresEnteros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExpresionOperadoresEnteros ::= OperadoresEnteros Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expresion3 ::= Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExpresionOperadoresComparacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExpresionOperadoresComparacion ::= OperadoresComparacion Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expresion2 ::= Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExpresionOperadoresLogicos ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpresionOperadoresLogicos ::= OperadoresLogicosBinarios Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expresion ::= Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Instrucciones ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Instrucciones ::= Instruccion Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // masParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // masParametros ::= O_COMMA Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Parametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Parametro ::= Tipo error 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros recuperado en Parametro"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Parametro ::= Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // kk ::= r 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("kk",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // kk ::= Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("kk",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS error kk 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros2"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VariableFuncion ::= error ErroresVariables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con ErroresVariables Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VariableFuncion",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VariableFuncion ::= IDENTIFICADOR Identificadores O_COLON Tipo Inicializar O_SEMICOLON VariablesFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VariableFuncion",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VariablesFuncion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VariablesFuncion",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VariablesFuncion ::= VariableFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VariablesFuncion",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SeccionVariablesFuncion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariablesFuncion",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SeccionVariablesFuncion ::= PR_VAR VariablesFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariablesFuncion",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ErrorConstanteFuncion ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstanteFuncion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ErrorConstanteFuncion ::= PR_VAR VariablesFuncion 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstanteFuncion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ErrorConstanteFuncion ::= O_SEMICOLON ConstantesFuncion 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstanteFuncion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ConstanteFuncion ::= error ErrorConstante 
            {
              Object RESULT =null;
		System.out.println("Error");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ConstanteFuncion",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ConstanteFuncion ::= IDENTIFICADOR O_EQUALS literal O_SEMICOLON ConstantesFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ConstanteFuncion",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ConstantesFuncion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ConstantesFuncion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ConstantesFuncion ::= Constante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ConstantesFuncion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SeccionConstantesFuncion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantesFuncion",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SeccionConstantesFuncion ::= PR_CONST ConstantesFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantesFuncion",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rr ::= Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rr",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rr ::= PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rr",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // r ::= error rr 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // r ::= SeccionConstantesFuncion SeccionVariablesFuncion PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Rutina ::= EncabezadoFuncion r 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Rutina ::= EncabezadoProcedimiento SeccionConstantesFuncion SeccionVariablesFuncion PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Rutinas ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Rutinas ::= Rutina 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Inicializar ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Inicializar ::= O_EQUALS literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Identificadores ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Identificadores ::= O_COMMA IDENTIFICADOR Identificadores 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ErroresVariables ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ErroresVariables ::= O_SEMICOLON Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con O_SEMICOLON Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Variable ::= error ErroresVariables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con ErroresVariables Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Variable ::= IDENTIFICADOR Identificadores O_COLON Tipo Inicializar O_SEMICOLON Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Variables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Variables ::= Variable 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SeccionVariables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SeccionVariables ::= PR_VAR Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ErrorConstante ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ErrorConstante ::= PR_VAR Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ErrorConstante ::= O_SEMICOLON Constantes 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Constante ::= error ErrorConstante 
            {
              Object RESULT =null;
		System.out.println("Error");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Constante ::= IDENTIFICADOR O_EQUALS literal O_SEMICOLON Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Constantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Constantes ::= Constante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SeccionConstantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SeccionConstantes ::= PR_CONST Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EntradaPrograma ::= PR_BEGIN NT$2 Instrucciones PR_END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		 parser.getGenerador().fin_programa(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EntradaPrograma",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().inicio_programa(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",67, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la estructura del programa");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= PR_PROGRAM IDENTIFICADOR NT$0 SeccionConstantes SeccionVariables NT$1 Rutinas EntradaPrograma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		 System.out.println(parser.getGenerador().getCodigo()); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
 parser.getGenerador().finalizar_variables(); parser.getGenerador().inicializar_pila(); parser.getGenerador().iniciar_codigo(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",66, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().iniciar_variables(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",65, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

