
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 27 04:06:11 CST 2018
//----------------------------------------------------

package Compilador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Analisis_Semantico.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 27 04:06:11 CST 2018
  */
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\224\000\002\002\004\000\002\107\002\000\002\110" +
    "\002\000\002\007\012\000\002\007\003\000\002\111\002" +
    "\000\002\013\006\000\002\015\004\000\002\015\003\000" +
    "\002\017\003\000\002\017\003\000\002\020\007\000\002" +
    "\020\004\000\002\021\004\000\002\021\004\000\002\021" +
    "\003\000\002\023\004\000\002\023\003\000\002\024\003" +
    "\000\002\024\003\000\002\112\002\000\002\025\012\000" +
    "\002\025\004\000\002\027\004\000\002\027\003\000\002" +
    "\030\005\000\002\030\003\000\002\031\004\000\002\031" +
    "\003\000\002\032\003\000\002\032\003\000\002\033\007" +
    "\000\002\033\007\000\002\003\003\000\002\003\003\000" +
    "\002\043\007\000\002\043\007\000\002\044\011\000\002" +
    "\044\011\000\002\044\011\000\002\005\003\000\002\005" +
    "\003\000\002\045\003\000\002\113\002\000\002\046\006" +
    "\000\002\046\004\000\002\046\003\000\002\114\002\000" +
    "\002\047\007\000\002\047\003\000\002\050\004\000\002" +
    "\050\003\000\002\053\004\000\002\054\005\000\002\054" +
    "\003\000\002\055\004\000\002\056\005\000\002\056\003" +
    "\000\002\057\004\000\002\115\002\000\002\116\002\000" +
    "\002\060\007\000\002\060\003\000\002\061\004\000\002" +
    "\061\004\000\002\061\003\000\002\062\004\000\002\063" +
    "\004\000\002\063\005\000\002\063\005\000\002\063\003" +
    "\000\002\064\003\000\002\117\002\000\002\064\005\000" +
    "\002\065\004\000\002\065\004\000\002\070\004\000\002" +
    "\070\003\000\002\066\004\000\002\066\003\000\002\067" +
    "\005\000\002\067\004\000\002\067\003\000\002\014\003" +
    "\000\002\014\003\000\002\071\003\000\002\071\003\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\004\000\002\052\004\000\002\052\004\000\002\120" +
    "\002\000\002\072\005\000\002\121\002\000\002\016\010" +
    "\000\002\016\005\000\002\016\007\000\002\122\002\000" +
    "\002\073\005\000\002\073\003\000\002\123\002\000\002" +
    "\124\002\000\002\074\012\000\002\074\005\000\002\075" +
    "\014\000\002\075\005\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\100\003\000\002\100\003\000\002\100" +
    "\003\000\002\100\003\000\002\100\003\000\002\101\003" +
    "\000\002\101\003\000\002\101\003\000\002\101\003\000" +
    "\002\101\003\000\002\101\003\000\002\102\003\000\002" +
    "\102\003\000\002\103\003\000\002\104\003\000\002\104" +
    "\003\000\002\104\003\000\002\104\003\000\002\104\003" +
    "\000\002\104\003\000\002\104\003\000\002\104\003\000" +
    "\002\105\003\000\002\105\003\000\002\105\003\000\002" +
    "\105\003\000\002\105\003\000\002\106\003\000\002\106" +
    "\003\000\002\012\003\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\006\003\004\032\005\001\002\000\004\002" +
    "\ufffd\001\002\000\004\010\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\014\015\000\033" +
    "\000\052\000\064\000\071\000\001\002\000\014\015\uff6e" +
    "\033\uff6e\052\uff6e\064\014\071\uff6e\001\002\000\012\015" +
    "\ufff9\033\ufff9\052\ufff9\071\ufff9\001\002\000\012\015\371" +
    "\033\uff6e\052\uff6e\071\uff6e\001\002\000\016\003\016\010" +
    "\017\015\uff6e\033\uff6e\052\uff6e\071\uff6e\001\002\000\012" +
    "\015\ufffa\033\ufffa\052\ufffa\071\ufffa\001\002\000\014\015" +
    "\041\033\047\052\045\071\uff6e\110\042\001\002\000\076" +
    "\003\uff6f\021\uff6f\022\uff6f\035\uff6f\041\uff6f\062\uff6f\063" +
    "\uff6f\073\uff6f\100\uff6f\101\uff6f\102\uff6f\103\uff6f\104\uff6f" +
    "\107\uff6f\110\uff6f\111\uff6f\112\uff6f\113\uff6f\114\uff6f\116" +
    "\uff6f\117\uff6f\120\uff6f\121\uff6f\122\uff6f\123\uff6f\124\uff6f" +
    "\125\uff6f\126\uff6f\127\uff6f\130\uff6f\001\002\000\012\015" +
    "\ufff8\033\ufff8\052\ufff8\071\ufff8\001\002\000\012\015\ufff7" +
    "\033\ufff7\052\ufff7\071\ufff7\001\002\000\004\102\023\001" +
    "\002\000\016\004\025\005\033\006\031\007\024\020\027" +
    "\056\030\001\002\000\060\003\uff74\021\uff74\022\uff74\035" +
    "\uff74\041\uff74\062\uff74\063\uff74\073\uff74\100\uff74\101\uff74" +
    "\102\uff74\103\uff74\104\uff74\107\uff74\110\uff74\114\uff74\117" +
    "\uff74\120\uff74\121\uff74\123\uff74\124\uff74\126\uff74\127\uff74" +
    "\001\002\000\060\003\uff76\021\uff76\022\uff76\035\uff76\041" +
    "\uff76\062\uff76\063\uff76\073\uff76\100\uff76\101\uff76\102\uff76" +
    "\103\uff76\104\uff76\107\uff76\110\uff76\114\uff76\117\uff76\120" +
    "\uff76\121\uff76\123\uff76\124\uff76\126\uff76\127\uff76\001\002" +
    "\000\004\110\034\001\002\000\060\003\uff71\021\uff71\022" +
    "\uff71\035\uff71\041\uff71\062\uff71\063\uff71\073\uff71\100\uff71" +
    "\101\uff71\102\uff71\103\uff71\104\uff71\107\uff71\110\uff71\114" +
    "\uff71\117\uff71\120\uff71\121\uff71\123\uff71\124\uff71\126\uff71" +
    "\127\uff71\001\002\000\060\003\uff70\021\uff70\022\uff70\035" +
    "\uff70\041\uff70\062\uff70\063\uff70\073\uff70\100\uff70\101\uff70" +
    "\102\uff70\103\uff70\104\uff70\107\uff70\110\uff70\114\uff70\117" +
    "\uff70\120\uff70\121\uff70\123\uff70\124\uff70\126\uff70\127\uff70" +
    "\001\002\000\060\003\uff75\021\uff75\022\uff75\035\uff75\041" +
    "\uff75\062\uff75\063\uff75\073\uff75\100\uff75\101\uff75\102\uff75" +
    "\103\uff75\104\uff75\107\uff75\110\uff75\114\uff75\117\uff75\120" +
    "\uff75\121\uff75\123\uff75\124\uff75\126\uff75\127\uff75\001\002" +
    "\000\060\003\uff72\021\uff72\022\uff72\035\uff72\041\uff72\062" +
    "\uff72\063\uff72\073\uff72\100\uff72\101\uff72\102\uff72\103\uff72" +
    "\104\uff72\107\uff72\110\uff72\114\uff72\117\uff72\120\uff72\121" +
    "\uff72\123\uff72\124\uff72\126\uff72\127\uff72\001\002\000\060" +
    "\003\uff73\021\uff73\022\uff73\035\uff73\041\uff73\062\uff73\063" +
    "\uff73\073\uff73\100\uff73\101\uff73\102\uff73\103\uff73\104\uff73" +
    "\107\uff73\110\uff73\114\uff73\117\uff73\120\uff73\121\uff73\123" +
    "\uff73\124\uff73\126\uff73\127\uff73\001\002\000\016\003\016" +
    "\010\017\015\uff6e\033\uff6e\052\uff6e\071\uff6e\001\002\000" +
    "\012\015\ufff6\033\ufff6\052\ufff6\071\ufff6\001\002\000\012" +
    "\015\ufff2\033\ufff2\052\ufff2\071\ufff2\001\002\000\012\015" +
    "\uffe4\033\uffe4\052\uffe4\071\uffe4\001\002\000\004\071\363" +
    "\001\002\000\016\003\334\010\017\015\uff6e\033\uff6e\052" +
    "\uff6e\071\uff6e\001\002\000\016\003\016\010\017\015\uff6e" +
    "\033\uff6e\052\uff6e\071\uff6e\001\002\000\004\071\123\001" +
    "\002\000\012\015\uffe3\033\uffe3\052\uffe3\071\uffe3\001\002" +
    "\000\004\010\017\001\002\000\012\015\ufff5\033\ufff5\052" +
    "\ufff5\071\ufff5\001\002\000\004\010\050\001\002\000\004" +
    "\130\102\001\002\000\004\130\052\001\002\000\024\023" +
    "\065\024\055\030\053\042\061\043\056\045\066\065\057" +
    "\070\064\127\uff6e\001\002\000\014\003\uff78\010\uff78\071" +
    "\uff78\102\uff78\110\uff78\001\002\000\006\003\070\010\uffd6" +
    "\001\002\000\014\003\uff7a\010\uff7a\071\uff7a\102\uff7a\110" +
    "\uff7a\001\002\000\014\003\uff77\010\uff77\071\uff77\102\uff77" +
    "\110\uff77\001\002\000\014\003\uff7c\010\uff7c\071\uff7c\102" +
    "\uff7c\110\uff7c\001\002\000\004\127\uffd3\001\002\000\014" +
    "\003\uff7b\010\uff7b\071\uff7b\102\uff7b\110\uff7b\001\002\000" +
    "\004\127\uffd7\001\002\000\004\127\067\001\002\000\014" +
    "\003\uff7e\010\uff7e\071\uff7e\102\uff7e\110\uff7e\001\002\000" +
    "\014\003\uff79\010\uff79\071\uff79\102\uff79\110\uff79\001\002" +
    "\000\014\003\uff7d\010\uff7d\071\uff7d\102\uff7d\110\uff7d\001" +
    "\002\000\004\071\uffde\001\002\000\004\127\uffd4\001\002" +
    "\000\004\010\017\001\002\000\006\121\075\127\uff6e\001" +
    "\002\000\004\127\uffd5\001\002\000\004\127\uffd0\001\002" +
    "\000\022\023\065\024\055\030\053\042\061\043\056\045" +
    "\066\065\057\070\064\001\002\000\004\010\uffd2\001\002" +
    "\000\004\010\017\001\002\000\006\121\075\127\uff6e\001" +
    "\002\000\004\127\uffd1\001\002\000\004\003\103\001\002" +
    "\000\004\127\104\001\002\000\004\071\uffdd\001\002\000" +
    "\004\130\106\001\002\000\026\003\110\023\065\024\055" +
    "\030\053\042\061\043\056\045\066\065\057\070\064\127" +
    "\uff6e\001\002\000\004\127\114\001\002\000\004\127\111" +
    "\001\002\000\004\112\112\001\002\000\022\023\065\024" +
    "\055\030\053\042\061\043\056\045\066\065\057\070\064" +
    "\001\002\000\004\071\uffdb\001\002\000\006\003\115\112" +
    "\116\001\002\000\022\023\065\024\055\030\053\042\061" +
    "\043\056\045\066\065\057\070\064\001\002\000\022\023" +
    "\065\024\055\030\053\042\061\043\056\045\066\065\057" +
    "\070\064\001\002\000\004\071\uffdc\001\002\000\004\071" +
    "\uffd8\001\002\000\004\071\uffda\001\002\000\004\071\uffd9" +
    "\001\002\000\042\003\145\004\025\005\033\006\031\007" +
    "\024\010\017\014\155\020\027\037\125\050\132\054\127" +
    "\056\030\057\uff6e\117\126\123\134\130\142\001\002\000" +
    "\044\003\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\014\uffa8\020\uffa8\037\uffa8\050\uffa8\054\uffa8\056\uffa8\057" +
    "\uffa8\060\uffa8\117\uffa8\123\uffa8\130\uffa8\001\002\000\022" +
    "\004\uff7f\005\uff7f\006\uff7f\007\uff7f\010\uff7f\020\uff7f\056" +
    "\uff7f\130\uff7f\001\002\000\076\003\uff94\004\uff94\005\uff94" +
    "\006\uff94\007\uff94\010\uff94\020\uff94\021\uff94\022\uff94\035" +
    "\uff94\041\uff94\056\uff94\062\uff94\063\uff94\073\uff94\100\uff94" +
    "\101\uff94\102\uff94\103\uff94\104\uff94\107\uff94\110\uff94\114" +
    "\uff94\117\uff94\120\uff94\123\uff94\124\uff94\126\uff94\127\uff94" +
    "\130\uff94\001\002\000\006\003\320\010\321\001\002\000" +
    "\004\110\317\001\002\000\026\004\uff93\005\uff93\006\uff93" +
    "\007\uff93\010\uff93\020\uff93\056\uff93\057\uffce\060\uffce\130" +
    "\uff93\001\002\000\032\003\uffa4\004\uffa4\005\uffa4\006\uffa4" +
    "\007\uffa4\010\uffa4\020\uffa4\037\uffa4\056\uffa4\117\uffa4\123" +
    "\uffa4\130\uffa4\001\002\000\044\003\145\004\025\005\033" +
    "\006\031\007\024\010\017\014\155\020\027\037\125\050" +
    "\132\054\127\056\030\057\uff6e\060\uff6e\117\126\123\134" +
    "\130\142\001\002\000\076\003\uff95\004\uff95\005\uff95\006" +
    "\uff95\007\uff95\010\uff95\020\uff95\021\uff95\022\uff95\035\uff95" +
    "\041\uff95\056\uff95\062\uff95\063\uff95\073\uff95\100\uff95\101" +
    "\uff95\102\uff95\103\uff95\104\uff95\107\uff95\110\uff95\114\uff95" +
    "\117\uff95\120\uff95\123\uff95\124\uff95\126\uff95\127\uff95\130" +
    "\uff95\001\002\000\072\003\uff6e\021\uff6e\022\uff6e\035\uff6e" +
    "\041\uff6e\062\uff6e\063\uff6e\073\uff6e\100\uff6e\101\uff6e\102" +
    "\uff6e\103\uff6e\104\uff6e\107\uff6e\110\uff6e\111\246\113\247" +
    "\114\uff6e\116\243\117\uff6e\120\uff6e\122\252\123\uff6e\124" +
    "\uff6e\125\250\126\uff6e\127\uff6e\130\251\001\002\000\022" +
    "\004\025\005\033\006\031\007\024\010\017\020\027\056" +
    "\030\130\142\001\002\000\056\003\uff6e\021\uff6e\022\uff6e" +
    "\035\uff6e\041\uff6e\062\uff6e\063\uff6e\073\uff6e\100\uff6e\101" +
    "\uff6e\102\uff6e\103\uff6e\104\uff6e\107\uff6e\110\uff6e\114\uff6e" +
    "\117\126\120\uff6e\123\134\124\uff6e\126\uff6e\127\uff6e\001" +
    "\002\000\056\003\uffc0\021\uffc0\022\uffc0\035\uffc0\041\uffc0" +
    "\062\uffc0\063\uffc0\073\uffc0\100\uffc0\101\uffc0\102\uffc0\103" +
    "\uffc0\104\uffc0\107\uffc0\110\uffc0\114\uffc0\117\uffc0\120\uffc0" +
    "\123\uffc0\124\uffc0\126\uffc0\127\uffc0\001\002\000\056\003" +
    "\uff6e\021\uff6e\022\uff6e\035\uff6e\041\226\062\uff6e\063\232" +
    "\073\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e\107" +
    "\uff6e\110\uff6e\114\231\117\uff6e\120\230\123\uff6e\124\225" +
    "\126\222\127\uff6e\001\002\000\030\004\025\005\033\006" +
    "\031\007\024\010\017\020\027\037\125\056\030\117\126" +
    "\123\134\130\142\001\002\000\056\003\uff6e\021\uff6e\022" +
    "\uff6e\035\uff6e\041\uff6e\062\uff6e\063\uff6e\073\uff6e\100\213" +
    "\101\207\102\205\103\210\104\214\107\212\110\uff6e\114" +
    "\uff6e\117\uff6e\120\uff6e\123\uff6e\124\uff6e\126\uff6e\127\uff6e" +
    "\001\002\000\056\003\uff6e\021\uff6e\022\uff6e\035\200\041" +
    "\uff6e\062\uff6e\063\uff6e\073\176\100\uff6e\101\uff6e\102\uff6e" +
    "\103\uff6e\104\uff6e\107\uff6e\110\uff6e\114\uff6e\117\uff6e\120" +
    "\uff6e\123\uff6e\124\uff6e\126\uff6e\127\uff6e\001\002\000\006" +
    "\057\174\110\173\001\002\000\022\004\025\005\033\006" +
    "\031\007\024\010\017\020\027\056\030\130\142\001\002" +
    "\000\044\003\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010" +
    "\uffab\014\uffab\020\uffab\037\uffab\050\uffab\054\uffab\056\uffab" +
    "\057\uffab\060\uffab\117\uffab\123\uffab\130\uffab\001\002\000" +
    "\056\003\uffbb\021\uffbb\022\uffbb\035\uffbb\041\uffbb\062\uffbb" +
    "\063\uffbb\073\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104" +
    "\uffbb\107\uffbb\110\uffbb\114\uffbb\117\uffbb\120\uffbb\123\uffbb" +
    "\124\uffbb\126\uffbb\127\uffbb\001\002\000\004\057\170\001" +
    "\002\000\044\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\014\uffa9\020\uffa9\037\uffa9\050\uffa9\054\uffa9\056" +
    "\uffa9\057\uffa9\060\uffa9\117\uffa9\123\uffa9\130\uffa9\001\002" +
    "\000\044\003\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010" +
    "\uffaa\014\uffaa\020\uffaa\037\uffaa\050\uffaa\054\uffaa\056\uffaa" +
    "\057\uffaa\060\uffaa\117\uffaa\123\uffaa\130\uffaa\001\002\000" +
    "\044\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\014\uffac\020\uffac\037\uffac\050\uffac\054\uffac\056\uffac\057" +
    "\uffac\060\uffac\117\uffac\123\uffac\130\uffac\001\002\000\032" +
    "\003\156\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\020" +
    "\uff9b\037\uff9b\056\uff9b\117\uff9b\123\uff9b\130\uff9b\001\002" +
    "\000\004\057\167\001\002\000\030\004\025\005\033\006" +
    "\031\007\024\010\017\020\027\037\125\056\030\117\126" +
    "\123\134\130\142\001\002\000\004\062\162\001\002\000" +
    "\076\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93" +
    "\020\uff93\021\uff93\022\uff93\035\uff93\041\uff93\056\uff93\062" +
    "\uff93\063\uff93\073\uff93\100\uff93\101\uff93\102\uff93\103\uff93" +
    "\104\uff93\107\uff93\110\uff93\114\uff93\117\uff93\120\uff93\123" +
    "\uff93\124\uff93\126\uff93\127\uff93\130\uff93\001\002\000\004" +
    "\071\uff9a\001\002\000\004\071\164\001\002\000\042\003" +
    "\145\004\025\005\033\006\031\007\024\010\017\014\155" +
    "\020\027\037\125\050\132\054\127\056\030\057\uff6e\117" +
    "\126\123\134\130\142\001\002\000\004\057\166\001\002" +
    "\000\044\003\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\014\uff99\020\uff99\037\uff99\050\uff99\054\uff99\056\uff99" +
    "\057\uff99\060\uff99\117\uff99\123\uff99\130\uff99\001\002\000" +
    "\044\003\uff98\004\uff98\005\uff98\006\uff98\007\uff98\010\uff98" +
    "\014\uff98\020\uff98\037\uff98\050\uff98\054\uff98\056\uff98\057" +
    "\uff98\060\uff98\117\uff98\123\uff98\130\uff98\001\002\000\012" +
    "\015\uff6e\033\047\052\045\071\uff6e\001\002\000\012\015" +
    "\uffe2\033\uffe2\052\uffe2\071\uffe2\001\002\000\056\003\uffc2" +
    "\021\uffc2\022\uffc2\035\uffc2\041\uffc2\062\uffc2\063\uffc2\073" +
    "\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\107\uffc2" +
    "\110\uffc2\114\uffc2\117\uffc2\120\uffc2\123\uffc2\124\uffc2\126" +
    "\uffc2\127\uffc2\001\002\000\044\003\uffa5\004\uffa5\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\014\uffa5\020\uffa5\037\uffa5\050" +
    "\uffa5\054\uffa5\056\uffa5\057\uffa5\060\uffa5\117\uffa5\123\uffa5" +
    "\130\uffa5\001\002\000\044\003\uffa7\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\014\uffa7\020\uffa7\037\uffa7\050\uffa7" +
    "\054\uffa7\056\uffa7\057\uffa7\060\uffa7\117\uffa7\123\uffa7\130" +
    "\uffa7\001\002\000\056\003\uffcd\021\uffcd\022\uffcd\035\uffcd" +
    "\041\uffcd\062\uffcd\063\uffcd\073\uffcd\100\uffcd\101\uffcd\102" +
    "\uffcd\103\uffcd\104\uffcd\107\uffcd\110\uffcd\114\uffcd\117\uffcd" +
    "\120\uffcd\123\uffcd\124\uffcd\126\uffcd\127\uffcd\001\002\000" +
    "\030\004\uff80\005\uff80\006\uff80\007\uff80\010\uff80\020\uff80" +
    "\037\uff80\056\uff80\117\uff80\123\uff80\130\uff80\001\002\000" +
    "\056\003\uffcb\021\uffcb\022\uffcb\035\uffcb\041\uffcb\062\uffcb" +
    "\063\uffcb\073\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104" +
    "\uffcb\107\uffcb\110\uffcb\114\uffcb\117\uffcb\120\uffcb\123\uffcb" +
    "\124\uffcb\126\uffcb\127\uffcb\001\002\000\030\004\uff81\005" +
    "\uff81\006\uff81\007\uff81\010\uff81\020\uff81\037\uff81\056\uff81" +
    "\117\uff81\123\uff81\130\uff81\001\002\000\030\004\025\005" +
    "\033\006\031\007\024\010\017\020\027\037\125\056\030" +
    "\117\126\123\134\130\142\001\002\000\056\003\uff6e\021" +
    "\uff6e\022\uff6e\035\200\041\uff6e\062\uff6e\063\uff6e\073\176" +
    "\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e\107\uff6e\110" +
    "\uff6e\114\uff6e\117\uff6e\120\uff6e\123\uff6e\124\uff6e\126\uff6e" +
    "\127\uff6e\001\002\000\056\003\uffcc\021\uffcc\022\uffcc\035" +
    "\uffcc\041\uffcc\062\uffcc\063\uffcc\073\uffcc\100\uffcc\101\uffcc" +
    "\102\uffcc\103\uffcc\104\uffcc\107\uffcc\110\uffcc\114\uffcc\117" +
    "\uffcc\120\uffcc\123\uffcc\124\uffcc\126\uffcc\127\uffcc\001\002" +
    "\000\056\003\uffca\021\uffca\022\uffca\035\uffca\041\uffca\062" +
    "\uffca\063\uffca\073\uffca\100\uffca\101\uffca\102\uffca\103\uffca" +
    "\104\uffca\107\uffca\110\uffca\114\uffca\117\uffca\120\uffca\123" +
    "\uffca\124\uffca\126\uffca\127\uffca\001\002\000\030\004\uff87" +
    "\005\uff87\006\uff87\007\uff87\010\uff87\020\uff87\037\uff87\056" +
    "\uff87\117\uff87\123\uff87\130\uff87\001\002\000\056\003\uffc8" +
    "\021\uffc8\022\uffc8\035\uffc8\041\uffc8\062\uffc8\063\uffc8\073" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\107\uffc8" +
    "\110\uffc8\114\uffc8\117\uffc8\120\uffc8\123\uffc8\124\uffc8\126" +
    "\uffc8\127\uffc8\001\002\000\030\004\uff85\005\uff85\006\uff85" +
    "\007\uff85\010\uff85\020\uff85\037\uff85\056\uff85\117\uff85\123" +
    "\uff85\130\uff85\001\002\000\030\004\uff82\005\uff82\006\uff82" +
    "\007\uff82\010\uff82\020\uff82\037\uff82\056\uff82\117\uff82\123" +
    "\uff82\130\uff82\001\002\000\030\004\025\005\033\006\031" +
    "\007\024\010\017\020\027\037\125\056\030\117\126\123" +
    "\134\130\142\001\002\000\030\004\uff83\005\uff83\006\uff83" +
    "\007\uff83\010\uff83\020\uff83\037\uff83\056\uff83\117\uff83\123" +
    "\uff83\130\uff83\001\002\000\030\004\uff86\005\uff86\006\uff86" +
    "\007\uff86\010\uff86\020\uff86\037\uff86\056\uff86\117\uff86\123" +
    "\uff86\130\uff86\001\002\000\030\004\uff84\005\uff84\006\uff84" +
    "\007\uff84\010\uff84\020\uff84\037\uff84\056\uff84\117\uff84\123" +
    "\uff84\130\uff84\001\002\000\056\003\uff6e\021\uff6e\022\uff6e" +
    "\035\uff6e\041\uff6e\062\uff6e\063\uff6e\073\uff6e\100\213\101" +
    "\207\102\205\103\210\104\214\107\212\110\uff6e\114\uff6e" +
    "\117\uff6e\120\uff6e\123\uff6e\124\uff6e\126\uff6e\127\uff6e\001" +
    "\002\000\056\003\uffc9\021\uffc9\022\uffc9\035\uffc9\041\uffc9" +
    "\062\uffc9\063\uffc9\073\uffc9\100\uffc9\101\uffc9\102\uffc9\103" +
    "\uffc9\104\uffc9\107\uffc9\110\uffc9\114\uffc9\117\uffc9\120\uffc9" +
    "\123\uffc9\124\uffc9\126\uffc9\127\uffc9\001\002\000\006\003" +
    "\220\127\221\001\002\000\056\003\uffbc\021\uffbc\022\uffbc" +
    "\035\uffbc\041\uffbc\062\uffbc\063\uffbc\073\uffbc\100\uffbc\101" +
    "\uffbc\102\uffbc\103\uffbc\104\uffbc\107\uffbc\110\uffbc\114\uffbc" +
    "\117\uffbc\120\uffbc\123\uffbc\124\uffbc\126\uffbc\127\uffbc\001" +
    "\002\000\056\003\uffbd\021\uffbd\022\uffbd\035\uffbd\041\uffbd" +
    "\062\uffbd\063\uffbd\073\uffbd\100\uffbd\101\uffbd\102\uffbd\103" +
    "\uffbd\104\uffbd\107\uffbd\110\uffbd\114\uffbd\117\uffbd\120\uffbd" +
    "\123\uffbd\124\uffbd\126\uffbd\127\uffbd\001\002\000\030\004" +
    "\uff90\005\uff90\006\uff90\007\uff90\010\uff90\020\uff90\037\uff90" +
    "\056\uff90\117\uff90\123\uff90\130\uff90\001\002\000\056\003" +
    "\uffc3\021\uffc3\022\uffc3\035\uffc3\041\uffc3\062\uffc3\063\uffc3" +
    "\073\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3\107" +
    "\uffc3\110\uffc3\114\uffc3\117\uffc3\120\uffc3\123\uffc3\124\uffc3" +
    "\126\uffc3\127\uffc3\001\002\000\056\003\uffc7\021\uffc7\022" +
    "\uffc7\035\uffc7\041\uffc7\062\uffc7\063\uffc7\073\uffc7\100\uffc7" +
    "\101\uffc7\102\uffc7\103\uffc7\104\uffc7\107\uffc7\110\uffc7\114" +
    "\uffc7\117\uffc7\120\uffc7\123\uffc7\124\uffc7\126\uffc7\127\uffc7" +
    "\001\002\000\030\004\uff92\005\uff92\006\uff92\007\uff92\010" +
    "\uff92\020\uff92\037\uff92\056\uff92\117\uff92\123\uff92\130\uff92" +
    "\001\002\000\030\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\020\uff8e\037\uff8e\056\uff8e\117\uff8e\123\uff8e\130\uff8e" +
    "\001\002\000\030\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\020\uffc6\037\uffc6\056\uffc6\117\uffc6\123\uffc6\130\uffc6" +
    "\001\002\000\030\004\uff91\005\uff91\006\uff91\007\uff91\010" +
    "\uff91\020\uff91\037\uff91\056\uff91\117\uff91\123\uff91\130\uff91" +
    "\001\002\000\030\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010" +
    "\uff8f\020\uff8f\037\uff8f\056\uff8f\117\uff8f\123\uff8f\130\uff8f" +
    "\001\002\000\030\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\020\uff8d\037\uff8d\056\uff8d\117\uff8d\123\uff8d\130\uff8d" +
    "\001\002\000\030\004\025\005\033\006\031\007\024\010" +
    "\017\020\027\037\125\056\030\117\126\123\134\130\142" +
    "\001\002\000\056\003\uffc5\021\uffc5\022\uffc5\035\uffc5\041" +
    "\uffc5\062\uffc5\063\uffc5\073\uffc5\100\uffc5\101\uffc5\102\uffc5" +
    "\103\uffc5\104\uffc5\107\uffc5\110\uffc5\114\uffc5\117\uffc5\120" +
    "\uffc5\123\uffc5\124\uffc5\126\uffc5\127\uffc5\001\002\000\056" +
    "\003\uff6e\021\uff6e\022\uff6e\035\uff6e\041\226\062\uff6e\063" +
    "\232\073\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e" +
    "\107\uff6e\110\uff6e\114\231\117\uff6e\120\230\123\uff6e\124" +
    "\225\126\222\127\uff6e\001\002\000\056\003\uffc4\021\uffc4" +
    "\022\uffc4\035\uffc4\041\uffc4\062\uffc4\063\uffc4\073\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\107\uffc4\110\uffc4" +
    "\114\uffc4\117\uffc4\120\uffc4\123\uffc4\124\uffc4\126\uffc4\127" +
    "\uffc4\001\002\000\056\003\uffbf\021\uffbf\022\uffbf\035\uffbf" +
    "\041\uffbf\062\uffbf\063\uffbf\073\uffbf\100\uffbf\101\uffbf\102" +
    "\uffbf\103\uffbf\104\uffbf\107\uffbf\110\uffbf\114\uffbf\117\uffbf" +
    "\120\uffbf\123\uffbf\124\uffbf\126\uffbf\127\uffbf\001\002\000" +
    "\056\003\uffc1\021\uffc1\022\uffc1\035\uffc1\041\uffc1\062\uffc1" +
    "\063\uffc1\073\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\104" +
    "\uffc1\107\uffc1\110\uffc1\114\uffc1\117\uffc1\120\uffc1\123\uffc1" +
    "\124\uffc1\126\uffc1\127\uffc1\001\002\000\056\003\uffbe\021" +
    "\uffbe\022\uffbe\035\uffbe\041\uffbe\062\uffbe\063\uffbe\073\uffbe" +
    "\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104\uffbe\107\uffbe\110" +
    "\uffbe\114\uffbe\117\uffbe\120\uffbe\123\uffbe\124\uffbe\126\uffbe" +
    "\127\uffbe\001\002\000\030\004\025\005\033\006\031\007" +
    "\024\010\017\020\027\037\125\056\030\117\126\123\134" +
    "\130\142\001\002\000\030\004\uff8a\005\uff8a\006\uff8a\007" +
    "\uff8a\010\uff8a\020\uff8a\037\uff8a\056\uff8a\117\uff8a\123\uff8a" +
    "\130\uff8a\001\002\000\056\003\uffba\021\uffba\022\uffba\035" +
    "\uffba\041\uffba\062\uffba\063\uffba\073\uffba\100\uffba\101\uffba" +
    "\102\uffba\103\uffba\104\uffba\107\uffba\110\uffba\114\uffba\117" +
    "\uffba\120\uffba\123\uffba\124\uffba\126\uffba\127\uffba\001\002" +
    "\000\056\003\uffb4\021\uffb4\022\uffb4\035\uffb4\041\uffb4\062" +
    "\uffb4\063\uffb4\073\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4" +
    "\104\uffb4\107\uffb4\110\uffb4\114\uffb4\117\uffb4\120\uffb4\123" +
    "\uffb4\124\uffb4\126\uffb4\127\uffb4\001\002\000\030\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\010\uff8c\020\uff8c\037\uff8c\056" +
    "\uff8c\117\uff8c\123\uff8c\130\uff8c\001\002\000\030\004\uff88" +
    "\005\uff88\006\uff88\007\uff88\010\uff88\020\uff88\037\uff88\056" +
    "\uff88\117\uff88\123\uff88\130\uff88\001\002\000\030\004\uff89" +
    "\005\uff89\006\uff89\007\uff89\010\uff89\020\uff89\037\uff89\056" +
    "\uff89\117\uff89\123\uff89\130\uff89\001\002\000\024\003\uffb9" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\020\uffb9\056" +
    "\uffb9\127\uffb9\001\002\000\030\004\uff8b\005\uff8b\006\uff8b" +
    "\007\uff8b\010\uff8b\020\uff8b\037\uff8b\056\uff8b\117\uff8b\123" +
    "\uff8b\130\uff8b\001\002\000\024\003\uff6e\004\025\005\033" +
    "\006\031\007\024\010\017\020\027\056\030\127\uff6e\001" +
    "\002\000\010\003\uffae\121\uffae\127\uffae\001\002\000\006" +
    "\003\uffb2\127\uffb2\001\002\000\010\003\uffad\121\uffad\127" +
    "\uffad\001\002\000\006\003\270\127\271\001\002\000\010" +
    "\003\uff6e\121\264\127\uff6e\001\002\000\056\003\uffb8\021" +
    "\uffb8\022\uffb8\035\uffb8\041\uffb8\062\uffb8\063\uffb8\073\uffb8" +
    "\100\uffb8\101\uffb8\102\uffb8\103\uffb8\104\uffb8\107\uffb8\110" +
    "\uffb8\114\uffb8\117\uffb8\120\uffb8\123\uffb8\124\uffb8\126\uffb8" +
    "\127\uffb8\001\002\000\006\003\uffb3\127\uffb3\001\002\000" +
    "\006\003\uffaf\127\uffaf\001\002\000\022\003\265\004\025" +
    "\005\033\006\031\007\024\010\017\020\027\056\030\001" +
    "\002\000\006\003\uffb0\127\uffb0\001\002\000\010\003\uff6e" +
    "\121\264\127\uff6e\001\002\000\006\003\uffb1\127\uffb1\001" +
    "\002\000\056\003\uffb6\021\uffb6\022\uffb6\035\uffb6\041\uffb6" +
    "\062\uffb6\063\uffb6\073\uffb6\100\uffb6\101\uffb6\102\uffb6\103" +
    "\uffb6\104\uffb6\107\uffb6\110\uffb6\114\uffb6\117\uffb6\120\uffb6" +
    "\123\uffb6\124\uffb6\126\uffb6\127\uffb6\001\002\000\056\003" +
    "\uffb7\021\uffb7\022\uffb7\035\uffb7\041\uffb7\062\uffb7\063\uffb7" +
    "\073\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\104\uffb7\107" +
    "\uffb7\110\uffb7\114\uffb7\117\uffb7\120\uffb7\123\uffb7\124\uffb7" +
    "\126\uffb7\127\uffb7\001\002\000\056\003\uffb5\021\uffb5\022" +
    "\uffb5\035\uffb5\041\uffb5\062\uffb5\063\uffb5\073\uffb5\100\uffb5" +
    "\101\uffb5\102\uffb5\103\uffb5\104\uffb5\107\uffb5\110\uffb5\114" +
    "\uffb5\117\uffb5\120\uffb5\123\uffb5\124\uffb5\126\uffb5\127\uffb5" +
    "\001\002\000\006\057\uffcf\060\uffcf\001\002\000\032\003" +
    "\277\004\025\005\033\006\031\007\024\010\017\020\027" +
    "\037\125\056\030\117\126\123\134\130\142\001\002\000" +
    "\006\003\310\022\311\001\002\000\044\003\uffa3\004\uffa3" +
    "\005\uffa3\006\uffa3\007\uffa3\010\uffa3\014\uffa3\020\uffa3\037" +
    "\uffa3\050\uffa3\054\uffa3\056\uffa3\057\uffa3\060\uffa3\117\uffa3" +
    "\123\uffa3\130\uffa3\001\002\000\004\022\300\001\002\000" +
    "\044\003\145\004\025\005\033\006\031\007\024\010\017" +
    "\014\155\020\027\037\125\050\132\054\127\056\030\057" +
    "\uff6e\060\uff6e\117\126\123\134\130\142\001\002\000\006" +
    "\057\uff6e\060\302\001\002\000\042\003\uff9e\004\uff9e\005" +
    "\uff9e\006\uff9e\007\uff9e\010\uff9e\014\uff9e\020\uff9e\037\uff9e" +
    "\050\uff9e\054\uff9e\056\uff9e\057\uff9e\117\uff9e\123\uff9e\130" +
    "\uff9e\001\002\000\004\057\305\001\002\000\004\057\uff9c" +
    "\001\002\000\044\003\uff9f\004\uff9f\005\uff9f\006\uff9f\007" +
    "\uff9f\010\uff9f\014\uff9f\020\uff9f\037\uff9f\050\uff9f\054\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\117\uff9f\123\uff9f\130\uff9f\001" +
    "\002\000\042\003\145\004\025\005\033\006\031\007\024" +
    "\010\017\014\155\020\027\037\125\050\132\054\127\056" +
    "\030\057\uff6e\117\126\123\134\130\142\001\002\000\004" +
    "\057\uff9d\001\002\000\004\057\316\001\002\000\044\003" +
    "\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\014\uffa2" +
    "\020\uffa2\037\uffa2\050\uffa2\054\uffa2\056\uffa2\057\uffa2\060" +
    "\uffa2\117\uffa2\123\uffa2\130\uffa2\001\002\000\044\003\145" +
    "\004\025\005\033\006\031\007\024\010\017\014\155\020" +
    "\027\037\125\050\132\054\127\056\030\057\uff6e\060\uff6e" +
    "\117\126\123\134\130\142\001\002\000\006\057\uff6e\060" +
    "\302\001\002\000\004\057\315\001\002\000\044\003\uffa1" +
    "\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\014\uffa1\020" +
    "\uffa1\037\uffa1\050\uffa1\054\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\117\uffa1\123\uffa1\130\uffa1\001\002\000\044\003\uffa0\004" +
    "\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\014\uffa0\020\uffa0" +
    "\037\uffa0\050\uffa0\054\uffa0\056\uffa0\057\uffa0\060\uffa0\117" +
    "\uffa0\123\uffa0\130\uffa0\001\002\000\044\003\uffa6\004\uffa6" +
    "\005\uffa6\006\uffa6\007\uffa6\010\uffa6\014\uffa6\020\uffa6\037" +
    "\uffa6\050\uffa6\054\uffa6\056\uffa6\057\uffa6\060\uffa6\117\uffa6" +
    "\123\uffa6\130\uffa6\001\002\000\004\057\332\001\002\000" +
    "\004\111\322\001\002\000\030\004\025\005\033\006\031" +
    "\007\024\010\017\020\027\037\125\056\030\117\126\123" +
    "\134\130\142\001\002\000\004\021\324\001\002\000\030" +
    "\004\025\005\033\006\031\007\024\010\017\020\027\037" +
    "\125\056\030\117\126\123\134\130\142\001\002\000\004" +
    "\062\326\001\002\000\004\071\327\001\002\000\042\003" +
    "\145\004\025\005\033\006\031\007\024\010\017\014\155" +
    "\020\027\037\125\050\132\054\127\056\030\057\uff6e\117" +
    "\126\123\134\130\142\001\002\000\004\057\331\001\002" +
    "\000\044\003\uff97\004\uff97\005\uff97\006\uff97\007\uff97\010" +
    "\uff97\014\uff97\020\uff97\037\uff97\050\uff97\054\uff97\056\uff97" +
    "\057\uff97\060\uff97\117\uff97\123\uff97\130\uff97\001\002\000" +
    "\044\003\uff96\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\014\uff96\020\uff96\037\uff96\050\uff96\054\uff96\056\uff96\057" +
    "\uff96\060\uff96\117\uff96\123\uff96\130\uff96\001\002\000\012" +
    "\015\ufff4\033\ufff4\052\ufff4\071\ufff4\001\002\000\014\015" +
    "\uff6e\033\047\052\045\071\uff6e\110\360\001\002\000\012" +
    "\015\uffef\033\uffef\052\uffef\071\uffef\001\002\000\012\015" +
    "\uffee\033\uffee\052\uffee\071\uffee\001\002\000\012\015\ufff3" +
    "\033\ufff3\052\ufff3\071\ufff3\001\002\000\006\112\uff6e\121" +
    "\343\001\002\000\004\112\346\001\002\000\004\112\uffe7" +
    "\001\002\000\004\010\017\001\002\000\006\112\uff6e\121" +
    "\343\001\002\000\004\112\uffe8\001\002\000\022\023\065" +
    "\024\055\030\053\042\061\043\056\045\066\065\057\070" +
    "\064\001\002\000\006\102\uffed\110\uffed\001\002\000\006" +
    "\102\351\110\uff6e\001\002\000\016\004\025\005\033\006" +
    "\031\007\024\020\027\056\030\001\002\000\004\110\uffe5" +
    "\001\002\000\004\110\354\001\002\000\016\003\334\010" +
    "\017\015\uff6e\033\uff6e\052\uff6e\071\uff6e\001\002\000\012" +
    "\015\uffec\033\uffec\052\uffec\071\uffec\001\002\000\004\110" +
    "\uffe6\001\002\000\012\015\uffe9\033\uffe9\052\uffe9\071\uffe9" +
    "\001\002\000\016\003\334\010\017\015\uff6e\033\uff6e\052" +
    "\uff6e\071\uff6e\001\002\000\012\015\uffeb\033\uffeb\052\uffeb" +
    "\071\uffeb\001\002\000\012\015\uffea\033\uffea\052\uffea\071" +
    "\uffea\001\002\000\042\003\145\004\025\005\033\006\031" +
    "\007\024\010\017\014\155\020\027\037\125\050\132\054" +
    "\127\056\030\057\uff6e\117\126\123\134\130\142\001\002" +
    "\000\004\057\365\001\002\000\012\015\uff6e\033\047\052" +
    "\045\071\uff6e\001\002\000\012\015\uffe1\033\uffe1\052\uffe1" +
    "\071\uffe1\001\002\000\010\033\uffff\052\uffff\071\uffff\001" +
    "\002\000\010\033\ufff0\052\ufff0\071\ufff0\001\002\000\014" +
    "\003\334\010\017\033\uff6e\052\uff6e\071\uff6e\001\002\000" +
    "\010\033\ufff1\052\ufff1\071\ufff1\001\002\000\010\033\047" +
    "\052\045\071\uff6e\001\002\000\004\071\375\001\002\000" +
    "\042\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\014\ufffc\020\ufffc\037\ufffc\050\ufffc\054\ufffc\056\ufffc\057" +
    "\ufffc\117\ufffc\123\ufffc\130\ufffc\001\002\000\004\002\ufffe" +
    "\001\002\000\042\003\145\004\025\005\033\006\031\007" +
    "\024\010\017\014\155\020\027\037\125\050\132\054\127" +
    "\056\030\057\uff6e\117\126\123\134\130\142\001\002\000" +
    "\004\057\u0101\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\007\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\010\001\001\000\006\006\011\015\012\001\001\000" +
    "\002\001\001\000\006\006\367\023\366\001\001\000\012" +
    "\006\020\012\021\017\014\020\017\001\001\000\002\001" +
    "\001\000\016\006\043\021\045\032\035\033\036\043\042" +
    "\044\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\105\025\106\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\020\012" +
    "\021\017\034\020\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\335\012\337\024\336\025\334\001\001\000\012\006\020" +
    "\012\021\017\332\020\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\104\001\001\000\002\001\001" +
    "\000\004\012\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\057\045\062\046\061\104\053\001\001" +
    "\000\002\001\001\000\004\113\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\071\001\001\000" +
    "\006\006\073\047\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\104\075\001\001\000\004\114\076\001" +
    "\001\000\004\012\077\001\001\000\006\006\073\047\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\057" +
    "\045\106\046\061\104\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\117\005" +
    "\120\104\121\001\001\000\004\104\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\006\130\012\134\050\150\051\153\052\146" +
    "\053\127\055\143\057\142\061\140\062\137\063\136\071" +
    "\132\072\152\074\151\075\123\076\145\103\135\105\147" +
    "\106\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\120\273\001\001\000\050\006\130\012" +
    "\134\050\272\051\153\052\146\053\127\055\143\057\142" +
    "\061\140\062\137\063\136\071\132\072\152\074\151\075" +
    "\123\076\145\103\135\105\147\106\031\001\001\000\002" +
    "\001\001\000\012\006\244\064\240\070\243\100\241\001" +
    "\001\000\014\012\134\062\237\063\136\105\147\106\031" +
    "\001\001\000\006\006\160\076\236\001\001\000\002\001" +
    "\001\000\010\006\222\060\223\077\226\001\001\000\032" +
    "\006\160\012\134\053\216\055\143\057\142\061\140\062" +
    "\137\063\136\076\145\103\135\105\147\106\031\001\001" +
    "\000\010\006\205\056\203\101\210\001\001\000\010\006" +
    "\176\054\174\102\200\001\001\000\002\001\001\000\014" +
    "\012\134\062\171\063\136\105\147\106\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\123" +
    "\156\001\001\000\002\001\001\000\032\006\160\012\134" +
    "\053\157\055\143\057\142\061\140\062\137\063\136\076" +
    "\145\103\135\105\147\106\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\124\162\001\001\000\002\001" +
    "\001\000\050\006\130\012\134\050\164\051\153\052\146" +
    "\053\127\055\143\057\142\061\140\062\137\063\136\071" +
    "\132\072\152\074\151\075\123\076\145\103\135\105\147" +
    "\106\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\043\032\170\033\036\043\042" +
    "\044\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\160\012\134\055\201\057\142\061\140\062\137\063\136" +
    "\076\145\103\135\105\147\106\031\001\001\000\010\006" +
    "\176\054\202\102\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\160\012\134\057\214" +
    "\061\140\062\137\063\136\076\145\103\135\105\147\106" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\205\056\215\101\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\115\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\160\012\134\061\233\062\137\063\136" +
    "\076\145\103\135\105\147\106\031\001\001\000\004\116" +
    "\234\001\001\000\010\006\222\060\235\077\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\006\160\012\134\053\271\055\143" +
    "\057\142\061\140\062\137\063\136\076\145\103\135\105" +
    "\147\106\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\117\252\001\001\000\002\001\001" +
    "\000\020\006\254\012\253\014\257\065\260\066\256\105" +
    "\255\106\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\262\067" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\253\014\265\105\255\106\031\001" +
    "\001\000\002\001\001\000\006\006\262\067\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\160\012\134" +
    "\016\275\053\274\055\143\057\142\061\140\062\137\063" +
    "\136\076\145\103\135\105\147\106\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\006" +
    "\130\012\134\050\300\051\153\052\146\053\127\055\143" +
    "\057\142\061\140\062\137\063\136\071\132\072\152\074" +
    "\151\075\123\076\145\103\135\105\147\106\031\001\001" +
    "\000\006\006\303\073\302\001\001\000\004\122\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\006\130\012\134\050\306\051\153\052\146\053" +
    "\127\055\143\057\142\061\140\062\137\063\136\071\132" +
    "\072\152\074\151\075\123\076\145\103\135\105\147\106" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\121\311\001\001\000\050\006\130\012\134\050\312\051" +
    "\153\052\146\053\127\055\143\057\142\061\140\062\137" +
    "\063\136\071\132\072\152\074\151\075\123\076\145\103" +
    "\135\105\147\106\031\001\001\000\006\006\303\073\313" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\160\012\134\053\322\055\143\057\142\061" +
    "\140\062\137\063\136\076\145\103\135\105\147\106\031" +
    "\001\001\000\002\001\001\000\032\006\160\012\134\053" +
    "\324\055\143\057\142\061\140\062\137\063\136\076\145" +
    "\103\135\105\147\106\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\006\130\012\134\050\327\051\153" +
    "\052\146\053\127\055\143\057\142\061\140\062\137\063" +
    "\136\071\132\072\152\074\151\075\123\076\145\103\135" +
    "\105\147\106\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\043" +
    "\027\360\032\356\033\036\043\042\044\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\341\030\340\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\343\001\001\000\006\006\341\030\344" +
    "\001\001\000\002\001\001\000\004\104\346\001\001\000" +
    "\004\112\347\001\001\000\006\006\351\031\352\001\001" +
    "\000\006\105\355\106\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\335\012\337\024\354\025\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\335\012\337\024\361\025\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\006\130\012" +
    "\134\050\363\051\153\052\146\053\127\055\143\057\142" +
    "\061\140\062\137\063\136\071\132\072\152\074\151\075" +
    "\123\076\145\103\135\105\147\106\031\001\001\000\002" +
    "\001\001\000\014\006\043\032\365\033\036\043\042\044" +
    "\037\001\001\000\002\001\001\000\004\110\372\001\001" +
    "\000\002\001\001\000\012\006\335\012\337\024\371\025" +
    "\334\001\001\000\002\001\001\000\014\006\043\032\373" +
    "\033\036\043\042\044\037\001\001\000\004\013\375\001" +
    "\001\000\004\111\376\001\001\000\002\001\001\000\050" +
    "\006\130\012\134\050\377\051\153\052\146\053\127\055" +
    "\143\057\142\061\140\062\137\063\136\071\132\072\152" +
    "\074\151\075\123\076\145\103\135\105\147\106\031\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Generador_Codigo generador = new Generador_Codigo();

    public Generador_Codigo getGenerador() {
        return generador;
    }
    public String resultado="";
    public static ArrayList<Simbolo> tablaSimbolos = new ArrayList();

    public static boolean inCiclo=false;
    public static ArrayList<String> errores = new ArrayList<>();
    public static ArrayList<String> errSemantic = new ArrayList<>();
    public static ArrayList<String> lista_vars = new ArrayList<>();
    public static ArrayList<String[]> lista_params = new ArrayList<>();
    public static ArrayList<ArrayList<String>> funciones = new ArrayList<>();
    public static String funActual;
    public static String tipoActual;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);


        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), (linea+1)));
        //System.out.println(ScannerABC.errores.size());
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);

        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), linea+1));
     
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador_Sintactico$actions {



  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // empty ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("empty",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // id ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT = i; parser.getGenerador().recordar_identificador((String) i);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("id",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Boolean ::= PR_FALSE 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = lit; parser.getGenerador().recordar_RS_DO("Boolean",(String) lit);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",68, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Boolean ::= PR_TRUE 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = lit; parser.getGenerador().recordar_RS_DO("Boolean",(String) lit);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",68, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // literal ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",67, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = lit; parser.getGenerador().recordar_RS_DO("Char",(String) lit);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",67, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // literal ::= L_STRING 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = lit; parser.getGenerador().recordar_RS_DO("String",(String) lit);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",67, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // literal ::= L_FLOAT 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = lit; parser.getGenerador().recordar_RS_DO("Float",(String) lit);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",67, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // literal ::= L_INTEGER 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = lit; parser.getGenerador().recordar_RS_DO("Int",(String) lit);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",67, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Tipo ::= PR_FLOAT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",66, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Tipo ::= PR_REAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",66, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Tipo ::= PR_STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",66, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Tipo ::= PR_SHORTINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",66, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Tipo ::= PR_LONGINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",66, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Tipo ::= PR_CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",66, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Tipo ::= PR_INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",66, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Tipo ::= PR_BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",66, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OperadoresLogicosUnarios ::= O_NOT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosUnarios",65, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OperadoresLogicosBinarios ::= O_AND 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OperadoresLogicosBinarios ::= O_OR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OperadoresComparacion ::= O_LESS_GREATER 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OperadoresComparacion ::= O_LESS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OperadoresComparacion ::= O_LESS_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OperadoresComparacion ::= O_GREATER 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OperadoresComparacion ::= O_GREATER_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OperadoresComparacion ::= O_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OperadorAsignacion ::= O_SLASH_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OperadorAsignacion ::= O_ASTERISK_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OperadorAsignacion ::= O_MINUS_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OperadorAsignacion ::= O_PLUS_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OperadorAsignacion ::= O_COLON_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OperadoresEnteros ::= O_DIV 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OperadoresEnteros ::= O_MOD 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OperadoresEnteros ::= O_SLASH 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OperadoresEnteros ::= O_ASTERISK 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OperadoresEnteros ::= O_MINUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OperadoresEnteros ::= O_PLUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; System.out.println("HOLA"+(String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IncrementoDecremento ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // IncrementoDecremento ::= O_MINUS_MINUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // IncrementoDecremento ::= O_PLUS_PLUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // For ::= PR_FOR error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion FOR Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // For ::= PR_FOR IDENTIFICADOR O_COLON_EQUALS Expresion PR_TO Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // While ::= PR_WHILE error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion WHILE Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // While ::= PR_WHILE NT$12 Expresion PR_DO NT$13 PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		 parser.getGenerador().end_while(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$13 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
 parser.getGenerador().eval_exp_while(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",82, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$12 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().start_while(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",81, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Else ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Else ::= PR_ELSE NT$11 Instrucciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$11 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().else_if(); System.out.println("Else IF"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",80, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // continuarIF ::= error PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("continuarIF",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // continuarIF ::= Expresion error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END, Espera un PR_THEN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("continuarIF",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // continuarIF ::= Expresion PR_THEN NT$10 Instrucciones Else PR_END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("continuarIF",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$10 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().eval_exp_if();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",79, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // IfThenElse ::= PR_IF NT$9 continuarIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		 parser.getGenerador().end_if(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$9 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().start_if(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",78, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // InstruccionSC ::= error O_SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion sc Recuperado con O_SEMICOLON");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // InstruccionSC ::= Expresion O_SEMICOLON 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // InstruccionBE ::= error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccionbe Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // InstruccionBE ::= For 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // InstruccionBE ::= While 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // InstruccionBE ::= IfThenElse 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Instruccion ::= InstruccionSC 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Instruccion ::= InstruccionBE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // entrada ::= literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("entrada",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // entrada ::= id 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("entrada",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ListaParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ListaParametros ::= O_COMMA error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix: Expresion esperada despues de la coma.");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListaParametros ::= O_COMMA entrada ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LParametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LParametro ::= entrada ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExpresionAsignacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",54, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ExpresionAsignacion ::= OperadorAsignacion Expresion 
            {
              Object RESULT =null;
		 parser.getGenerador().generarCodigoAsignacion();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",54, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // continuar_exp7 ::= LParametro error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("continuar_exp7",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // continuar_exp7 ::= LParametro O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("continuar_exp7",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expresion7 ::= O_LEFT_PARENTHESIS NT$8 continuar_exp7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		parser.getGenerador().validar_funcion((String)RESULT);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$8 ::= 
            {
              Object RESULT =null;
 RESULT = parser.getGenerador().obtener_funcion();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",77, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expresion7 ::= ExpresionAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expresion6 ::= literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expresion6 ::= id Expresion7 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expresion5 ::= Expresion6 IncrementoDecremento 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion5",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expresion4 ::= Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expresion4 ::= OperadoresLogicosUnarios Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expresion4 ::= IncrementoDecremento Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpresionOperadoresEnteros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpresionOperadoresEnteros ::= OperadoresEnteros NT$6 Expresion4 NT$7 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
 parser.getGenerador().eval_exp_binaria();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",76, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$6 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
 parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",75, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion3 ::= Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExpresionOperadoresComparacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExpresionOperadoresComparacion ::= OperadoresComparacion Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion2 ::= Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpresionOperadoresLogicos ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpresionOperadoresLogicos ::= OperadoresLogicosBinarios Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instrucciones ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Instrucciones ::= Instruccion Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // masParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // masParametros ::= O_COMMA Tipo NT$5 id masParametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$5 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
 parser.getGenerador().recordar_tipo((String) t);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",74, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Parametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Parametro ::= Tipo error 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros recuperado en Parametro"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Parametro ::= Tipo NT$4 id masParametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
 parser.getGenerador().recordar_tipo((String) t);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",73, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // kk ::= r 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("kk",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // kk ::= Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("kk",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EncabezadoFuncion ::= PR_FUNCTION id O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS error kk 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros2"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EncabezadoFuncion ::= PR_FUNCTION id O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EncabezadoFuncion ::= PR_FUNCTION id O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 parser.getGenerador().guardar_funcion_TS((String) i,((String) t));
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EncabezadoProcedimiento ::= PR_PROCEDURE id O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rr ::= Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rr",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rr ::= PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rr",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Rutina ::= EncabezadoFuncion PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Rutina ::= EncabezadoProcedimiento PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Rutinas ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Rutinas ::= Rutina 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Inicializar ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Inicializar ::= O_EQUALS literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Identificadores ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Identificadores ::= O_COMMA id Identificadores 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ErroresVariables ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ErroresVariables ::= O_SEMICOLON Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con O_SEMICOLON Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Variable ::= error ErroresVariables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con ErroresVariables Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Variable ::= id Identificadores O_COLON Tipo NT$3 Inicializar O_SEMICOLON Variables 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
 System.out.println("Tipo variables: " + (String) tipo); parser.getGenerador().guardar_variables_TS((String)tipo,1); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",72, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Variables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Variables ::= Variable 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SeccionVariables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SeccionVariables ::= PR_VAR Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ErrorConstante ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ErrorConstante ::= PR_VAR Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ErrorConstante ::= O_SEMICOLON Constantes 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Constante ::= error ErrorConstante 
            {
              Object RESULT =null;
		System.out.println("Error");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Constante ::= id O_EQUALS literal O_SEMICOLON Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Constantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Constantes ::= Constante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SeccionConstantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SeccionConstantes ::= PR_CONST Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EntradaPrograma ::= PR_BEGIN NT$2 Instrucciones PR_END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		 parser.getGenerador().fin_programa(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EntradaPrograma",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().inicio_programa(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",71, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la estructura del programa");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= PR_PROGRAM IDENTIFICADOR NT$0 SeccionConstantes SeccionVariables NT$1 Rutinas EntradaPrograma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		 System.out.println(parser.getGenerador().getCodigo());System.out.println(parser.getGenerador().getTabla_simbolos().toString()); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
 parser.getGenerador().finalizar_variables(); parser.getGenerador().inicializar_pila(); parser.getGenerador().iniciar_codigo(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",70, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().iniciar_variables(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",69, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

