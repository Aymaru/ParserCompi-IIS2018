
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\003\010\000\002\006" +
    "\005\000\002\007\004\000\002\007\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\007\000\002\011\004\000" +
    "\002\012\004\000\002\013\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\014" +
    "\004\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\016\011\000\002\016\003\000\002\017\004\000" +
    "\002\020\004\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\021\005\000\002\021\003\000\002\022" +
    "\004\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\024\007\000\002\024\007\000\002\025\007\000" +
    "\002\025\010\000\002\026\011\000\002\026\012\000\002" +
    "\027\003\000\002\030\005\000\002\030\003\000\002\031" +
    "\006\000\002\031\003\000\002\032\004\000\002\032\003" +
    "\000\002\033\004\000\002\034\005\000\002\034\003\000" +
    "\002\035\004\000\002\036\005\000\002\036\003\000\002" +
    "\037\004\000\002\040\005\000\002\040\003\000\002\041" +
    "\004\000\002\041\004\000\002\041\003\000\002\042\004" +
    "\000\002\043\004\000\002\043\005\000\002\043\003\000" +
    "\002\044\003\000\002\044\005\000\002\047\004\000\002" +
    "\047\003\000\002\045\004\000\002\045\003\000\002\046" +
    "\005\000\002\046\003\000\002\050\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\004\000\002\051\010\000" +
    "\002\052\004\000\002\052\003\000\002\053\010\000\002" +
    "\054\014\000\002\055\003\000\002\055\003\000\002\055" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\060\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\061\003\000\002\061\003\000" +
    "\002\062\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\003\000\002\063\003\000\002\063\003\000\002\063" +
    "\003\000\002\063\003\000\002\064\003\000\002\064\003" +
    "\000\002\064\003\000\002\064\003\000\002\064\003\000" +
    "\002\065\003\000\002\065\003\000\002\002\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\032\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\014\015\uff8e\033\uff8e\051\uff8e\063\012\070\uff8e\001" +
    "\002\000\012\015\ufffd\033\ufffd\051\ufffd\070\ufffd\001\002" +
    "\000\012\015\046\033\uff8e\051\uff8e\070\uff8e\001\002\000" +
    "\016\003\014\010\015\015\uff8e\033\uff8e\051\uff8e\070\uff8e" +
    "\001\002\000\012\015\ufffe\033\ufffe\051\ufffe\070\ufffe\001" +
    "\002\000\004\003\034\001\002\000\004\101\020\001\002" +
    "\000\012\015\ufffb\033\ufffb\051\ufffb\070\ufffb\001\002\000" +
    "\012\015\ufffc\033\ufffc\051\ufffc\070\ufffc\001\002\000\016" +
    "\004\022\005\027\006\026\007\021\020\023\055\024\001" +
    "\002\000\056\021\uff93\022\uff93\035\uff93\041\uff93\061\uff93" +
    "\062\uff93\072\uff93\077\uff93\100\uff93\101\uff93\102\uff93\103" +
    "\uff93\106\uff93\107\uff93\113\uff93\116\uff93\117\uff93\120\uff93" +
    "\122\uff93\123\uff93\125\uff93\126\uff93\001\002\000\056\021" +
    "\uff95\022\uff95\035\uff95\041\uff95\061\uff95\062\uff95\072\uff95" +
    "\077\uff95\100\uff95\101\uff95\102\uff95\103\uff95\106\uff95\107" +
    "\uff95\113\uff95\116\uff95\117\uff95\120\uff95\122\uff95\123\uff95" +
    "\125\uff95\126\uff95\001\002\000\056\021\uff90\022\uff90\035" +
    "\uff90\041\uff90\061\uff90\062\uff90\072\uff90\077\uff90\100\uff90" +
    "\101\uff90\102\uff90\103\uff90\106\uff90\107\uff90\113\uff90\116" +
    "\uff90\117\uff90\120\uff90\122\uff90\123\uff90\125\uff90\126\uff90" +
    "\001\002\000\056\021\uff8f\022\uff8f\035\uff8f\041\uff8f\061" +
    "\uff8f\062\uff8f\072\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f" +
    "\103\uff8f\106\uff8f\107\uff8f\113\uff8f\116\uff8f\117\uff8f\120" +
    "\uff8f\122\uff8f\123\uff8f\125\uff8f\126\uff8f\001\002\000\004" +
    "\107\031\001\002\000\056\021\uff94\022\uff94\035\uff94\041" +
    "\uff94\061\uff94\062\uff94\072\uff94\077\uff94\100\uff94\101\uff94" +
    "\102\uff94\103\uff94\106\uff94\107\uff94\113\uff94\116\uff94\117" +
    "\uff94\120\uff94\122\uff94\123\uff94\125\uff94\126\uff94\001\002" +
    "\000\056\021\uff92\022\uff92\035\uff92\041\uff92\061\uff92\062" +
    "\uff92\072\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92" +
    "\106\uff92\107\uff92\113\uff92\116\uff92\117\uff92\120\uff92\122" +
    "\uff92\123\uff92\125\uff92\126\uff92\001\002\000\056\021\uff91" +
    "\022\uff91\035\uff91\041\uff91\061\uff91\062\uff91\072\uff91\077" +
    "\uff91\100\uff91\101\uff91\102\uff91\103\uff91\106\uff91\107\uff91" +
    "\113\uff91\116\uff91\117\uff91\120\uff91\122\uff91\123\uff91\125" +
    "\uff91\126\uff91\001\002\000\016\003\014\010\015\015\uff8e" +
    "\033\uff8e\051\uff8e\070\uff8e\001\002\000\012\015\ufffa\033" +
    "\ufffa\051\ufffa\070\ufffa\001\002\000\012\015\ufff9\033\ufff9" +
    "\051\ufff9\070\ufff9\001\002\000\014\015\042\033\036\051" +
    "\035\070\041\107\040\001\002\000\012\015\ufff5\033\ufff5" +
    "\051\ufff5\070\ufff5\001\002\000\012\015\ufff4\033\ufff4\051" +
    "\ufff4\070\ufff4\001\002\000\012\015\ufff8\033\ufff8\051\ufff8" +
    "\070\ufff8\001\002\000\016\003\014\010\015\015\uff8e\033" +
    "\uff8e\051\uff8e\070\uff8e\001\002\000\012\015\ufff3\033\ufff3" +
    "\051\ufff3\070\ufff3\001\002\000\012\015\ufff6\033\ufff6\051" +
    "\ufff6\070\ufff6\001\002\000\012\015\ufff7\033\ufff7\051\ufff7" +
    "\070\ufff7\001\002\000\010\033\110\051\111\070\uff8e\001" +
    "\002\000\010\033\ufff1\051\ufff1\070\ufff1\001\002\000\014" +
    "\003\047\010\051\033\uff8e\051\uff8e\070\uff8e\001\002\000" +
    "\012\033\102\051\101\070\105\107\103\001\002\000\010" +
    "\033\ufff0\051\ufff0\070\ufff0\001\002\000\006\111\uff8e\120" +
    "\057\001\002\000\010\033\uffef\051\uffef\070\uffef\001\002" +
    "\000\010\033\uffed\051\uffed\070\uffed\001\002\000\010\033" +
    "\ufff2\051\ufff2\070\ufff2\001\002\000\004\111\062\001\002" +
    "\000\004\111\uffe6\001\002\000\004\010\060\001\002\000" +
    "\006\111\uff8e\120\057\001\002\000\004\111\uffe7\001\002" +
    "\000\020\023\071\024\070\030\066\042\064\044\067\064" +
    "\072\067\065\001\002\000\006\101\073\107\uff8e\001\002" +
    "\000\012\010\uff99\070\uff99\101\uff99\107\uff99\001\002\000" +
    "\012\010\uff9c\070\uff9c\101\uff9c\107\uff9c\001\002\000\012" +
    "\010\uff96\070\uff96\101\uff96\107\uff96\001\002\000\012\010" +
    "\uff9b\070\uff9b\101\uff9b\107\uff9b\001\002\000\012\010\uff98" +
    "\070\uff98\101\uff98\107\uff98\001\002\000\012\010\uff97\070" +
    "\uff97\101\uff97\107\uff97\001\002\000\012\010\uff9a\070\uff9a" +
    "\101\uff9a\107\uff9a\001\002\000\016\004\022\005\027\006" +
    "\026\007\021\020\023\055\024\001\002\000\004\107\uffe4" +
    "\001\002\000\004\107\076\001\002\000\014\003\047\010" +
    "\051\033\uff8e\051\uff8e\070\uff8e\001\002\000\010\033\uffee" +
    "\051\uffee\070\uffee\001\002\000\004\107\uffe5\001\002\000" +
    "\010\033\uffea\051\uffea\070\uffea\001\002\000\010\033\uffe9" +
    "\051\uffe9\070\uffe9\001\002\000\014\003\047\010\051\033" +
    "\uff8e\051\uff8e\070\uff8e\001\002\000\010\033\uffec\051\uffec" +
    "\070\uffec\001\002\000\010\033\uffe8\051\uffe8\070\uffe8\001" +
    "\002\000\010\033\uffeb\051\uffeb\070\uffeb\001\002\000\004" +
    "\070\325\001\002\000\004\010\317\001\002\000\004\010" +
    "\273\001\002\000\004\070\267\001\002\000\004\070\116" +
    "\001\002\000\004\070\uffe2\001\002\000\004\070\uffe3\001" +
    "\002\000\040\004\022\005\027\006\026\007\021\010\141" +
    "\014\146\020\023\037\121\047\126\053\123\055\024\056" +
    "\uff8e\116\122\122\130\127\135\001\002\000\004\002\000" +
    "\001\002\000\042\004\uffba\005\uffba\006\uffba\007\uffba\010" +
    "\uffba\014\uffba\020\uffba\037\uffba\047\uffba\053\uffba\055\uffba" +
    "\056\uffba\057\uffba\116\uffba\122\uffba\127\uffba\001\002\000" +
    "\022\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\020\uff9d" +
    "\055\uff9d\127\uff9d\001\002\000\076\004\uffb2\005\uffb2\006" +
    "\uffb2\007\uffb2\010\uffb2\020\uffb2\021\uffb2\022\uffb2\035\uffb2" +
    "\041\uffb2\055\uffb2\061\uffb2\062\uffb2\072\uffb2\077\uffb2\100" +
    "\uffb2\101\uffb2\102\uffb2\103\uffb2\106\uffb2\107\uffb2\113\uffb2" +
    "\116\uffb2\117\uffb2\120\uffb2\122\uffb2\123\uffb2\125\uffb2\126" +
    "\uffb2\127\uffb2\001\002\000\004\010\256\001\002\000\004" +
    "\107\255\001\002\000\026\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\020\uffb1\055\uffb1\056\uffd5\057\uffd5\127\uffb1" +
    "\001\002\000\030\004\022\005\027\006\026\007\021\010" +
    "\141\020\023\037\121\055\024\116\122\122\130\127\135" +
    "\001\002\000\042\004\022\005\027\006\026\007\021\010" +
    "\141\014\146\020\023\037\121\047\126\053\123\055\024" +
    "\056\uff8e\057\uff8e\116\122\122\130\127\135\001\002\000" +
    "\076\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\020\uffb3" +
    "\021\uffb3\022\uffb3\035\uffb3\041\uffb3\055\uffb3\061\uffb3\062" +
    "\uffb3\072\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3" +
    "\106\uffb3\107\uffb3\113\uffb3\116\uffb3\117\uffb3\120\uffb3\122" +
    "\uffb3\123\uffb3\125\uffb3\126\uffb3\127\uffb3\001\002\000\022" +
    "\004\022\005\027\006\026\007\021\010\141\020\023\055" +
    "\024\127\135\001\002\000\056\021\uff8e\022\uff8e\035\uff8e" +
    "\041\uff8e\061\uff8e\062\uff8e\072\uff8e\077\uff8e\100\uff8e\101" +
    "\uff8e\102\uff8e\103\uff8e\106\uff8e\107\uff8e\113\uff8e\116\122" +
    "\117\uff8e\120\uff8e\122\130\123\uff8e\125\uff8e\126\uff8e\001" +
    "\002\000\056\021\uffc9\022\uffc9\035\uffc9\041\uffc9\061\uffc9" +
    "\062\uffc9\072\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103" +
    "\uffc9\106\uffc9\107\uffc9\113\uffc9\116\uffc9\117\uffc9\120\uffc9" +
    "\122\uffc9\123\uffc9\125\uffc9\126\uffc9\001\002\000\056\021" +
    "\uff8e\022\uff8e\035\uff8e\041\233\061\uff8e\062\237\072\uff8e" +
    "\077\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e\106\uff8e\107" +
    "\uff8e\113\236\116\uff8e\117\235\120\uff8e\122\uff8e\123\232" +
    "\125\227\126\uff8e\001\002\000\030\004\022\005\027\006" +
    "\026\007\021\010\141\020\023\037\121\055\024\116\122" +
    "\122\130\127\135\001\002\000\056\021\uff8e\022\uff8e\035" +
    "\uff8e\041\uff8e\061\uff8e\062\uff8e\072\uff8e\077\221\100\215" +
    "\101\213\102\216\103\222\106\220\107\uff8e\113\uff8e\116" +
    "\uff8e\117\uff8e\120\uff8e\122\uff8e\123\uff8e\125\uff8e\126\uff8e" +
    "\001\002\000\056\021\uff8e\022\uff8e\035\206\041\uff8e\061" +
    "\uff8e\062\uff8e\072\203\077\uff8e\100\uff8e\101\uff8e\102\uff8e" +
    "\103\uff8e\106\uff8e\107\uff8e\113\uff8e\116\uff8e\117\uff8e\120" +
    "\uff8e\122\uff8e\123\uff8e\125\uff8e\126\uff8e\001\002\000\022" +
    "\004\022\005\027\006\026\007\021\010\141\020\023\055" +
    "\024\127\135\001\002\000\072\021\uff8e\022\uff8e\035\uff8e" +
    "\041\uff8e\061\uff8e\062\uff8e\072\uff8e\077\uff8e\100\uff8e\101" +
    "\uff8e\102\uff8e\103\uff8e\106\uff8e\107\uff8e\110\163\112\164" +
    "\113\uff8e\115\160\116\uff8e\117\uff8e\120\uff8e\121\167\122" +
    "\uff8e\123\uff8e\124\165\125\uff8e\126\uff8e\127\166\001\002" +
    "\000\056\021\uffc5\022\uffc5\035\uffc5\041\uffc5\061\uffc5\062" +
    "\uffc5\072\uffc5\077\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5" +
    "\106\uffc5\107\uffc5\113\uffc5\116\uffc5\117\uffc5\120\uffc5\122" +
    "\uffc5\123\uffc5\125\uffc5\126\uffc5\001\002\000\004\056\155" +
    "\001\002\000\042\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010" +
    "\uffbc\014\uffbc\020\uffbc\037\uffbc\047\uffbc\053\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\116\uffbc\122\uffbc\127\uffbc\001\002\000" +
    "\042\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\014\uffbb" +
    "\020\uffbb\037\uffbb\047\uffbb\053\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\116\uffbb\122\uffbb\127\uffbb\001\002\000\030\004\022" +
    "\005\027\006\026\007\021\010\141\020\023\037\121\055" +
    "\024\116\122\122\130\127\135\001\002\000\004\061\151" +
    "\001\002\000\076\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\035\uffb1\041\uffb1\055\uffb1" +
    "\061\uffb1\062\uffb1\072\uffb1\077\uffb1\100\uffb1\101\uffb1\102" +
    "\uffb1\103\uffb1\106\uffb1\107\uffb1\113\uffb1\116\uffb1\117\uffb1" +
    "\120\uffb1\122\uffb1\123\uffb1\125\uffb1\126\uffb1\127\uffb1\001" +
    "\002\000\004\070\152\001\002\000\040\004\022\005\027" +
    "\006\026\007\021\010\141\014\146\020\023\037\121\047" +
    "\126\053\123\055\024\056\uff8e\116\122\122\130\127\135" +
    "\001\002\000\004\056\154\001\002\000\042\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\014\uffb5\020\uffb5\037\uffb5" +
    "\047\uffb5\053\uffb5\055\uffb5\056\uffb5\057\uffb5\116\uffb5\122" +
    "\uffb5\127\uffb5\001\002\000\004\002\uffff\001\002\000\056" +
    "\021\uffc7\022\uffc7\035\uffc7\041\uffc7\061\uffc7\062\uffc7\072" +
    "\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\106\uffc7" +
    "\107\uffc7\113\uffc7\116\uffc7\117\uffc7\120\uffc7\122\uffc7\123" +
    "\uffc7\125\uffc7\126\uffc7\001\002\000\030\004\022\005\027" +
    "\006\026\007\021\010\141\020\023\037\121\055\024\116" +
    "\122\122\130\127\135\001\002\000\030\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\020\uffa8\037\uffa8\055\uffa8\116" +
    "\uffa8\122\uffa8\127\uffa8\001\002\000\056\021\uffc4\022\uffc4" +
    "\035\uffc4\041\uffc4\061\uffc4\062\uffc4\072\uffc4\077\uffc4\100" +
    "\uffc4\101\uffc4\102\uffc4\103\uffc4\106\uffc4\107\uffc4\113\uffc4" +
    "\116\uffc4\117\uffc4\120\uffc4\122\uffc4\123\uffc4\125\uffc4\126" +
    "\uffc4\001\002\000\056\021\uffc1\022\uffc1\035\uffc1\041\uffc1" +
    "\061\uffc1\062\uffc1\072\uffc1\077\uffc1\100\uffc1\101\uffc1\102" +
    "\uffc1\103\uffc1\106\uffc1\107\uffc1\113\uffc1\116\uffc1\117\uffc1" +
    "\120\uffc1\122\uffc1\123\uffc1\125\uffc1\126\uffc1\001\002\000" +
    "\030\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\020\uffaa" +
    "\037\uffaa\055\uffaa\116\uffaa\122\uffaa\127\uffaa\001\002\000" +
    "\030\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\020\uffa6" +
    "\037\uffa6\055\uffa6\116\uffa6\122\uffa6\127\uffa6\001\002\000" +
    "\030\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\020\uffa7" +
    "\037\uffa7\055\uffa7\116\uffa7\122\uffa7\127\uffa7\001\002\000" +
    "\032\004\022\005\027\006\026\007\021\010\141\020\023" +
    "\037\121\055\024\116\122\122\130\126\uff8e\127\135\001" +
    "\002\000\030\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9" +
    "\020\uffa9\037\uffa9\055\uffa9\116\uffa9\122\uffa9\127\uffa9\001" +
    "\002\000\006\120\176\126\uff8e\001\002\000\004\126\173" +
    "\001\002\000\024\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010" +
    "\uffb1\020\uffb1\055\uffb1\126\uffbf\127\uffb1\001\002\000\056" +
    "\021\uffc3\022\uffc3\035\uffc3\041\uffc3\061\uffc3\062\uffc3\072" +
    "\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\106\uffc3" +
    "\107\uffc3\113\uffc3\116\uffc3\117\uffc3\120\uffc3\122\uffc3\123" +
    "\uffc3\125\uffc3\126\uffc3\001\002\000\004\126\uffc0\001\002" +
    "\000\004\126\uffbd\001\002\000\030\004\022\005\027\006" +
    "\026\007\021\010\141\020\023\037\121\055\024\116\122" +
    "\122\130\127\135\001\002\000\006\120\176\126\uff8e\001" +
    "\002\000\004\126\uffbe\001\002\000\056\021\uffc2\022\uffc2" +
    "\035\uffc2\041\uffc2\061\uffc2\062\uffc2\072\uffc2\077\uffc2\100" +
    "\uffc2\101\uffc2\102\uffc2\103\uffc2\106\uffc2\107\uffc2\113\uffc2" +
    "\116\uffc2\117\uffc2\120\uffc2\122\uffc2\123\uffc2\125\uffc2\126" +
    "\uffc2\001\002\000\056\021\uffcb\022\uffcb\035\uffcb\041\uffcb" +
    "\061\uffcb\062\uffcb\072\uffcb\077\uffcb\100\uffcb\101\uffcb\102" +
    "\uffcb\103\uffcb\106\uffcb\107\uffcb\113\uffcb\116\uffcb\117\uffcb" +
    "\120\uffcb\122\uffcb\123\uffcb\125\uffcb\126\uffcb\001\002\000" +
    "\030\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e\020\uff9e" +
    "\037\uff9e\055\uff9e\116\uff9e\122\uff9e\127\uff9e\001\002\000" +
    "\056\021\uffd4\022\uffd4\035\uffd4\041\uffd4\061\uffd4\062\uffd4" +
    "\072\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\106" +
    "\uffd4\107\uffd4\113\uffd4\116\uffd4\117\uffd4\120\uffd4\122\uffd4" +
    "\123\uffd4\125\uffd4\126\uffd4\001\002\000\056\021\uffd2\022" +
    "\uffd2\035\uffd2\041\uffd2\061\uffd2\062\uffd2\072\uffd2\077\uffd2" +
    "\100\uffd2\101\uffd2\102\uffd2\103\uffd2\106\uffd2\107\uffd2\113" +
    "\uffd2\116\uffd2\117\uffd2\120\uffd2\122\uffd2\123\uffd2\125\uffd2" +
    "\126\uffd2\001\002\000\030\004\uff9f\005\uff9f\006\uff9f\007" +
    "\uff9f\010\uff9f\020\uff9f\037\uff9f\055\uff9f\116\uff9f\122\uff9f" +
    "\127\uff9f\001\002\000\030\004\022\005\027\006\026\007" +
    "\021\010\141\020\023\037\121\055\024\116\122\122\130" +
    "\127\135\001\002\000\056\021\uff8e\022\uff8e\035\206\041" +
    "\uff8e\061\uff8e\062\uff8e\072\203\077\uff8e\100\uff8e\101\uff8e" +
    "\102\uff8e\103\uff8e\106\uff8e\107\uff8e\113\uff8e\116\uff8e\117" +
    "\uff8e\120\uff8e\122\uff8e\123\uff8e\125\uff8e\126\uff8e\001\002" +
    "\000\056\021\uffd3\022\uffd3\035\uffd3\041\uffd3\061\uffd3\062" +
    "\uffd3\072\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103\uffd3" +
    "\106\uffd3\107\uffd3\113\uffd3\116\uffd3\117\uffd3\120\uffd3\122" +
    "\uffd3\123\uffd3\125\uffd3\126\uffd3\001\002\000\056\021\uffd1" +
    "\022\uffd1\035\uffd1\041\uffd1\061\uffd1\062\uffd1\072\uffd1\077" +
    "\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\106\uffd1\107\uffd1" +
    "\113\uffd1\116\uffd1\117\uffd1\120\uffd1\122\uffd1\123\uffd1\125" +
    "\uffd1\126\uffd1\001\002\000\030\004\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\020\uffa5\037\uffa5\055\uffa5\116\uffa5\122" +
    "\uffa5\127\uffa5\001\002\000\056\021\uffcf\022\uffcf\035\uffcf" +
    "\041\uffcf\061\uffcf\062\uffcf\072\uffcf\077\uffcf\100\uffcf\101" +
    "\uffcf\102\uffcf\103\uffcf\106\uffcf\107\uffcf\113\uffcf\116\uffcf" +
    "\117\uffcf\120\uffcf\122\uffcf\123\uffcf\125\uffcf\126\uffcf\001" +
    "\002\000\030\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\020\uffa3\037\uffa3\055\uffa3\116\uffa3\122\uffa3\127\uffa3\001" +
    "\002\000\030\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\020\uffa0\037\uffa0\055\uffa0\116\uffa0\122\uffa0\127\uffa0\001" +
    "\002\000\030\004\022\005\027\006\026\007\021\010\141" +
    "\020\023\037\121\055\024\116\122\122\130\127\135\001" +
    "\002\000\030\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\020\uffa1\037\uffa1\055\uffa1\116\uffa1\122\uffa1\127\uffa1\001" +
    "\002\000\030\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4" +
    "\020\uffa4\037\uffa4\055\uffa4\116\uffa4\122\uffa4\127\uffa4\001" +
    "\002\000\030\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\020\uffa2\037\uffa2\055\uffa2\116\uffa2\122\uffa2\127\uffa2\001" +
    "\002\000\056\021\uff8e\022\uff8e\035\uff8e\041\uff8e\061\uff8e" +
    "\062\uff8e\072\uff8e\077\221\100\215\101\213\102\216\103" +
    "\222\106\220\107\uff8e\113\uff8e\116\uff8e\117\uff8e\120\uff8e" +
    "\122\uff8e\123\uff8e\125\uff8e\126\uff8e\001\002\000\056\021" +
    "\uffd0\022\uffd0\035\uffd0\041\uffd0\061\uffd0\062\uffd0\072\uffd0" +
    "\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\106\uffd0\107" +
    "\uffd0\113\uffd0\116\uffd0\117\uffd0\120\uffd0\122\uffd0\123\uffd0" +
    "\125\uffd0\126\uffd0\001\002\000\004\126\226\001\002\000" +
    "\056\021\uffc6\022\uffc6\035\uffc6\041\uffc6\061\uffc6\062\uffc6" +
    "\072\uffc6\077\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\106" +
    "\uffc6\107\uffc6\113\uffc6\116\uffc6\117\uffc6\120\uffc6\122\uffc6" +
    "\123\uffc6\125\uffc6\126\uffc6\001\002\000\030\004\uffae\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\020\uffae\037\uffae\055\uffae" +
    "\116\uffae\122\uffae\127\uffae\001\002\000\056\021\uffcc\022" +
    "\uffcc\035\uffcc\041\uffcc\061\uffcc\062\uffcc\072\uffcc\077\uffcc" +
    "\100\uffcc\101\uffcc\102\uffcc\103\uffcc\106\uffcc\107\uffcc\113" +
    "\uffcc\116\uffcc\117\uffcc\120\uffcc\122\uffcc\123\uffcc\125\uffcc" +
    "\126\uffcc\001\002\000\056\021\uffce\022\uffce\035\uffce\041" +
    "\uffce\061\uffce\062\uffce\072\uffce\077\uffce\100\uffce\101\uffce" +
    "\102\uffce\103\uffce\106\uffce\107\uffce\113\uffce\116\uffce\117" +
    "\uffce\120\uffce\122\uffce\123\uffce\125\uffce\126\uffce\001\002" +
    "\000\030\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\020" +
    "\uffb0\037\uffb0\055\uffb0\116\uffb0\122\uffb0\127\uffb0\001\002" +
    "\000\030\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\020" +
    "\uffac\037\uffac\055\uffac\116\uffac\122\uffac\127\uffac\001\002" +
    "\000\030\004\022\005\027\006\026\007\021\010\141\020" +
    "\023\037\121\055\024\116\122\122\130\127\135\001\002" +
    "\000\030\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010\uffaf\020" +
    "\uffaf\037\uffaf\055\uffaf\116\uffaf\122\uffaf\127\uffaf\001\002" +
    "\000\030\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\020" +
    "\uffad\037\uffad\055\uffad\116\uffad\122\uffad\127\uffad\001\002" +
    "\000\030\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\020" +
    "\uffab\037\uffab\055\uffab\116\uffab\122\uffab\127\uffab\001\002" +
    "\000\056\021\uff8e\022\uff8e\035\uff8e\041\233\061\uff8e\062" +
    "\237\072\uff8e\077\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e" +
    "\106\uff8e\107\uff8e\113\236\116\uff8e\117\235\120\uff8e\122" +
    "\uff8e\123\232\125\227\126\uff8e\001\002\000\056\021\uffcd" +
    "\022\uffcd\035\uffcd\041\uffcd\061\uffcd\062\uffcd\072\uffcd\077" +
    "\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\106\uffcd\107\uffcd" +
    "\113\uffcd\116\uffcd\117\uffcd\120\uffcd\122\uffcd\123\uffcd\125" +
    "\uffcd\126\uffcd\001\002\000\056\021\uffc8\022\uffc8\035\uffc8" +
    "\041\uffc8\061\uffc8\062\uffc8\072\uffc8\077\uffc8\100\uffc8\101" +
    "\uffc8\102\uffc8\103\uffc8\106\uffc8\107\uffc8\113\uffc8\116\uffc8" +
    "\117\uffc8\120\uffc8\122\uffc8\123\uffc8\125\uffc8\126\uffc8\001" +
    "\002\000\056\021\uffca\022\uffca\035\uffca\041\uffca\061\uffca" +
    "\062\uffca\072\uffca\077\uffca\100\uffca\101\uffca\102\uffca\103" +
    "\uffca\106\uffca\107\uffca\113\uffca\116\uffca\117\uffca\120\uffca" +
    "\122\uffca\123\uffca\125\uffca\126\uffca\001\002\000\006\056" +
    "\uffd6\057\uffd6\001\002\000\004\022\246\001\002\000\042" +
    "\004\022\005\027\006\026\007\021\010\141\014\146\020" +
    "\023\037\121\047\126\053\123\055\024\056\uff8e\057\uff8e" +
    "\116\122\122\130\127\135\001\002\000\006\056\uff8e\057" +
    "\250\001\002\000\040\004\022\005\027\006\026\007\021" +
    "\010\141\014\146\020\023\037\121\047\126\053\123\055" +
    "\024\056\uff8e\116\122\122\130\127\135\001\002\000\004" +
    "\056\253\001\002\000\004\056\uffb6\001\002\000\042\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\014\uffb8\020\uffb8" +
    "\037\uffb8\047\uffb8\053\uffb8\055\uffb8\056\uffb8\057\uffb8\116" +
    "\uffb8\122\uffb8\127\uffb8\001\002\000\004\056\uffb7\001\002" +
    "\000\042\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\014" +
    "\uffb9\020\uffb9\037\uffb9\047\uffb9\053\uffb9\055\uffb9\056\uffb9" +
    "\057\uffb9\116\uffb9\122\uffb9\127\uffb9\001\002\000\004\110" +
    "\257\001\002\000\030\004\022\005\027\006\026\007\021" +
    "\010\141\020\023\037\121\055\024\116\122\122\130\127" +
    "\135\001\002\000\004\021\261\001\002\000\030\004\022" +
    "\005\027\006\026\007\021\010\141\020\023\037\121\055" +
    "\024\116\122\122\130\127\135\001\002\000\004\061\263" +
    "\001\002\000\004\070\264\001\002\000\040\004\022\005" +
    "\027\006\026\007\021\010\141\014\146\020\023\037\121" +
    "\047\126\053\123\055\024\056\uff8e\116\122\122\130\127" +
    "\135\001\002\000\004\056\266\001\002\000\042\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\014\uffb4\020\uffb4\037" +
    "\uffb4\047\uffb4\053\uffb4\055\uffb4\056\uffb4\057\uffb4\116\uffb4" +
    "\122\uffb4\127\uffb4\001\002\000\040\004\022\005\027\006" +
    "\026\007\021\010\141\014\146\020\023\037\121\047\126" +
    "\053\123\055\024\056\uff8e\116\122\122\130\127\135\001" +
    "\002\000\004\056\271\001\002\000\010\033\110\051\111" +
    "\070\uff8e\001\002\000\004\070\uffe0\001\002\000\004\127" +
    "\274\001\002\000\024\003\uff8e\023\071\024\070\030\066" +
    "\042\064\044\067\064\072\067\065\126\uff8e\001\002\000" +
    "\004\010\310\001\002\000\006\003\uffd9\126\uffd9\001\002" +
    "\000\006\003\uffdb\126\uffdb\001\002\000\006\003\301\126" +
    "\302\001\002\000\004\126\305\001\002\000\004\111\303" +
    "\001\002\000\020\023\071\024\070\030\066\042\064\044" +
    "\067\064\072\067\065\001\002\000\004\070\uffdd\001\002" +
    "\000\004\111\306\001\002\000\020\023\071\024\070\030" +
    "\066\042\064\044\067\064\072\067\065\001\002\000\004" +
    "\070\uffdc\001\002\000\010\003\uff8e\120\313\126\uff8e\001" +
    "\002\000\006\003\uffda\126\uffda\001\002\000\006\003\uffd7" +
    "\126\uffd7\001\002\000\020\023\071\024\070\030\066\042" +
    "\064\044\067\064\072\067\065\001\002\000\004\010\315" +
    "\001\002\000\010\003\uff8e\120\313\126\uff8e\001\002\000" +
    "\006\003\uffd8\126\uffd8\001\002\000\004\127\320\001\002" +
    "\000\024\003\uff8e\023\071\024\070\030\066\042\064\044" +
    "\067\064\072\067\065\126\uff8e\001\002\000\006\003\322" +
    "\126\323\001\002\000\004\126\324\001\002\000\004\070" +
    "\uffdf\001\002\000\004\070\uffde\001\002\000\040\004\022" +
    "\005\027\006\026\007\021\010\141\014\146\020\023\037" +
    "\121\047\126\053\123\055\024\056\uff8e\116\122\122\130" +
    "\127\135\001\002\000\004\056\327\001\002\000\010\033" +
    "\110\051\111\070\uff8e\001\002\000\004\070\uffe1\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\007\007\010" +
    "\001\001\000\002\001\001\000\006\002\044\014\043\001" +
    "\001\000\010\002\015\010\012\011\016\001\001\000\002" +
    "\001\001\000\004\012\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\064\024\065\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\015\010" +
    "\031\011\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\015\010\042\011\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\113\023\112\024\114\025\106\026\111" +
    "\001\001\000\002\001\001\000\012\002\051\015\053\016" +
    "\047\017\052\001\001\000\004\020\103\001\001\000\002" +
    "\001\001\000\006\002\055\021\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\002\055\021" +
    "\060\001\001\000\002\001\001\000\004\063\062\001\001" +
    "\000\006\002\073\022\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\064" +
    "\077\065\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\051\015\076\016\047\017\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\051\015\105\016\047\017\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\002\124\032\142\033\123\035" +
    "\136\037\135\041\133\042\132\043\131\050\126\051\143" +
    "\053\144\054\117\055\137\062\130\064\141\065\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\002\147\033\244\035\136\037\135" +
    "\041\133\042\132\043\131\055\137\062\130\064\141\065" +
    "\027\001\001\000\042\002\124\032\243\033\123\035\136" +
    "\037\135\041\133\042\132\043\131\050\126\051\143\053" +
    "\144\054\117\055\137\062\130\064\141\065\027\001\001" +
    "\000\002\001\001\000\012\042\242\043\131\064\141\065" +
    "\027\001\001\000\006\002\147\055\241\001\001\000\002" +
    "\001\001\000\010\002\227\040\230\056\233\001\001\000" +
    "\030\002\147\033\224\035\136\037\135\041\133\042\132" +
    "\043\131\055\137\062\130\064\141\065\027\001\001\000" +
    "\010\002\213\036\211\060\216\001\001\000\010\002\204" +
    "\034\203\061\206\001\001\000\012\042\201\043\131\064" +
    "\141\065\027\001\001\000\012\002\161\044\155\047\160" +
    "\057\156\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\147\033\146" +
    "\035\136\037\135\041\133\042\132\043\131\055\137\062" +
    "\130\064\141\065\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\002\124\032\152\033" +
    "\123\035\136\037\135\041\133\042\132\043\131\050\126" +
    "\051\143\053\144\054\117\055\137\062\130\064\141\065" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\002\147\033\200\035" +
    "\136\037\135\041\133\042\132\043\131\055\137\062\130" +
    "\064\141\065\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\002\171\033\167\035\136\037" +
    "\135\041\133\042\132\043\131\045\170\055\137\062\130" +
    "\064\141\065\027\001\001\000\002\001\001\000\006\002" +
    "\174\046\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\002\147\033\176\035\136\037\135\041\133\042\132" +
    "\043\131\055\137\062\130\064\141\065\027\001\001\000" +
    "\006\002\174\046\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\147" +
    "\035\207\037\135\041\133\042\132\043\131\055\137\062" +
    "\130\064\141\065\027\001\001\000\010\002\204\034\210" +
    "\061\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\147\037\222\041\133\042\132\043" +
    "\131\055\137\062\130\064\141\065\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\213\036\223\060\216\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\002\147\041\237\042\132\043\131\055\137\062" +
    "\130\064\141\065\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\227\040\240\056" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\002" +
    "\124\032\246\033\123\035\136\037\135\041\133\042\132" +
    "\043\131\050\126\051\143\053\144\054\117\055\137\062" +
    "\130\064\141\065\027\001\001\000\006\002\251\052\250" +
    "\001\001\000\042\002\124\032\253\033\123\035\136\037" +
    "\135\041\133\042\132\043\131\050\126\051\143\053\144" +
    "\054\117\055\137\062\130\064\141\065\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\002" +
    "\147\033\257\035\136\037\135\041\133\042\132\043\131" +
    "\055\137\062\130\064\141\065\027\001\001\000\002\001" +
    "\001\000\030\002\147\033\261\035\136\037\135\041\133" +
    "\042\132\043\131\055\137\062\130\064\141\065\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\002\124" +
    "\032\264\033\123\035\136\037\135\041\133\042\132\043" +
    "\131\050\126\051\143\053\144\054\117\055\137\062\130" +
    "\064\141\065\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\002\124\032\267\033\123\035\136\037\135" +
    "\041\133\042\132\043\131\050\126\051\143\053\144\054" +
    "\117\055\137\062\130\064\141\065\027\001\001\000\002" +
    "\001\001\000\014\002\113\023\271\024\114\025\106\026" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\275\027\277\030\276\063\274\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\306" +
    "\001\001\000\002\001\001\000\006\002\311\031\310\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\313" +
    "\001\001\000\002\001\001\000\006\002\311\031\315\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\275" +
    "\027\320\030\276\063\274\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\002\124\032\325\033\123\035\136\037\135\041\133\042" +
    "\132\043\131\050\126\051\143\053\144\054\117\055\137" +
    "\062\130\064\141\065\027\001\001\000\002\001\001\000" +
    "\014\002\113\023\327\024\114\025\106\026\111\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);


        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), (linea+1)));
        System.out.println(ScannerABC.errores.size());
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);

        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), linea+1));
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {



  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PR_PROGRAM IDENTIFICADOR SeccionConstantes SeccionVariables Rutinas EntradaPrograma 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EntradaPrograma ::= PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EntradaPrograma",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SeccionConstantes ::= PR_CONST Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SeccionConstantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Constantes ::= Constante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Constantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Constante ::= IDENTIFICADOR O_EQUALS literal O_SEMICOLON Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Constante ::= error ErrorConstante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ErrorConstante ::= error ErroresConstantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ErroresConstantes ::= O_SEMICOLON Constantes 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Beta");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresConstantes",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ErroresConstantes ::= PR_VAR 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Beta");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresConstantes",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ErroresConstantes ::= PR_FUNCTION 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Beta");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresConstantes",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ErroresConstantes ::= PR_PROCEDURE 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Beta");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresConstantes",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ErroresConstantes ::= PR_BEGIN 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Beta");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresConstantes",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SeccionVariables ::= PR_VAR Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SeccionVariables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Variables ::= Variable 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Variables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Variable ::= IDENTIFICADOR Identificadores O_COLON Tipo Inicializar O_SEMICOLON Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Variable ::= ErrorVariable 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ErrorVariable ::= error ErroresVariables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorVariable",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ErroresVariables ::= O_SEMICOLON Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Beta");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ErroresVariables ::= PR_FUNCTION 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Beta");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ErroresVariables ::= PR_PROCEDURE 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Beta");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ErroresVariables ::= PR_BEGIN 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Beta");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Identificadores ::= O_COMMA IDENTIFICADOR Identificadores 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Identificadores ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Inicializar ::= O_EQUALS literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Inicializar ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Rutinas ::= Rutina 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Rutinas ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Rutina ::= EncabezadoProcedimiento PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Rutina ::= EncabezadoFuncion PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS Parametros error O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros error O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Parametro ::= Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Parametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // masParametros ::= O_COMMA Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // masParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Instrucciones ::= Instruccion Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Instrucciones ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion ::= Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExpresionOperadoresLogicos ::= OperadoresLogicosBinarios Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpresionOperadoresLogicos ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion2 ::= Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpresionOperadoresComparacion ::= OperadoresComparacion Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExpresionOperadoresComparacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion3 ::= Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExpresionOperadoresEnteros ::= OperadoresEnteros Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpresionOperadoresEnteros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion4 ::= IncrementoDecremento Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion4 ::= OperadoresLogicosUnarios Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion4 ::= Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expresion5 ::= Expresion6 IncrementoDecremento 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion5",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion6 ::= IDENTIFICADOR Expresion7 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expresion6 ::= literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expresion7 ::= ExpresionAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExpresionAsignacion ::= OperadorAsignacion Expresion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpresionAsignacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LParametro ::= Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LParametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ListaParametros ::= O_COMMA Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ListaParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Instruccion ::= IfThenElse 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Instruccion ::= While 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Instruccion ::= For 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Instruccion ::= Expresion O_SEMICOLON 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IfThenElse ::= PR_IF Expresion PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Else ::= PR_ELSE Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Else ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // While ::= PR_WHILE Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // For ::= PR_FOR IDENTIFICADOR O_COLON_EQUALS Expresion PR_TO Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IncrementoDecremento ::= O_PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IncrementoDecremento ::= O_MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IncrementoDecremento ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OperadoresEnteros ::= O_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OperadoresEnteros ::= O_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OperadoresEnteros ::= O_ASTERISK 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OperadoresEnteros ::= O_SLASH 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OperadoresEnteros ::= O_MOD 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OperadoresEnteros ::= O_DIV 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OperadorAsignacion ::= O_COLON_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OperadorAsignacion ::= O_PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OperadorAsignacion ::= O_MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OperadorAsignacion ::= O_ASTERISK_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OperadorAsignacion ::= O_SLASH_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OperadoresComparacion ::= O_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OperadoresComparacion ::= O_GREATER_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OperadoresComparacion ::= O_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OperadoresComparacion ::= O_LESS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OperadoresComparacion ::= O_LESS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OperadoresComparacion ::= O_LESS_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OperadoresLogicosBinarios ::= O_OR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OperadoresLogicosBinarios ::= O_AND 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OperadoresLogicosUnarios ::= O_NOT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosUnarios",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Tipo ::= PR_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Tipo ::= PR_INT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Tipo ::= PR_CHAR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Tipo ::= PR_LONGINT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Tipo ::= PR_SHORTINT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Tipo ::= PR_STRING 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Tipo ::= PR_REAL 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // literal ::= L_INTEGER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // literal ::= L_FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // literal ::= L_STRING 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // literal ::= L_CHAR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // literal ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Boolean ::= PR_TRUE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Boolean ::= PR_FALSE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // empty ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("empty",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
