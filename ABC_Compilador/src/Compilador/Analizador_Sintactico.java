
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\003\010\000\002\006" +
    "\005\000\002\007\004\000\002\007\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\007\000\002\012\004\000" +
    "\002\012\003\000\002\013\003\000\002\013\003\000\002" +
    "\014\011\000\002\015\005\000\002\015\003\000\002\016" +
    "\004\000\002\016\003\000\002\017\003\000\002\017\003" +
    "\000\002\020\007\000\002\020\007\000\002\021\007\000" +
    "\002\022\011\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\006\000\002\025\003\000\002\026" +
    "\004\000\002\026\003\000\002\027\004\000\002\030\005" +
    "\000\002\030\003\000\002\031\004\000\002\032\005\000" +
    "\002\032\003\000\002\033\004\000\002\034\005\000\002" +
    "\034\003\000\002\035\004\000\002\035\004\000\002\035" +
    "\003\000\002\036\004\000\002\037\004\000\002\037\005" +
    "\000\002\037\003\000\002\040\003\000\002\040\005\000" +
    "\002\043\004\000\002\043\003\000\002\041\004\000\002" +
    "\041\003\000\002\042\005\000\002\042\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\004" +
    "\000\002\045\010\000\002\046\004\000\002\046\003\000" +
    "\002\047\010\000\002\050\014\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\052\003\000\002\052" +
    "\003\000\002\052\003\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\053\003\000\002\053\003\000" +
    "\002\053\003\000\002\053\003\000\002\053\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\055\003" +
    "\000\002\055\003\000\002\056\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\060" +
    "\003\000\002\060\003\000\002\060\003\000\002\060\003" +
    "\000\002\060\003\000\002\061\003\000\002\061\003\000" +
    "\002\002\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\032\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\014\015\uff9d\033\uff9d\051\uff9d\063\012\070\uff9d\001" +
    "\002\000\012\015\ufffd\033\ufffd\051\ufffd\070\ufffd\001\002" +
    "\000\012\015\034\033\uff9d\051\uff9d\070\uff9d\001\002\000" +
    "\014\010\014\015\uff9d\033\uff9d\051\uff9d\070\uff9d\001\002" +
    "\000\012\015\ufffe\033\ufffe\051\ufffe\070\ufffe\001\002\000" +
    "\004\101\017\001\002\000\012\015\ufffb\033\ufffb\051\ufffb" +
    "\070\ufffb\001\002\000\012\015\ufffc\033\ufffc\051\ufffc\070" +
    "\ufffc\001\002\000\016\004\021\005\027\006\025\007\020" +
    "\020\023\055\022\001\002\000\056\021\uffa2\022\uffa2\035" +
    "\uffa2\041\uffa2\061\uffa2\062\uffa2\072\uffa2\077\uffa2\100\uffa2" +
    "\101\uffa2\102\uffa2\103\uffa2\106\uffa2\107\uffa2\113\uffa2\116" +
    "\uffa2\117\uffa2\120\uffa2\122\uffa2\123\uffa2\125\uffa2\126\uffa2" +
    "\001\002\000\056\021\uffa4\022\uffa4\035\uffa4\041\uffa4\061" +
    "\uffa4\062\uffa4\072\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4" +
    "\103\uffa4\106\uffa4\107\uffa4\113\uffa4\116\uffa4\117\uffa4\120" +
    "\uffa4\122\uffa4\123\uffa4\125\uffa4\126\uffa4\001\002\000\056" +
    "\021\uff9e\022\uff9e\035\uff9e\041\uff9e\061\uff9e\062\uff9e\072" +
    "\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e\106\uff9e" +
    "\107\uff9e\113\uff9e\116\uff9e\117\uff9e\120\uff9e\122\uff9e\123" +
    "\uff9e\125\uff9e\126\uff9e\001\002\000\056\021\uff9f\022\uff9f" +
    "\035\uff9f\041\uff9f\061\uff9f\062\uff9f\072\uff9f\077\uff9f\100" +
    "\uff9f\101\uff9f\102\uff9f\103\uff9f\106\uff9f\107\uff9f\113\uff9f" +
    "\116\uff9f\117\uff9f\120\uff9f\122\uff9f\123\uff9f\125\uff9f\126" +
    "\uff9f\001\002\000\004\107\030\001\002\000\056\021\uffa3" +
    "\022\uffa3\035\uffa3\041\uffa3\061\uffa3\062\uffa3\072\uffa3\077" +
    "\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\106\uffa3\107\uffa3" +
    "\113\uffa3\116\uffa3\117\uffa3\120\uffa3\122\uffa3\123\uffa3\125" +
    "\uffa3\126\uffa3\001\002\000\056\021\uffa0\022\uffa0\035\uffa0" +
    "\041\uffa0\061\uffa0\062\uffa0\072\uffa0\077\uffa0\100\uffa0\101" +
    "\uffa0\102\uffa0\103\uffa0\106\uffa0\107\uffa0\113\uffa0\116\uffa0" +
    "\117\uffa0\120\uffa0\122\uffa0\123\uffa0\125\uffa0\126\uffa0\001" +
    "\002\000\056\021\uffa1\022\uffa1\035\uffa1\041\uffa1\061\uffa1" +
    "\062\uffa1\072\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103" +
    "\uffa1\106\uffa1\107\uffa1\113\uffa1\116\uffa1\117\uffa1\120\uffa1" +
    "\122\uffa1\123\uffa1\125\uffa1\126\uffa1\001\002\000\014\010" +
    "\014\015\uff9d\033\uff9d\051\uff9d\070\uff9d\001\002\000\012" +
    "\015\ufffa\033\ufffa\051\ufffa\070\ufffa\001\002\000\010\033" +
    "\066\051\065\070\uff9d\001\002\000\010\033\ufff8\051\ufff8" +
    "\070\ufff8\001\002\000\012\010\035\033\uff9d\051\uff9d\070" +
    "\uff9d\001\002\000\006\111\uff9d\120\043\001\002\000\010" +
    "\033\ufff7\051\ufff7\070\ufff7\001\002\000\010\033\ufff6\051" +
    "\ufff6\070\ufff6\001\002\000\010\033\ufff9\051\ufff9\070\ufff9" +
    "\001\002\000\004\111\046\001\002\000\004\111\ufff3\001" +
    "\002\000\004\010\044\001\002\000\006\111\uff9d\120\043" +
    "\001\002\000\004\111\ufff4\001\002\000\020\023\055\024" +
    "\054\030\052\042\050\044\053\064\056\067\051\001\002" +
    "\000\006\101\057\107\uff9d\001\002\000\012\010\uffa8\070" +
    "\uffa8\101\uffa8\107\uffa8\001\002\000\012\010\uffab\070\uffab" +
    "\101\uffab\107\uffab\001\002\000\012\010\uffa5\070\uffa5\101" +
    "\uffa5\107\uffa5\001\002\000\012\010\uffaa\070\uffaa\101\uffaa" +
    "\107\uffaa\001\002\000\012\010\uffa7\070\uffa7\101\uffa7\107" +
    "\uffa7\001\002\000\012\010\uffa6\070\uffa6\101\uffa6\107\uffa6" +
    "\001\002\000\012\010\uffa9\070\uffa9\101\uffa9\107\uffa9\001" +
    "\002\000\016\004\021\005\027\006\025\007\020\020\023" +
    "\055\022\001\002\000\004\107\ufff1\001\002\000\004\107" +
    "\062\001\002\000\012\010\035\033\uff9d\051\uff9d\070\uff9d" +
    "\001\002\000\010\033\ufff5\051\ufff5\070\ufff5\001\002\000" +
    "\004\107\ufff2\001\002\000\004\010\273\001\002\000\004" +
    "\010\255\001\002\000\004\070\251\001\002\000\004\070" +
    "\245\001\002\000\004\070\074\001\002\000\004\070\uffef" +
    "\001\002\000\004\070\ufff0\001\002\000\040\004\021\005" +
    "\027\006\025\007\020\010\117\014\124\020\023\037\077" +
    "\047\104\053\101\055\022\056\uff9d\116\100\122\106\127" +
    "\113\001\002\000\004\002\000\001\002\000\042\004\uffc9" +
    "\005\uffc9\006\uffc9\007\uffc9\010\uffc9\014\uffc9\020\uffc9\037" +
    "\uffc9\047\uffc9\053\uffc9\055\uffc9\056\uffc9\057\uffc9\116\uffc9" +
    "\122\uffc9\127\uffc9\001\002\000\022\004\uffac\005\uffac\006" +
    "\uffac\007\uffac\010\uffac\020\uffac\055\uffac\127\uffac\001\002" +
    "\000\076\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\020" +
    "\uffc1\021\uffc1\022\uffc1\035\uffc1\041\uffc1\055\uffc1\061\uffc1" +
    "\062\uffc1\072\uffc1\077\uffc1\100\uffc1\101\uffc1\102\uffc1\103" +
    "\uffc1\106\uffc1\107\uffc1\113\uffc1\116\uffc1\117\uffc1\120\uffc1" +
    "\122\uffc1\123\uffc1\125\uffc1\126\uffc1\127\uffc1\001\002\000" +
    "\004\010\234\001\002\000\004\107\233\001\002\000\026" +
    "\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\020\uffc0\055" +
    "\uffc0\056\uffe4\057\uffe4\127\uffc0\001\002\000\030\004\021" +
    "\005\027\006\025\007\020\010\117\020\023\037\077\055" +
    "\022\116\100\122\106\127\113\001\002\000\042\004\021" +
    "\005\027\006\025\007\020\010\117\014\124\020\023\037" +
    "\077\047\104\053\101\055\022\056\uff9d\057\uff9d\116\100" +
    "\122\106\127\113\001\002\000\076\004\uffc2\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\020\uffc2\021\uffc2\022\uffc2\035\uffc2" +
    "\041\uffc2\055\uffc2\061\uffc2\062\uffc2\072\uffc2\077\uffc2\100" +
    "\uffc2\101\uffc2\102\uffc2\103\uffc2\106\uffc2\107\uffc2\113\uffc2" +
    "\116\uffc2\117\uffc2\120\uffc2\122\uffc2\123\uffc2\125\uffc2\126" +
    "\uffc2\127\uffc2\001\002\000\022\004\021\005\027\006\025" +
    "\007\020\010\117\020\023\055\022\127\113\001\002\000" +
    "\056\021\uff9d\022\uff9d\035\uff9d\041\uff9d\061\uff9d\062\uff9d" +
    "\072\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d\106" +
    "\uff9d\107\uff9d\113\uff9d\116\100\117\uff9d\120\uff9d\122\106" +
    "\123\uff9d\125\uff9d\126\uff9d\001\002\000\056\021\uffd8\022" +
    "\uffd8\035\uffd8\041\uffd8\061\uffd8\062\uffd8\072\uffd8\077\uffd8" +
    "\100\uffd8\101\uffd8\102\uffd8\103\uffd8\106\uffd8\107\uffd8\113" +
    "\uffd8\116\uffd8\117\uffd8\120\uffd8\122\uffd8\123\uffd8\125\uffd8" +
    "\126\uffd8\001\002\000\056\021\uff9d\022\uff9d\035\uff9d\041" +
    "\211\061\uff9d\062\215\072\uff9d\077\uff9d\100\uff9d\101\uff9d" +
    "\102\uff9d\103\uff9d\106\uff9d\107\uff9d\113\214\116\uff9d\117" +
    "\213\120\uff9d\122\uff9d\123\210\125\205\126\uff9d\001\002" +
    "\000\030\004\021\005\027\006\025\007\020\010\117\020" +
    "\023\037\077\055\022\116\100\122\106\127\113\001\002" +
    "\000\056\021\uff9d\022\uff9d\035\uff9d\041\uff9d\061\uff9d\062" +
    "\uff9d\072\uff9d\077\177\100\173\101\171\102\174\103\200" +
    "\106\176\107\uff9d\113\uff9d\116\uff9d\117\uff9d\120\uff9d\122" +
    "\uff9d\123\uff9d\125\uff9d\126\uff9d\001\002\000\056\021\uff9d" +
    "\022\uff9d\035\164\041\uff9d\061\uff9d\062\uff9d\072\162\077" +
    "\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d\106\uff9d\107\uff9d" +
    "\113\uff9d\116\uff9d\117\uff9d\120\uff9d\122\uff9d\123\uff9d\125" +
    "\uff9d\126\uff9d\001\002\000\022\004\021\005\027\006\025" +
    "\007\020\010\117\020\023\055\022\127\113\001\002\000" +
    "\072\021\uff9d\022\uff9d\035\uff9d\041\uff9d\061\uff9d\062\uff9d" +
    "\072\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d\106" +
    "\uff9d\107\uff9d\110\141\112\142\113\uff9d\115\136\116\uff9d" +
    "\117\uff9d\120\uff9d\121\145\122\uff9d\123\uff9d\124\143\125" +
    "\uff9d\126\uff9d\127\144\001\002\000\056\021\uffd4\022\uffd4" +
    "\035\uffd4\041\uffd4\061\uffd4\062\uffd4\072\uffd4\077\uffd4\100" +
    "\uffd4\101\uffd4\102\uffd4\103\uffd4\106\uffd4\107\uffd4\113\uffd4" +
    "\116\uffd4\117\uffd4\120\uffd4\122\uffd4\123\uffd4\125\uffd4\126" +
    "\uffd4\001\002\000\004\056\133\001\002\000\042\004\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\014\uffcb\020\uffcb\037" +
    "\uffcb\047\uffcb\053\uffcb\055\uffcb\056\uffcb\057\uffcb\116\uffcb" +
    "\122\uffcb\127\uffcb\001\002\000\042\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\014\uffca\020\uffca\037\uffca\047\uffca" +
    "\053\uffca\055\uffca\056\uffca\057\uffca\116\uffca\122\uffca\127" +
    "\uffca\001\002\000\030\004\021\005\027\006\025\007\020" +
    "\010\117\020\023\037\077\055\022\116\100\122\106\127" +
    "\113\001\002\000\004\061\127\001\002\000\076\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\020\uffc0\021\uffc0\022" +
    "\uffc0\035\uffc0\041\uffc0\055\uffc0\061\uffc0\062\uffc0\072\uffc0" +
    "\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\106\uffc0\107" +
    "\uffc0\113\uffc0\116\uffc0\117\uffc0\120\uffc0\122\uffc0\123\uffc0" +
    "\125\uffc0\126\uffc0\127\uffc0\001\002\000\004\070\130\001" +
    "\002\000\040\004\021\005\027\006\025\007\020\010\117" +
    "\014\124\020\023\037\077\047\104\053\101\055\022\056" +
    "\uff9d\116\100\122\106\127\113\001\002\000\004\056\132" +
    "\001\002\000\042\004\uffc4\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\014\uffc4\020\uffc4\037\uffc4\047\uffc4\053\uffc4\055\uffc4" +
    "\056\uffc4\057\uffc4\116\uffc4\122\uffc4\127\uffc4\001\002\000" +
    "\004\002\uffff\001\002\000\056\021\uffd6\022\uffd6\035\uffd6" +
    "\041\uffd6\061\uffd6\062\uffd6\072\uffd6\077\uffd6\100\uffd6\101" +
    "\uffd6\102\uffd6\103\uffd6\106\uffd6\107\uffd6\113\uffd6\116\uffd6" +
    "\117\uffd6\120\uffd6\122\uffd6\123\uffd6\125\uffd6\126\uffd6\001" +
    "\002\000\030\004\021\005\027\006\025\007\020\010\117" +
    "\020\023\037\077\055\022\116\100\122\106\127\113\001" +
    "\002\000\030\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7" +
    "\020\uffb7\037\uffb7\055\uffb7\116\uffb7\122\uffb7\127\uffb7\001" +
    "\002\000\056\021\uffd3\022\uffd3\035\uffd3\041\uffd3\061\uffd3" +
    "\062\uffd3\072\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103" +
    "\uffd3\106\uffd3\107\uffd3\113\uffd3\116\uffd3\117\uffd3\120\uffd3" +
    "\122\uffd3\123\uffd3\125\uffd3\126\uffd3\001\002\000\056\021" +
    "\uffd0\022\uffd0\035\uffd0\041\uffd0\061\uffd0\062\uffd0\072\uffd0" +
    "\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103\uffd0\106\uffd0\107" +
    "\uffd0\113\uffd0\116\uffd0\117\uffd0\120\uffd0\122\uffd0\123\uffd0" +
    "\125\uffd0\126\uffd0\001\002\000\030\004\uffb9\005\uffb9\006" +
    "\uffb9\007\uffb9\010\uffb9\020\uffb9\037\uffb9\055\uffb9\116\uffb9" +
    "\122\uffb9\127\uffb9\001\002\000\030\004\uffb5\005\uffb5\006" +
    "\uffb5\007\uffb5\010\uffb5\020\uffb5\037\uffb5\055\uffb5\116\uffb5" +
    "\122\uffb5\127\uffb5\001\002\000\030\004\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\020\uffb6\037\uffb6\055\uffb6\116\uffb6" +
    "\122\uffb6\127\uffb6\001\002\000\032\004\021\005\027\006" +
    "\025\007\020\010\117\020\023\037\077\055\022\116\100" +
    "\122\106\126\uff9d\127\113\001\002\000\030\004\uffb8\005" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\020\uffb8\037\uffb8\055\uffb8" +
    "\116\uffb8\122\uffb8\127\uffb8\001\002\000\006\120\154\126" +
    "\uff9d\001\002\000\004\126\151\001\002\000\024\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\020\uffc0\055\uffc0\126" +
    "\uffce\127\uffc0\001\002\000\056\021\uffd2\022\uffd2\035\uffd2" +
    "\041\uffd2\061\uffd2\062\uffd2\072\uffd2\077\uffd2\100\uffd2\101" +
    "\uffd2\102\uffd2\103\uffd2\106\uffd2\107\uffd2\113\uffd2\116\uffd2" +
    "\117\uffd2\120\uffd2\122\uffd2\123\uffd2\125\uffd2\126\uffd2\001" +
    "\002\000\004\126\uffcf\001\002\000\004\126\uffcc\001\002" +
    "\000\030\004\021\005\027\006\025\007\020\010\117\020" +
    "\023\037\077\055\022\116\100\122\106\127\113\001\002" +
    "\000\006\120\154\126\uff9d\001\002\000\004\126\uffcd\001" +
    "\002\000\056\021\uffd1\022\uffd1\035\uffd1\041\uffd1\061\uffd1" +
    "\062\uffd1\072\uffd1\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103" +
    "\uffd1\106\uffd1\107\uffd1\113\uffd1\116\uffd1\117\uffd1\120\uffd1" +
    "\122\uffd1\123\uffd1\125\uffd1\126\uffd1\001\002\000\056\021" +
    "\uffda\022\uffda\035\uffda\041\uffda\061\uffda\062\uffda\072\uffda" +
    "\077\uffda\100\uffda\101\uffda\102\uffda\103\uffda\106\uffda\107" +
    "\uffda\113\uffda\116\uffda\117\uffda\120\uffda\122\uffda\123\uffda" +
    "\125\uffda\126\uffda\001\002\000\056\021\uffe3\022\uffe3\035" +
    "\uffe3\041\uffe3\061\uffe3\062\uffe3\072\uffe3\077\uffe3\100\uffe3" +
    "\101\uffe3\102\uffe3\103\uffe3\106\uffe3\107\uffe3\113\uffe3\116" +
    "\uffe3\117\uffe3\120\uffe3\122\uffe3\123\uffe3\125\uffe3\126\uffe3" +
    "\001\002\000\030\004\uffad\005\uffad\006\uffad\007\uffad\010" +
    "\uffad\020\uffad\037\uffad\055\uffad\116\uffad\122\uffad\127\uffad" +
    "\001\002\000\056\021\uffe1\022\uffe1\035\uffe1\041\uffe1\061" +
    "\uffe1\062\uffe1\072\uffe1\077\uffe1\100\uffe1\101\uffe1\102\uffe1" +
    "\103\uffe1\106\uffe1\107\uffe1\113\uffe1\116\uffe1\117\uffe1\120" +
    "\uffe1\122\uffe1\123\uffe1\125\uffe1\126\uffe1\001\002\000\030" +
    "\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\020\uffae\037" +
    "\uffae\055\uffae\116\uffae\122\uffae\127\uffae\001\002\000\030" +
    "\004\021\005\027\006\025\007\020\010\117\020\023\037" +
    "\077\055\022\116\100\122\106\127\113\001\002\000\056" +
    "\021\uff9d\022\uff9d\035\164\041\uff9d\061\uff9d\062\uff9d\072" +
    "\162\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d\106\uff9d" +
    "\107\uff9d\113\uff9d\116\uff9d\117\uff9d\120\uff9d\122\uff9d\123" +
    "\uff9d\125\uff9d\126\uff9d\001\002\000\056\021\uffe2\022\uffe2" +
    "\035\uffe2\041\uffe2\061\uffe2\062\uffe2\072\uffe2\077\uffe2\100" +
    "\uffe2\101\uffe2\102\uffe2\103\uffe2\106\uffe2\107\uffe2\113\uffe2" +
    "\116\uffe2\117\uffe2\120\uffe2\122\uffe2\123\uffe2\125\uffe2\126" +
    "\uffe2\001\002\000\056\021\uffe0\022\uffe0\035\uffe0\041\uffe0" +
    "\061\uffe0\062\uffe0\072\uffe0\077\uffe0\100\uffe0\101\uffe0\102" +
    "\uffe0\103\uffe0\106\uffe0\107\uffe0\113\uffe0\116\uffe0\117\uffe0" +
    "\120\uffe0\122\uffe0\123\uffe0\125\uffe0\126\uffe0\001\002\000" +
    "\030\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\020\uffb4" +
    "\037\uffb4\055\uffb4\116\uffb4\122\uffb4\127\uffb4\001\002\000" +
    "\056\021\uffde\022\uffde\035\uffde\041\uffde\061\uffde\062\uffde" +
    "\072\uffde\077\uffde\100\uffde\101\uffde\102\uffde\103\uffde\106" +
    "\uffde\107\uffde\113\uffde\116\uffde\117\uffde\120\uffde\122\uffde" +
    "\123\uffde\125\uffde\126\uffde\001\002\000\030\004\uffb2\005" +
    "\uffb2\006\uffb2\007\uffb2\010\uffb2\020\uffb2\037\uffb2\055\uffb2" +
    "\116\uffb2\122\uffb2\127\uffb2\001\002\000\030\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\020\uffaf\037\uffaf\055\uffaf" +
    "\116\uffaf\122\uffaf\127\uffaf\001\002\000\030\004\021\005" +
    "\027\006\025\007\020\010\117\020\023\037\077\055\022" +
    "\116\100\122\106\127\113\001\002\000\030\004\uffb0\005" +
    "\uffb0\006\uffb0\007\uffb0\010\uffb0\020\uffb0\037\uffb0\055\uffb0" +
    "\116\uffb0\122\uffb0\127\uffb0\001\002\000\030\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\020\uffb3\037\uffb3\055\uffb3" +
    "\116\uffb3\122\uffb3\127\uffb3\001\002\000\030\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\020\uffb1\037\uffb1\055\uffb1" +
    "\116\uffb1\122\uffb1\127\uffb1\001\002\000\056\021\uff9d\022" +
    "\uff9d\035\uff9d\041\uff9d\061\uff9d\062\uff9d\072\uff9d\077\177" +
    "\100\173\101\171\102\174\103\200\106\176\107\uff9d\113" +
    "\uff9d\116\uff9d\117\uff9d\120\uff9d\122\uff9d\123\uff9d\125\uff9d" +
    "\126\uff9d\001\002\000\056\021\uffdf\022\uffdf\035\uffdf\041" +
    "\uffdf\061\uffdf\062\uffdf\072\uffdf\077\uffdf\100\uffdf\101\uffdf" +
    "\102\uffdf\103\uffdf\106\uffdf\107\uffdf\113\uffdf\116\uffdf\117" +
    "\uffdf\120\uffdf\122\uffdf\123\uffdf\125\uffdf\126\uffdf\001\002" +
    "\000\004\126\204\001\002\000\056\021\uffd5\022\uffd5\035" +
    "\uffd5\041\uffd5\061\uffd5\062\uffd5\072\uffd5\077\uffd5\100\uffd5" +
    "\101\uffd5\102\uffd5\103\uffd5\106\uffd5\107\uffd5\113\uffd5\116" +
    "\uffd5\117\uffd5\120\uffd5\122\uffd5\123\uffd5\125\uffd5\126\uffd5" +
    "\001\002\000\030\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010" +
    "\uffbd\020\uffbd\037\uffbd\055\uffbd\116\uffbd\122\uffbd\127\uffbd" +
    "\001\002\000\056\021\uffdb\022\uffdb\035\uffdb\041\uffdb\061" +
    "\uffdb\062\uffdb\072\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb" +
    "\103\uffdb\106\uffdb\107\uffdb\113\uffdb\116\uffdb\117\uffdb\120" +
    "\uffdb\122\uffdb\123\uffdb\125\uffdb\126\uffdb\001\002\000\056" +
    "\021\uffdd\022\uffdd\035\uffdd\041\uffdd\061\uffdd\062\uffdd\072" +
    "\uffdd\077\uffdd\100\uffdd\101\uffdd\102\uffdd\103\uffdd\106\uffdd" +
    "\107\uffdd\113\uffdd\116\uffdd\117\uffdd\120\uffdd\122\uffdd\123" +
    "\uffdd\125\uffdd\126\uffdd\001\002\000\030\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\020\uffbf\037\uffbf\055\uffbf\116" +
    "\uffbf\122\uffbf\127\uffbf\001\002\000\030\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\020\uffbb\037\uffbb\055\uffbb\116" +
    "\uffbb\122\uffbb\127\uffbb\001\002\000\030\004\021\005\027" +
    "\006\025\007\020\010\117\020\023\037\077\055\022\116" +
    "\100\122\106\127\113\001\002\000\030\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\020\uffbe\037\uffbe\055\uffbe\116" +
    "\uffbe\122\uffbe\127\uffbe\001\002\000\030\004\uffbc\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\020\uffbc\037\uffbc\055\uffbc\116" +
    "\uffbc\122\uffbc\127\uffbc\001\002\000\030\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\020\uffba\037\uffba\055\uffba\116" +
    "\uffba\122\uffba\127\uffba\001\002\000\056\021\uff9d\022\uff9d" +
    "\035\uff9d\041\211\061\uff9d\062\215\072\uff9d\077\uff9d\100" +
    "\uff9d\101\uff9d\102\uff9d\103\uff9d\106\uff9d\107\uff9d\113\214" +
    "\116\uff9d\117\213\120\uff9d\122\uff9d\123\210\125\205\126" +
    "\uff9d\001\002\000\056\021\uffdc\022\uffdc\035\uffdc\041\uffdc" +
    "\061\uffdc\062\uffdc\072\uffdc\077\uffdc\100\uffdc\101\uffdc\102" +
    "\uffdc\103\uffdc\106\uffdc\107\uffdc\113\uffdc\116\uffdc\117\uffdc" +
    "\120\uffdc\122\uffdc\123\uffdc\125\uffdc\126\uffdc\001\002\000" +
    "\056\021\uffd7\022\uffd7\035\uffd7\041\uffd7\061\uffd7\062\uffd7" +
    "\072\uffd7\077\uffd7\100\uffd7\101\uffd7\102\uffd7\103\uffd7\106" +
    "\uffd7\107\uffd7\113\uffd7\116\uffd7\117\uffd7\120\uffd7\122\uffd7" +
    "\123\uffd7\125\uffd7\126\uffd7\001\002\000\056\021\uffd9\022" +
    "\uffd9\035\uffd9\041\uffd9\061\uffd9\062\uffd9\072\uffd9\077\uffd9" +
    "\100\uffd9\101\uffd9\102\uffd9\103\uffd9\106\uffd9\107\uffd9\113" +
    "\uffd9\116\uffd9\117\uffd9\120\uffd9\122\uffd9\123\uffd9\125\uffd9" +
    "\126\uffd9\001\002\000\006\056\uffe5\057\uffe5\001\002\000" +
    "\004\022\224\001\002\000\042\004\021\005\027\006\025" +
    "\007\020\010\117\014\124\020\023\037\077\047\104\053" +
    "\101\055\022\056\uff9d\057\uff9d\116\100\122\106\127\113" +
    "\001\002\000\006\056\uff9d\057\226\001\002\000\040\004" +
    "\021\005\027\006\025\007\020\010\117\014\124\020\023" +
    "\037\077\047\104\053\101\055\022\056\uff9d\116\100\122" +
    "\106\127\113\001\002\000\004\056\231\001\002\000\004" +
    "\056\uffc5\001\002\000\042\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\014\uffc7\020\uffc7\037\uffc7\047\uffc7\053\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\116\uffc7\122\uffc7\127\uffc7\001" +
    "\002\000\004\056\uffc6\001\002\000\042\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\014\uffc8\020\uffc8\037\uffc8\047" +
    "\uffc8\053\uffc8\055\uffc8\056\uffc8\057\uffc8\116\uffc8\122\uffc8" +
    "\127\uffc8\001\002\000\004\110\235\001\002\000\030\004" +
    "\021\005\027\006\025\007\020\010\117\020\023\037\077" +
    "\055\022\116\100\122\106\127\113\001\002\000\004\021" +
    "\237\001\002\000\030\004\021\005\027\006\025\007\020" +
    "\010\117\020\023\037\077\055\022\116\100\122\106\127" +
    "\113\001\002\000\004\061\241\001\002\000\004\070\242" +
    "\001\002\000\040\004\021\005\027\006\025\007\020\010" +
    "\117\014\124\020\023\037\077\047\104\053\101\055\022" +
    "\056\uff9d\116\100\122\106\127\113\001\002\000\004\056" +
    "\244\001\002\000\042\004\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\014\uffc3\020\uffc3\037\uffc3\047\uffc3\053\uffc3\055" +
    "\uffc3\056\uffc3\057\uffc3\116\uffc3\122\uffc3\127\uffc3\001\002" +
    "\000\040\004\021\005\027\006\025\007\020\010\117\014" +
    "\124\020\023\037\077\047\104\053\101\055\022\056\uff9d" +
    "\116\100\122\106\127\113\001\002\000\004\056\247\001" +
    "\002\000\010\033\066\051\065\070\uff9d\001\002\000\004" +
    "\070\uffed\001\002\000\040\004\021\005\027\006\025\007" +
    "\020\010\117\014\124\020\023\037\077\047\104\053\101" +
    "\055\022\056\uff9d\116\100\122\106\127\113\001\002\000" +
    "\004\056\253\001\002\000\010\033\066\051\065\070\uff9d" +
    "\001\002\000\004\070\uffee\001\002\000\004\127\256\001" +
    "\002\000\022\023\055\024\054\030\052\042\050\044\053" +
    "\064\056\067\051\126\uff9d\001\002\000\004\010\264\001" +
    "\002\000\004\126\uffe8\001\002\000\004\126\uffea\001\002" +
    "\000\004\126\263\001\002\000\004\070\uffec\001\002\000" +
    "\006\120\267\126\uff9d\001\002\000\004\126\uffe9\001\002" +
    "\000\004\126\uffe6\001\002\000\020\023\055\024\054\030" +
    "\052\042\050\044\053\064\056\067\051\001\002\000\004" +
    "\010\271\001\002\000\006\120\267\126\uff9d\001\002\000" +
    "\004\126\uffe7\001\002\000\004\127\274\001\002\000\022" +
    "\023\055\024\054\030\052\042\050\044\053\064\056\067" +
    "\051\126\uff9d\001\002\000\004\126\276\001\002\000\004" +
    "\111\277\001\002\000\020\023\055\024\054\030\052\042" +
    "\050\044\053\064\056\067\051\001\002\000\004\070\uffeb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\007\007\010" +
    "\001\001\000\002\001\001\000\006\002\032\012\031\001" +
    "\001\000\010\002\014\010\012\011\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\060\023\061\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\014\010\030\011\015\001\001\000" +
    "\002\001\001\000\014\002\071\017\070\020\072\021\066" +
    "\022\067\001\001\000\002\001\001\000\010\002\036\013" +
    "\037\014\035\001\001\000\006\002\041\015\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\041\015\044\001\001\000\002\001\001\000\004\057" +
    "\046\001\001\000\006\002\057\016\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\060\063\061\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\036\013\062\014\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\074\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\002\102\026\120\027\101\031\114\033\113\035\111" +
    "\036\110\037\107\044\104\045\121\047\122\050\075\051" +
    "\115\056\106\060\117\061\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\125\027\222\031\114\033\113\035\111\036\110\037" +
    "\107\051\115\056\106\060\117\061\025\001\001\000\042" +
    "\002\102\026\221\027\101\031\114\033\113\035\111\036" +
    "\110\037\107\044\104\045\121\047\122\050\075\051\115" +
    "\056\106\060\117\061\025\001\001\000\002\001\001\000" +
    "\012\036\220\037\107\060\117\061\025\001\001\000\006" +
    "\002\125\051\217\001\001\000\002\001\001\000\010\002" +
    "\205\034\206\052\211\001\001\000\030\002\125\027\202" +
    "\031\114\033\113\035\111\036\110\037\107\051\115\056" +
    "\106\060\117\061\025\001\001\000\010\002\171\032\167" +
    "\054\174\001\001\000\010\002\162\030\160\055\164\001" +
    "\001\000\012\036\157\037\107\060\117\061\025\001\001" +
    "\000\012\002\137\040\133\043\136\053\134\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\002\125\027\124\031\114\033\113\035" +
    "\111\036\110\037\107\051\115\056\106\060\117\061\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\002\102\026\130\027\101\031\114\033\113" +
    "\035\111\036\110\037\107\044\104\045\121\047\122\050" +
    "\075\051\115\056\106\060\117\061\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\002\125\027\156\031\114\033\113\035\111" +
    "\036\110\037\107\051\115\056\106\060\117\061\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\002\147\027\145\031\114\033\113\035\111\036\110" +
    "\037\107\041\146\051\115\056\106\060\117\061\025\001" +
    "\001\000\002\001\001\000\006\002\152\042\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\125\027\154" +
    "\031\114\033\113\035\111\036\110\037\107\051\115\056" +
    "\106\060\117\061\025\001\001\000\006\002\152\042\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\002\125\031\165\033\113\035" +
    "\111\036\110\037\107\051\115\056\106\060\117\061\025" +
    "\001\001\000\010\002\162\030\166\055\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\125\033\200\035\111\036\110\037\107\051\115\056\106" +
    "\060\117\061\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\171\032\201\054\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\125\035" +
    "\215\036\110\037\107\051\115\056\106\060\117\061\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\205\034\216\052\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\002\102\026\224\027\101" +
    "\031\114\033\113\035\111\036\110\037\107\044\104\045" +
    "\121\047\122\050\075\051\115\056\106\060\117\061\025" +
    "\001\001\000\006\002\227\046\226\001\001\000\042\002" +
    "\102\026\231\027\101\031\114\033\113\035\111\036\110" +
    "\037\107\044\104\045\121\047\122\050\075\051\115\056" +
    "\106\060\117\061\025\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\002\125\027\235\031\114" +
    "\033\113\035\111\036\110\037\107\051\115\056\106\060" +
    "\117\061\025\001\001\000\002\001\001\000\030\002\125" +
    "\027\237\031\114\033\113\035\111\036\110\037\107\051" +
    "\115\056\106\060\117\061\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\002\102\026\242\027\101\031" +
    "\114\033\113\035\111\036\110\037\107\044\104\045\121" +
    "\047\122\050\075\051\115\056\106\060\117\061\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\002\102" +
    "\026\245\027\101\031\114\033\113\035\111\036\110\037" +
    "\107\044\104\045\121\047\122\050\075\051\115\056\106" +
    "\060\117\061\025\001\001\000\002\001\001\000\014\002" +
    "\071\017\247\020\072\021\066\022\067\001\001\000\002" +
    "\001\001\000\042\002\102\026\251\027\101\031\114\033" +
    "\113\035\111\036\110\037\107\044\104\045\121\047\122" +
    "\050\075\051\115\056\106\060\117\061\025\001\001\000" +
    "\002\001\001\000\014\002\071\017\253\020\072\021\066" +
    "\022\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\002\257\023\261\024\260\057\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\265\025\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\267\001" +
    "\001\000\002\001\001\000\006\002\265\025\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\257\023" +
    "\274\024\260\057\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\277\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);


        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), (linea+1)));
        System.out.println(ScannerABC.errores.size());
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);

        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), linea+1));
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {



  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PR_PROGRAM IDENTIFICADOR SeccionConstantes SeccionVariables Rutinas EntradaPrograma 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EntradaPrograma ::= PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EntradaPrograma",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SeccionConstantes ::= PR_CONST Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SeccionConstantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Constantes ::= Constante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Constantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Constante ::= IDENTIFICADOR O_EQUALS literal O_SEMICOLON Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SeccionVariables ::= PR_VAR Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SeccionVariables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Variables ::= Variable 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Variables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Variable ::= IDENTIFICADOR Identificadores O_COLON Tipo Inicializar O_SEMICOLON Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Identificadores ::= O_COMMA IDENTIFICADOR Identificadores 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Identificadores ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Inicializar ::= O_EQUALS literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Inicializar ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Rutinas ::= Rutina 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Rutinas ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Rutina ::= EncabezadoProcedimiento PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Rutina ::= EncabezadoFuncion PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Parametro ::= Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Parametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // masParametros ::= O_COMMA Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // masParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Instrucciones ::= Instruccion Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Instrucciones ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Expresion ::= Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ExpresionOperadoresLogicos ::= OperadoresLogicosBinarios Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ExpresionOperadoresLogicos ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expresion2 ::= Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExpresionOperadoresComparacion ::= OperadoresComparacion Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpresionOperadoresComparacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expresion3 ::= Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExpresionOperadoresEnteros ::= OperadoresEnteros Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExpresionOperadoresEnteros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion4 ::= IncrementoDecremento Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expresion4 ::= OperadoresLogicosUnarios Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expresion4 ::= Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion5 ::= Expresion6 IncrementoDecremento 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion5",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expresion6 ::= IDENTIFICADOR Expresion7 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion6 ::= literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expresion7 ::= ExpresionAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ExpresionAsignacion ::= OperadorAsignacion Expresion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExpresionAsignacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LParametro ::= Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LParametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ListaParametros ::= O_COMMA Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ListaParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Instruccion ::= IfThenElse 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Instruccion ::= While 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Instruccion ::= For 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Instruccion ::= Expresion O_SEMICOLON 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IfThenElse ::= PR_IF Expresion PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Else ::= PR_ELSE Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Else ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // While ::= PR_WHILE Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // For ::= PR_FOR IDENTIFICADOR O_COLON_EQUALS Expresion PR_TO Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IncrementoDecremento ::= O_PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IncrementoDecremento ::= O_MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IncrementoDecremento ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OperadoresEnteros ::= O_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OperadoresEnteros ::= O_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OperadoresEnteros ::= O_ASTERISK 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OperadoresEnteros ::= O_SLASH 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OperadoresEnteros ::= O_MOD 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OperadoresEnteros ::= O_DIV 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OperadorAsignacion ::= O_COLON_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OperadorAsignacion ::= O_PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OperadorAsignacion ::= O_MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OperadorAsignacion ::= O_ASTERISK_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OperadorAsignacion ::= O_SLASH_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OperadoresComparacion ::= O_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OperadoresComparacion ::= O_GREATER_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OperadoresComparacion ::= O_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OperadoresComparacion ::= O_LESS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OperadoresComparacion ::= O_LESS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OperadoresComparacion ::= O_LESS_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OperadoresLogicosBinarios ::= O_OR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OperadoresLogicosBinarios ::= O_AND 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OperadoresLogicosUnarios ::= O_NOT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosUnarios",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Tipo ::= PR_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Tipo ::= PR_INT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Tipo ::= PR_CHAR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Tipo ::= PR_LONGINT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Tipo ::= PR_SHORTINT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Tipo ::= PR_STRING 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Tipo ::= PR_REAL 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= L_INTEGER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= L_FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= L_STRING 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // literal ::= L_CHAR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // literal ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Boolean ::= PR_TRUE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Boolean ::= PR_FALSE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // empty ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("empty",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
