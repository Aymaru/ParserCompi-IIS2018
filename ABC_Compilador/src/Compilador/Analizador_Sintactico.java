
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\156\000\002\002\004\000\002\003\010\000\002\006" +
    "\005\000\002\007\004\000\002\007\003\000\002\010\003" +
    "\000\002\010\003\000\002\011\007\000\002\011\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\003\000\002" +
    "\014\004\000\002\014\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\011\000\002\016\004\000\002\020\004" +
    "\000\002\020\003\000\002\021\005\000\002\021\003\000" +
    "\002\022\004\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\007\000\002\024\007\000\002\025" +
    "\007\000\002\025\010\000\002\026\011\000\002\026\012" +
    "\000\002\027\003\000\002\030\005\000\002\030\003\000" +
    "\002\031\006\000\002\031\003\000\002\032\004\000\002" +
    "\032\003\000\002\033\004\000\002\034\005\000\002\034" +
    "\003\000\002\035\004\000\002\036\005\000\002\036\003" +
    "\000\002\037\004\000\002\040\005\000\002\040\003\000" +
    "\002\041\004\000\002\041\004\000\002\041\003\000\002" +
    "\042\004\000\002\043\004\000\002\043\005\000\002\043" +
    "\003\000\002\044\003\000\002\044\005\000\002\047\004" +
    "\000\002\047\003\000\002\045\004\000\002\045\003\000" +
    "\002\046\005\000\002\046\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\004\000\002\051" +
    "\010\000\002\052\004\000\002\052\003\000\002\053\010" +
    "\000\002\054\014\000\002\055\003\000\002\055\003\000" +
    "\002\055\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\057\003\000\002\057\003\000\002\057\003" +
    "\000\002\057\003\000\002\057\003\000\002\060\003\000" +
    "\002\060\003\000\002\060\003\000\002\060\003\000\002" +
    "\060\003\000\002\060\003\000\002\061\003\000\002\061" +
    "\003\000\002\062\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\064\003\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\065\003\000\002\065\003\000\002\002\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\032\004\001\002\000\004\010\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\014\015\uff94\033\uff94\051\uff94\063\012\070\uff94\001" +
    "\002\000\012\015\ufffd\033\ufffd\051\ufffd\070\ufffd\001\002" +
    "\000\012\015\314\033\uff94\051\uff94\070\uff94\001\002\000" +
    "\016\003\014\010\015\015\uff94\033\uff94\051\uff94\070\uff94" +
    "\001\002\000\012\015\ufffe\033\ufffe\051\ufffe\070\ufffe\001" +
    "\002\000\014\015\035\033\044\051\042\070\uff94\107\037" +
    "\001\002\000\004\101\020\001\002\000\012\015\ufffb\033" +
    "\ufffb\051\ufffb\070\ufffb\001\002\000\012\015\ufffc\033\ufffc" +
    "\051\ufffc\070\ufffc\001\002\000\016\004\021\005\027\006" +
    "\026\007\022\020\025\055\023\001\002\000\056\021\uff9b" +
    "\022\uff9b\035\uff9b\041\uff9b\061\uff9b\062\uff9b\072\uff9b\077" +
    "\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b\106\uff9b\107\uff9b" +
    "\113\uff9b\116\uff9b\117\uff9b\120\uff9b\122\uff9b\123\uff9b\125" +
    "\uff9b\126\uff9b\001\002\000\056\021\uff99\022\uff99\035\uff99" +
    "\041\uff99\061\uff99\062\uff99\072\uff99\077\uff99\100\uff99\101" +
    "\uff99\102\uff99\103\uff99\106\uff99\107\uff99\113\uff99\116\uff99" +
    "\117\uff99\120\uff99\122\uff99\123\uff99\125\uff99\126\uff99\001" +
    "\002\000\056\021\uff95\022\uff95\035\uff95\041\uff95\061\uff95" +
    "\062\uff95\072\uff95\077\uff95\100\uff95\101\uff95\102\uff95\103" +
    "\uff95\106\uff95\107\uff95\113\uff95\116\uff95\117\uff95\120\uff95" +
    "\122\uff95\123\uff95\125\uff95\126\uff95\001\002\000\004\107" +
    "\031\001\002\000\056\021\uff96\022\uff96\035\uff96\041\uff96" +
    "\061\uff96\062\uff96\072\uff96\077\uff96\100\uff96\101\uff96\102" +
    "\uff96\103\uff96\106\uff96\107\uff96\113\uff96\116\uff96\117\uff96" +
    "\120\uff96\122\uff96\123\uff96\125\uff96\126\uff96\001\002\000" +
    "\056\021\uff9a\022\uff9a\035\uff9a\041\uff9a\061\uff9a\062\uff9a" +
    "\072\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a\103\uff9a\106" +
    "\uff9a\107\uff9a\113\uff9a\116\uff9a\117\uff9a\120\uff9a\122\uff9a" +
    "\123\uff9a\125\uff9a\126\uff9a\001\002\000\056\021\uff98\022" +
    "\uff98\035\uff98\041\uff98\061\uff98\062\uff98\072\uff98\077\uff98" +
    "\100\uff98\101\uff98\102\uff98\103\uff98\106\uff98\107\uff98\113" +
    "\uff98\116\uff98\117\uff98\120\uff98\122\uff98\123\uff98\125\uff98" +
    "\126\uff98\001\002\000\056\021\uff97\022\uff97\035\uff97\041" +
    "\uff97\061\uff97\062\uff97\072\uff97\077\uff97\100\uff97\101\uff97" +
    "\102\uff97\103\uff97\106\uff97\107\uff97\113\uff97\116\uff97\117" +
    "\uff97\120\uff97\122\uff97\123\uff97\125\uff97\126\uff97\001\002" +
    "\000\016\003\014\010\015\015\uff94\033\uff94\051\uff94\070" +
    "\uff94\001\002\000\012\015\ufffa\033\ufffa\051\ufffa\070\ufffa" +
    "\001\002\000\012\015\ufff6\033\ufff6\051\ufff6\070\ufff6\001" +
    "\002\000\012\015\uffe9\033\uffe9\051\uffe9\070\uffe9\001\002" +
    "\000\016\003\264\010\266\015\uff94\033\uff94\051\uff94\070" +
    "\uff94\001\002\000\004\070\260\001\002\000\016\003\014" +
    "\010\015\015\uff94\033\uff94\051\uff94\070\uff94\001\002\000" +
    "\004\070\106\001\002\000\012\015\uffe8\033\uffe8\051\uffe8" +
    "\070\uffe8\001\002\000\004\010\074\001\002\000\012\015" +
    "\ufff9\033\ufff9\051\ufff9\070\ufff9\001\002\000\004\010\045" +
    "\001\002\000\004\127\046\001\002\000\024\003\uff94\023" +
    "\060\024\051\030\047\042\054\044\061\064\052\067\057" +
    "\126\uff94\001\002\000\012\010\uff9c\070\uff9c\101\uff9c\107" +
    "\uff9c\001\002\000\004\010\065\001\002\000\012\010\uff9e" +
    "\070\uff9e\101\uff9e\107\uff9e\001\002\000\012\010\uffa0\070" +
    "\uffa0\101\uffa0\107\uffa0\001\002\000\006\003\uffdf\126\uffdf" +
    "\001\002\000\012\010\uff9f\070\uff9f\101\uff9f\107\uff9f\001" +
    "\002\000\006\003\uffe1\126\uffe1\001\002\000\006\003\062" +
    "\126\063\001\002\000\012\010\uffa2\070\uffa2\101\uffa2\107" +
    "\uffa2\001\002\000\012\010\uff9d\070\uff9d\101\uff9d\107\uff9d" +
    "\001\002\000\012\010\uffa1\070\uffa1\101\uffa1\107\uffa1\001" +
    "\002\000\004\126\064\001\002\000\004\070\uffe5\001\002" +
    "\000\004\070\uffe4\001\002\000\010\003\uff94\120\070\126" +
    "\uff94\001\002\000\006\003\uffe0\126\uffe0\001\002\000\006" +
    "\003\uffdd\126\uffdd\001\002\000\020\023\060\024\051\030" +
    "\047\042\054\044\061\064\052\067\057\001\002\000\004" +
    "\010\072\001\002\000\010\003\uff94\120\070\126\uff94\001" +
    "\002\000\006\003\uffde\126\uffde\001\002\000\004\127\075" +
    "\001\002\000\024\003\uff94\023\060\024\051\030\047\042" +
    "\054\044\061\064\052\067\057\126\uff94\001\002\000\006" +
    "\003\077\126\100\001\002\000\004\126\103\001\002\000" +
    "\004\111\101\001\002\000\020\023\060\024\051\030\047" +
    "\042\054\044\061\064\052\067\057\001\002\000\004\070" +
    "\uffe3\001\002\000\004\111\104\001\002\000\020\023\060" +
    "\024\051\030\047\042\054\044\061\064\052\067\057\001" +
    "\002\000\004\070\uffe2\001\002\000\040\004\021\005\027" +
    "\006\026\007\022\010\131\014\135\020\025\037\110\047" +
    "\116\053\112\055\023\056\uff94\116\111\122\117\127\125" +
    "\001\002\000\042\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\014\uffc0\020\uffc0\037\uffc0\047\uffc0\053\uffc0\055\uffc0" +
    "\056\uffc0\057\uffc0\116\uffc0\122\uffc0\127\uffc0\001\002\000" +
    "\022\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\020\uffa3" +
    "\055\uffa3\127\uffa3\001\002\000\076\004\uffb8\005\uffb8\006" +
    "\uffb8\007\uffb8\010\uffb8\020\uffb8\021\uffb8\022\uffb8\035\uffb8" +
    "\041\uffb8\055\uffb8\061\uffb8\062\uffb8\072\uffb8\077\uffb8\100" +
    "\uffb8\101\uffb8\102\uffb8\103\uffb8\106\uffb8\107\uffb8\113\uffb8" +
    "\116\uffb8\117\uffb8\120\uffb8\122\uffb8\123\uffb8\125\uffb8\126" +
    "\uffb8\127\uffb8\001\002\000\004\010\246\001\002\000\004" +
    "\107\245\001\002\000\026\004\uffb7\005\uffb7\006\uffb7\007" +
    "\uffb7\010\uffb7\020\uffb7\055\uffb7\056\uffdb\057\uffdb\127\uffb7" +
    "\001\002\000\042\004\021\005\027\006\026\007\022\010" +
    "\131\014\135\020\025\037\110\047\116\053\112\055\023" +
    "\056\uff94\057\uff94\116\111\122\117\127\125\001\002\000" +
    "\030\004\021\005\027\006\026\007\022\010\131\020\025" +
    "\037\110\055\023\116\111\122\117\127\125\001\002\000" +
    "\076\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\035\uffb9\041\uffb9\055\uffb9\061\uffb9\062" +
    "\uffb9\072\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9" +
    "\106\uffb9\107\uffb9\113\uffb9\116\uffb9\117\uffb9\120\uffb9\122" +
    "\uffb9\123\uffb9\125\uffb9\126\uffb9\127\uffb9\001\002\000\022" +
    "\004\021\005\027\006\026\007\022\010\131\020\025\055" +
    "\023\127\125\001\002\000\056\021\uff94\022\uff94\035\uff94" +
    "\041\uff94\061\uff94\062\uff94\072\uff94\077\uff94\100\uff94\101" +
    "\uff94\102\uff94\103\uff94\106\uff94\107\uff94\113\uff94\116\111" +
    "\117\uff94\120\uff94\122\117\123\uff94\125\uff94\126\uff94\001" +
    "\002\000\056\021\uffcf\022\uffcf\035\uffcf\041\uffcf\061\uffcf" +
    "\062\uffcf\072\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103" +
    "\uffcf\106\uffcf\107\uffcf\113\uffcf\116\uffcf\117\uffcf\120\uffcf" +
    "\122\uffcf\123\uffcf\125\uffcf\126\uffcf\001\002\000\056\021" +
    "\uff94\022\uff94\035\uff94\041\223\061\uff94\062\227\072\uff94" +
    "\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94\106\uff94\107" +
    "\uff94\113\226\116\uff94\117\225\120\uff94\122\uff94\123\222" +
    "\125\217\126\uff94\001\002\000\056\021\uff94\022\uff94\035" +
    "\uff94\041\uff94\061\uff94\062\uff94\072\uff94\077\213\100\207" +
    "\101\205\102\210\103\214\106\212\107\uff94\113\uff94\116" +
    "\uff94\117\uff94\120\uff94\122\uff94\123\uff94\125\uff94\126\uff94" +
    "\001\002\000\030\004\021\005\027\006\026\007\022\010" +
    "\131\020\025\037\110\055\023\116\111\122\117\127\125" +
    "\001\002\000\056\021\uff94\022\uff94\035\176\041\uff94\061" +
    "\uff94\062\uff94\072\174\077\uff94\100\uff94\101\uff94\102\uff94" +
    "\103\uff94\106\uff94\107\uff94\113\uff94\116\uff94\117\uff94\120" +
    "\uff94\122\uff94\123\uff94\125\uff94\126\uff94\001\002\000\022" +
    "\004\021\005\027\006\026\007\022\010\131\020\025\055" +
    "\023\127\125\001\002\000\056\021\uffcb\022\uffcb\035\uffcb" +
    "\041\uffcb\061\uffcb\062\uffcb\072\uffcb\077\uffcb\100\uffcb\101" +
    "\uffcb\102\uffcb\103\uffcb\106\uffcb\107\uffcb\113\uffcb\116\uffcb" +
    "\117\uffcb\120\uffcb\122\uffcb\123\uffcb\125\uffcb\126\uffcb\001" +
    "\002\000\072\021\uff94\022\uff94\035\uff94\041\uff94\061\uff94" +
    "\062\uff94\072\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103" +
    "\uff94\106\uff94\107\uff94\110\153\112\154\113\uff94\115\150" +
    "\116\uff94\117\uff94\120\uff94\121\157\122\uff94\123\uff94\124" +
    "\155\125\uff94\126\uff94\127\156\001\002\000\004\056\144" +
    "\001\002\000\042\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010" +
    "\uffc1\014\uffc1\020\uffc1\037\uffc1\047\uffc1\053\uffc1\055\uffc1" +
    "\056\uffc1\057\uffc1\116\uffc1\122\uffc1\127\uffc1\001\002\000" +
    "\042\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\014\uffc2" +
    "\020\uffc2\037\uffc2\047\uffc2\053\uffc2\055\uffc2\056\uffc2\057" +
    "\uffc2\116\uffc2\122\uffc2\127\uffc2\001\002\000\030\004\021" +
    "\005\027\006\026\007\022\010\131\020\025\037\110\055" +
    "\023\116\111\122\117\127\125\001\002\000\004\061\140" +
    "\001\002\000\076\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\035\uffb7\041\uffb7\055\uffb7" +
    "\061\uffb7\062\uffb7\072\uffb7\077\uffb7\100\uffb7\101\uffb7\102" +
    "\uffb7\103\uffb7\106\uffb7\107\uffb7\113\uffb7\116\uffb7\117\uffb7" +
    "\120\uffb7\122\uffb7\123\uffb7\125\uffb7\126\uffb7\127\uffb7\001" +
    "\002\000\004\070\141\001\002\000\040\004\021\005\027" +
    "\006\026\007\022\010\131\014\135\020\025\037\110\047" +
    "\116\053\112\055\023\056\uff94\116\111\122\117\127\125" +
    "\001\002\000\004\056\143\001\002\000\042\004\uffbb\005" +
    "\uffbb\006\uffbb\007\uffbb\010\uffbb\014\uffbb\020\uffbb\037\uffbb" +
    "\047\uffbb\053\uffbb\055\uffbb\056\uffbb\057\uffbb\116\uffbb\122" +
    "\uffbb\127\uffbb\001\002\000\012\015\uff94\033\044\051\042" +
    "\070\uff94\001\002\000\012\015\uffe7\033\uffe7\051\uffe7\070" +
    "\uffe7\001\002\000\056\021\uffcd\022\uffcd\035\uffcd\041\uffcd" +
    "\061\uffcd\062\uffcd\072\uffcd\077\uffcd\100\uffcd\101\uffcd\102" +
    "\uffcd\103\uffcd\106\uffcd\107\uffcd\113\uffcd\116\uffcd\117\uffcd" +
    "\120\uffcd\122\uffcd\123\uffcd\125\uffcd\126\uffcd\001\002\000" +
    "\030\004\021\005\027\006\026\007\022\010\131\020\025" +
    "\037\110\055\023\116\111\122\117\127\125\001\002\000" +
    "\030\004\uffae\005\uffae\006\uffae\007\uffae\010\uffae\020\uffae" +
    "\037\uffae\055\uffae\116\uffae\122\uffae\127\uffae\001\002\000" +
    "\056\021\uffca\022\uffca\035\uffca\041\uffca\061\uffca\062\uffca" +
    "\072\uffca\077\uffca\100\uffca\101\uffca\102\uffca\103\uffca\106" +
    "\uffca\107\uffca\113\uffca\116\uffca\117\uffca\120\uffca\122\uffca" +
    "\123\uffca\125\uffca\126\uffca\001\002\000\056\021\uffc7\022" +
    "\uffc7\035\uffc7\041\uffc7\061\uffc7\062\uffc7\072\uffc7\077\uffc7" +
    "\100\uffc7\101\uffc7\102\uffc7\103\uffc7\106\uffc7\107\uffc7\113" +
    "\uffc7\116\uffc7\117\uffc7\120\uffc7\122\uffc7\123\uffc7\125\uffc7" +
    "\126\uffc7\001\002\000\030\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\020\uffb0\037\uffb0\055\uffb0\116\uffb0\122\uffb0" +
    "\127\uffb0\001\002\000\030\004\uffac\005\uffac\006\uffac\007" +
    "\uffac\010\uffac\020\uffac\037\uffac\055\uffac\116\uffac\122\uffac" +
    "\127\uffac\001\002\000\030\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\020\uffad\037\uffad\055\uffad\116\uffad\122\uffad" +
    "\127\uffad\001\002\000\032\004\021\005\027\006\026\007" +
    "\022\010\131\020\025\037\110\055\023\116\111\122\117" +
    "\126\uff94\127\125\001\002\000\030\004\uffaf\005\uffaf\006" +
    "\uffaf\007\uffaf\010\uffaf\020\uffaf\037\uffaf\055\uffaf\116\uffaf" +
    "\122\uffaf\127\uffaf\001\002\000\006\120\166\126\uff94\001" +
    "\002\000\004\126\163\001\002\000\024\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\020\uffb7\055\uffb7\126\uffc5\127" +
    "\uffb7\001\002\000\056\021\uffc9\022\uffc9\035\uffc9\041\uffc9" +
    "\061\uffc9\062\uffc9\072\uffc9\077\uffc9\100\uffc9\101\uffc9\102" +
    "\uffc9\103\uffc9\106\uffc9\107\uffc9\113\uffc9\116\uffc9\117\uffc9" +
    "\120\uffc9\122\uffc9\123\uffc9\125\uffc9\126\uffc9\001\002\000" +
    "\004\126\uffc6\001\002\000\004\126\uffc3\001\002\000\030" +
    "\004\021\005\027\006\026\007\022\010\131\020\025\037" +
    "\110\055\023\116\111\122\117\127\125\001\002\000\006" +
    "\120\166\126\uff94\001\002\000\004\126\uffc4\001\002\000" +
    "\056\021\uffc8\022\uffc8\035\uffc8\041\uffc8\061\uffc8\062\uffc8" +
    "\072\uffc8\077\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\106" +
    "\uffc8\107\uffc8\113\uffc8\116\uffc8\117\uffc8\120\uffc8\122\uffc8" +
    "\123\uffc8\125\uffc8\126\uffc8\001\002\000\056\021\uffd1\022" +
    "\uffd1\035\uffd1\041\uffd1\061\uffd1\062\uffd1\072\uffd1\077\uffd1" +
    "\100\uffd1\101\uffd1\102\uffd1\103\uffd1\106\uffd1\107\uffd1\113" +
    "\uffd1\116\uffd1\117\uffd1\120\uffd1\122\uffd1\123\uffd1\125\uffd1" +
    "\126\uffd1\001\002\000\056\021\uffda\022\uffda\035\uffda\041" +
    "\uffda\061\uffda\062\uffda\072\uffda\077\uffda\100\uffda\101\uffda" +
    "\102\uffda\103\uffda\106\uffda\107\uffda\113\uffda\116\uffda\117" +
    "\uffda\120\uffda\122\uffda\123\uffda\125\uffda\126\uffda\001\002" +
    "\000\030\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\020" +
    "\uffa4\037\uffa4\055\uffa4\116\uffa4\122\uffa4\127\uffa4\001\002" +
    "\000\056\021\uffd8\022\uffd8\035\uffd8\041\uffd8\061\uffd8\062" +
    "\uffd8\072\uffd8\077\uffd8\100\uffd8\101\uffd8\102\uffd8\103\uffd8" +
    "\106\uffd8\107\uffd8\113\uffd8\116\uffd8\117\uffd8\120\uffd8\122" +
    "\uffd8\123\uffd8\125\uffd8\126\uffd8\001\002\000\030\004\uffa5" +
    "\005\uffa5\006\uffa5\007\uffa5\010\uffa5\020\uffa5\037\uffa5\055" +
    "\uffa5\116\uffa5\122\uffa5\127\uffa5\001\002\000\030\004\021" +
    "\005\027\006\026\007\022\010\131\020\025\037\110\055" +
    "\023\116\111\122\117\127\125\001\002\000\056\021\uff94" +
    "\022\uff94\035\176\041\uff94\061\uff94\062\uff94\072\174\077" +
    "\uff94\100\uff94\101\uff94\102\uff94\103\uff94\106\uff94\107\uff94" +
    "\113\uff94\116\uff94\117\uff94\120\uff94\122\uff94\123\uff94\125" +
    "\uff94\126\uff94\001\002\000\056\021\uffd9\022\uffd9\035\uffd9" +
    "\041\uffd9\061\uffd9\062\uffd9\072\uffd9\077\uffd9\100\uffd9\101" +
    "\uffd9\102\uffd9\103\uffd9\106\uffd9\107\uffd9\113\uffd9\116\uffd9" +
    "\117\uffd9\120\uffd9\122\uffd9\123\uffd9\125\uffd9\126\uffd9\001" +
    "\002\000\004\126\203\001\002\000\056\021\uffcc\022\uffcc" +
    "\035\uffcc\041\uffcc\061\uffcc\062\uffcc\072\uffcc\077\uffcc\100" +
    "\uffcc\101\uffcc\102\uffcc\103\uffcc\106\uffcc\107\uffcc\113\uffcc" +
    "\116\uffcc\117\uffcc\120\uffcc\122\uffcc\123\uffcc\125\uffcc\126" +
    "\uffcc\001\002\000\056\021\uffd7\022\uffd7\035\uffd7\041\uffd7" +
    "\061\uffd7\062\uffd7\072\uffd7\077\uffd7\100\uffd7\101\uffd7\102" +
    "\uffd7\103\uffd7\106\uffd7\107\uffd7\113\uffd7\116\uffd7\117\uffd7" +
    "\120\uffd7\122\uffd7\123\uffd7\125\uffd7\126\uffd7\001\002\000" +
    "\030\004\uffab\005\uffab\006\uffab\007\uffab\010\uffab\020\uffab" +
    "\037\uffab\055\uffab\116\uffab\122\uffab\127\uffab\001\002\000" +
    "\056\021\uffd5\022\uffd5\035\uffd5\041\uffd5\061\uffd5\062\uffd5" +
    "\072\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\106" +
    "\uffd5\107\uffd5\113\uffd5\116\uffd5\117\uffd5\120\uffd5\122\uffd5" +
    "\123\uffd5\125\uffd5\126\uffd5\001\002\000\030\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\020\uffa9\037\uffa9\055\uffa9" +
    "\116\uffa9\122\uffa9\127\uffa9\001\002\000\030\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\020\uffa6\037\uffa6\055\uffa6" +
    "\116\uffa6\122\uffa6\127\uffa6\001\002\000\030\004\021\005" +
    "\027\006\026\007\022\010\131\020\025\037\110\055\023" +
    "\116\111\122\117\127\125\001\002\000\030\004\uffa7\005" +
    "\uffa7\006\uffa7\007\uffa7\010\uffa7\020\uffa7\037\uffa7\055\uffa7" +
    "\116\uffa7\122\uffa7\127\uffa7\001\002\000\030\004\uffaa\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\020\uffaa\037\uffaa\055\uffaa" +
    "\116\uffaa\122\uffaa\127\uffaa\001\002\000\030\004\uffa8\005" +
    "\uffa8\006\uffa8\007\uffa8\010\uffa8\020\uffa8\037\uffa8\055\uffa8" +
    "\116\uffa8\122\uffa8\127\uffa8\001\002\000\056\021\uff94\022" +
    "\uff94\035\uff94\041\uff94\061\uff94\062\uff94\072\uff94\077\213" +
    "\100\207\101\205\102\210\103\214\106\212\107\uff94\113" +
    "\uff94\116\uff94\117\uff94\120\uff94\122\uff94\123\uff94\125\uff94" +
    "\126\uff94\001\002\000\056\021\uffd6\022\uffd6\035\uffd6\041" +
    "\uffd6\061\uffd6\062\uffd6\072\uffd6\077\uffd6\100\uffd6\101\uffd6" +
    "\102\uffd6\103\uffd6\106\uffd6\107\uffd6\113\uffd6\116\uffd6\117" +
    "\uffd6\120\uffd6\122\uffd6\123\uffd6\125\uffd6\126\uffd6\001\002" +
    "\000\030\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\020" +
    "\uffb4\037\uffb4\055\uffb4\116\uffb4\122\uffb4\127\uffb4\001\002" +
    "\000\056\021\uffd2\022\uffd2\035\uffd2\041\uffd2\061\uffd2\062" +
    "\uffd2\072\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2" +
    "\106\uffd2\107\uffd2\113\uffd2\116\uffd2\117\uffd2\120\uffd2\122" +
    "\uffd2\123\uffd2\125\uffd2\126\uffd2\001\002\000\056\021\uffd4" +
    "\022\uffd4\035\uffd4\041\uffd4\061\uffd4\062\uffd4\072\uffd4\077" +
    "\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\106\uffd4\107\uffd4" +
    "\113\uffd4\116\uffd4\117\uffd4\120\uffd4\122\uffd4\123\uffd4\125" +
    "\uffd4\126\uffd4\001\002\000\030\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\020\uffb6\037\uffb6\055\uffb6\116\uffb6\122" +
    "\uffb6\127\uffb6\001\002\000\030\004\uffb2\005\uffb2\006\uffb2" +
    "\007\uffb2\010\uffb2\020\uffb2\037\uffb2\055\uffb2\116\uffb2\122" +
    "\uffb2\127\uffb2\001\002\000\030\004\021\005\027\006\026" +
    "\007\022\010\131\020\025\037\110\055\023\116\111\122" +
    "\117\127\125\001\002\000\030\004\uffb5\005\uffb5\006\uffb5" +
    "\007\uffb5\010\uffb5\020\uffb5\037\uffb5\055\uffb5\116\uffb5\122" +
    "\uffb5\127\uffb5\001\002\000\030\004\uffb3\005\uffb3\006\uffb3" +
    "\007\uffb3\010\uffb3\020\uffb3\037\uffb3\055\uffb3\116\uffb3\122" +
    "\uffb3\127\uffb3\001\002\000\030\004\uffb1\005\uffb1\006\uffb1" +
    "\007\uffb1\010\uffb1\020\uffb1\037\uffb1\055\uffb1\116\uffb1\122" +
    "\uffb1\127\uffb1\001\002\000\056\021\uff94\022\uff94\035\uff94" +
    "\041\223\061\uff94\062\227\072\uff94\077\uff94\100\uff94\101" +
    "\uff94\102\uff94\103\uff94\106\uff94\107\uff94\113\226\116\uff94" +
    "\117\225\120\uff94\122\uff94\123\222\125\217\126\uff94\001" +
    "\002\000\056\021\uffd3\022\uffd3\035\uffd3\041\uffd3\061\uffd3" +
    "\062\uffd3\072\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3\103" +
    "\uffd3\106\uffd3\107\uffd3\113\uffd3\116\uffd3\117\uffd3\120\uffd3" +
    "\122\uffd3\123\uffd3\125\uffd3\126\uffd3\001\002\000\056\021" +
    "\uffce\022\uffce\035\uffce\041\uffce\061\uffce\062\uffce\072\uffce" +
    "\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\106\uffce\107" +
    "\uffce\113\uffce\116\uffce\117\uffce\120\uffce\122\uffce\123\uffce" +
    "\125\uffce\126\uffce\001\002\000\056\021\uffd0\022\uffd0\035" +
    "\uffd0\041\uffd0\061\uffd0\062\uffd0\072\uffd0\077\uffd0\100\uffd0" +
    "\101\uffd0\102\uffd0\103\uffd0\106\uffd0\107\uffd0\113\uffd0\116" +
    "\uffd0\117\uffd0\120\uffd0\122\uffd0\123\uffd0\125\uffd0\126\uffd0" +
    "\001\002\000\004\022\235\001\002\000\042\004\021\005" +
    "\027\006\026\007\022\010\131\014\135\020\025\037\110" +
    "\047\116\053\112\055\023\056\uff94\057\uff94\116\111\122" +
    "\117\127\125\001\002\000\006\056\uff94\057\237\001\002" +
    "\000\040\004\021\005\027\006\026\007\022\010\131\014" +
    "\135\020\025\037\110\047\116\053\112\055\023\056\uff94" +
    "\116\111\122\117\127\125\001\002\000\004\056\242\001" +
    "\002\000\004\056\uffbc\001\002\000\042\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\014\uffbe\020\uffbe\037\uffbe\047" +
    "\uffbe\053\uffbe\055\uffbe\056\uffbe\057\uffbe\116\uffbe\122\uffbe" +
    "\127\uffbe\001\002\000\004\056\uffbd\001\002\000\006\056" +
    "\uffdc\057\uffdc\001\002\000\042\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\010\uffbf\014\uffbf\020\uffbf\037\uffbf\047\uffbf\053" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\116\uffbf\122\uffbf\127\uffbf" +
    "\001\002\000\004\110\247\001\002\000\030\004\021\005" +
    "\027\006\026\007\022\010\131\020\025\037\110\055\023" +
    "\116\111\122\117\127\125\001\002\000\004\021\251\001" +
    "\002\000\030\004\021\005\027\006\026\007\022\010\131" +
    "\020\025\037\110\055\023\116\111\122\117\127\125\001" +
    "\002\000\004\061\253\001\002\000\004\070\254\001\002" +
    "\000\040\004\021\005\027\006\026\007\022\010\131\014" +
    "\135\020\025\037\110\047\116\053\112\055\023\056\uff94" +
    "\116\111\122\117\127\125\001\002\000\004\056\256\001" +
    "\002\000\042\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\014\uffba\020\uffba\037\uffba\047\uffba\053\uffba\055\uffba\056" +
    "\uffba\057\uffba\116\uffba\122\uffba\127\uffba\001\002\000\012" +
    "\015\ufff8\033\ufff8\051\ufff8\070\ufff8\001\002\000\040\004" +
    "\021\005\027\006\026\007\022\010\131\014\135\020\025" +
    "\037\110\047\116\053\112\055\023\056\uff94\116\111\122" +
    "\117\127\125\001\002\000\004\056\262\001\002\000\012" +
    "\015\uff94\033\044\051\042\070\uff94\001\002\000\012\015" +
    "\uffe6\033\uffe6\051\uffe6\070\uffe6\001\002\000\014\015\uff94" +
    "\033\044\051\042\070\uff94\107\307\001\002\000\012\015" +
    "\ufff3\033\ufff3\051\ufff3\070\ufff3\001\002\000\006\111\uff94" +
    "\120\273\001\002\000\012\015\ufff2\033\ufff2\051\ufff2\070" +
    "\ufff2\001\002\000\012\015\ufff7\033\ufff7\051\ufff7\070\ufff7" +
    "\001\002\000\004\111\276\001\002\000\004\111\uffec\001" +
    "\002\000\004\010\274\001\002\000\006\111\uff94\120\273" +
    "\001\002\000\004\111\uffed\001\002\000\020\023\060\024" +
    "\051\030\047\042\054\044\061\064\052\067\057\001\002" +
    "\000\006\101\300\107\uff94\001\002\000\016\004\021\005" +
    "\027\006\026\007\022\020\025\055\023\001\002\000\004" +
    "\107\uffea\001\002\000\004\107\303\001\002\000\016\003" +
    "\264\010\266\015\uff94\033\uff94\051\uff94\070\uff94\001\002" +
    "\000\012\015\ufff1\033\ufff1\051\ufff1\070\ufff1\001\002\000" +
    "\004\107\uffeb\001\002\000\012\015\uffee\033\uffee\051\uffee" +
    "\070\uffee\001\002\000\016\003\264\010\266\015\uff94\033" +
    "\uff94\051\uff94\070\uff94\001\002\000\012\015\ufff0\033\ufff0" +
    "\051\ufff0\070\ufff0\001\002\000\012\015\uffef\033\uffef\051" +
    "\uffef\070\uffef\001\002\000\010\033\044\051\042\070\uff94" +
    "\001\002\000\010\033\ufff4\051\ufff4\070\ufff4\001\002\000" +
    "\014\003\264\010\266\033\uff94\051\uff94\070\uff94\001\002" +
    "\000\010\033\ufff5\051\ufff5\070\ufff5\001\002\000\004\070" +
    "\317\001\002\000\040\004\021\005\027\006\026\007\022" +
    "\010\131\014\135\020\025\037\110\047\116\053\112\055" +
    "\023\056\uff94\116\111\122\117\127\125\001\002\000\004" +
    "\002\000\001\002\000\004\056\322\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\007\007\010" +
    "\001\001\000\002\001\001\000\006\002\312\014\311\001" +
    "\001\000\010\002\015\010\012\011\016\001\001\000\002" +
    "\001\001\000\016\002\040\012\042\023\032\024\033\025" +
    "\037\026\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\064\023\065\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\002\015\010\031\011\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\002\266\015\267\016\264\001\001\000\002" +
    "\001\001\000\010\002\015\010\256\011\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\052\027\055\030\054\063\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\066\031\065\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\070\001\001\000\002\001\001" +
    "\000\006\002\066\031\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\052\027\075\030\054\063\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\104\001\001\000\002\001\001\000" +
    "\042\002\113\032\131\033\112\035\125\037\123\041\122" +
    "\042\121\043\120\050\114\051\133\053\132\054\106\055" +
    "\126\062\117\064\127\065\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\002\113\032\243" +
    "\033\112\035\125\037\123\041\122\042\121\043\120\050" +
    "\114\051\133\053\132\054\106\055\126\062\117\064\127" +
    "\065\027\001\001\000\030\002\136\033\233\035\125\037" +
    "\123\041\122\042\121\043\120\055\126\062\117\064\127" +
    "\065\027\001\001\000\002\001\001\000\012\042\232\043" +
    "\120\064\127\065\027\001\001\000\006\002\136\055\231" +
    "\001\001\000\002\001\001\000\010\002\217\040\220\056" +
    "\223\001\001\000\010\002\205\036\203\060\210\001\001" +
    "\000\030\002\136\033\201\035\125\037\123\041\122\042" +
    "\121\043\120\055\126\062\117\064\127\065\027\001\001" +
    "\000\010\002\174\034\172\061\176\001\001\000\012\042" +
    "\171\043\120\064\127\065\027\001\001\000\002\001\001" +
    "\000\012\002\151\044\145\047\150\057\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\136\033\135\035\125\037\123\041\122\042\121\043" +
    "\120\055\126\062\117\064\127\065\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\002" +
    "\113\032\141\033\112\035\125\037\123\041\122\042\121" +
    "\043\120\050\114\051\133\053\132\054\106\055\126\062" +
    "\117\064\127\065\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\040\023\144\024\033\025\037\026" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\002\136\033\170\035\125\037\123\041\122\042\121\043" +
    "\120\055\126\062\117\064\127\065\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\002\161" +
    "\033\157\035\125\037\123\041\122\042\121\043\120\045" +
    "\160\055\126\062\117\064\127\065\027\001\001\000\002" +
    "\001\001\000\006\002\164\046\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\002\136\033\166\035\125\037" +
    "\123\041\122\042\121\043\120\055\126\062\117\064\127" +
    "\065\027\001\001\000\006\002\164\046\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\136\035\177\037\123\041\122\042\121" +
    "\043\120\055\126\062\117\064\127\065\027\001\001\000" +
    "\010\002\174\034\200\061\176\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\136\037\214\041\122\042\121\043" +
    "\120\055\126\062\117\064\127\065\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\205\036\215\060\210\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\136\041\227\042\121" +
    "\043\120\055\126\062\117\064\127\065\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\217\040\230\056\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\002\113\032\235\033\112\035\125\037\123\041\122\042" +
    "\121\043\120\050\114\051\133\053\132\054\106\055\126" +
    "\062\117\064\127\065\027\001\001\000\006\002\240\052" +
    "\237\001\001\000\042\002\113\032\242\033\112\035\125" +
    "\037\123\041\122\042\121\043\120\050\114\051\133\053" +
    "\132\054\106\055\126\062\117\064\127\065\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\002\136\033\247\035\125\037\123\041" +
    "\122\042\121\043\120\055\126\062\117\064\127\065\027" +
    "\001\001\000\002\001\001\000\030\002\136\033\251\035" +
    "\125\037\123\041\122\042\121\043\120\055\126\062\117" +
    "\064\127\065\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\002\113\032\254\033\112\035\125\037\123" +
    "\041\122\042\121\043\120\050\114\051\133\053\132\054" +
    "\106\055\126\062\117\064\127\065\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\002" +
    "\113\032\260\033\112\035\125\037\123\041\122\042\121" +
    "\043\120\050\114\051\133\053\132\054\106\055\126\062" +
    "\117\064\127\065\027\001\001\000\002\001\001\000\014" +
    "\002\040\023\262\024\033\025\037\026\035\001\001\000" +
    "\002\001\001\000\016\002\040\020\307\023\305\024\033" +
    "\025\037\026\035\001\001\000\002\001\001\000\006\002" +
    "\271\021\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\271\021\274\001\001\000\002\001\001\000\004" +
    "\063\276\001\001\000\006\002\300\022\301\001\001\000" +
    "\006\064\304\065\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\002\266\015\303\016\264\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\266\015\310\016\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\002\040\023\315\024\033\025\037" +
    "\026\035\001\001\000\002\001\001\000\010\002\266\015" +
    "\314\016\264\001\001\000\002\001\001\000\004\006\317" +
    "\001\001\000\042\002\113\032\320\033\112\035\125\037" +
    "\123\041\122\042\121\043\120\050\114\051\133\053\132" +
    "\054\106\055\126\062\117\064\127\065\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);


        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), (linea+1)));
        System.out.println(ScannerABC.errores.size());
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);

        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), linea+1));
     
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {



  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PR_PROGRAM IDENTIFICADOR SeccionConstantes SeccionVariables Rutinas EntradaPrograma 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // EntradaPrograma ::= PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EntradaPrograma",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SeccionConstantes ::= PR_CONST Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SeccionConstantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Constantes ::= Constante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Constantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Constante ::= IDENTIFICADOR O_EQUALS literal O_SEMICOLON Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Constante ::= error ErrorConstante 
            {
              Object RESULT =null;
		System.out.println("Error");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ErrorConstante ::= O_SEMICOLON Constantes 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ErrorConstante ::= PR_VAR Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ErrorConstante ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SeccionVariables ::= PR_VAR Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SeccionVariables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Variables ::= Variable 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Variables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Variable ::= IDENTIFICADOR Identificadores O_COLON Tipo Inicializar O_SEMICOLON Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Variable ::= error ErroresVariables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ErroresVariables ::= O_SEMICOLON Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con O_SEMICOLON Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ErroresVariables ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Identificadores ::= O_COMMA IDENTIFICADOR Identificadores 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Identificadores ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Inicializar ::= O_EQUALS literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Inicializar ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Rutinas ::= Rutina 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Rutinas ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Rutina ::= EncabezadoProcedimiento PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Rutina ::= EncabezadoFuncion PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS Parametros error O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros error O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Parametro ::= Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Parametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // masParametros ::= O_COMMA Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // masParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Instrucciones ::= Instruccion Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Instrucciones ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expresion ::= Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExpresionOperadoresLogicos ::= OperadoresLogicosBinarios Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExpresionOperadoresLogicos ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expresion2 ::= Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExpresionOperadoresComparacion ::= OperadoresComparacion Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExpresionOperadoresComparacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expresion3 ::= Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExpresionOperadoresEnteros ::= OperadoresEnteros Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ExpresionOperadoresEnteros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expresion4 ::= IncrementoDecremento Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expresion4 ::= OperadoresLogicosUnarios Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion4 ::= Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion5 ::= Expresion6 IncrementoDecremento 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion5",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion6 ::= IDENTIFICADOR Expresion7 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expresion6 ::= literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion7 ::= ExpresionAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExpresionAsignacion ::= OperadorAsignacion Expresion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExpresionAsignacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LParametro ::= Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LParametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ListaParametros ::= O_COMMA Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ListaParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Instruccion ::= IfThenElse 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Instruccion ::= While 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Instruccion ::= For 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Instruccion ::= Expresion O_SEMICOLON 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IfThenElse ::= PR_IF Expresion PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Else ::= PR_ELSE Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Else ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // While ::= PR_WHILE Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // For ::= PR_FOR IDENTIFICADOR O_COLON_EQUALS Expresion PR_TO Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IncrementoDecremento ::= O_PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IncrementoDecremento ::= O_MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IncrementoDecremento ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OperadoresEnteros ::= O_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OperadoresEnteros ::= O_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OperadoresEnteros ::= O_ASTERISK 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OperadoresEnteros ::= O_SLASH 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OperadoresEnteros ::= O_MOD 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OperadoresEnteros ::= O_DIV 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OperadorAsignacion ::= O_COLON_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OperadorAsignacion ::= O_PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OperadorAsignacion ::= O_MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OperadorAsignacion ::= O_ASTERISK_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OperadorAsignacion ::= O_SLASH_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OperadoresComparacion ::= O_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OperadoresComparacion ::= O_GREATER_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OperadoresComparacion ::= O_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OperadoresComparacion ::= O_LESS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OperadoresComparacion ::= O_LESS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OperadoresComparacion ::= O_LESS_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OperadoresLogicosBinarios ::= O_OR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OperadoresLogicosBinarios ::= O_AND 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OperadoresLogicosUnarios ::= O_NOT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosUnarios",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Tipo ::= PR_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Tipo ::= PR_INT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Tipo ::= PR_CHAR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Tipo ::= PR_LONGINT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Tipo ::= PR_SHORTINT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Tipo ::= PR_STRING 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Tipo ::= PR_REAL 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // literal ::= L_INTEGER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // literal ::= L_FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // literal ::= L_STRING 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // literal ::= L_CHAR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // literal ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Boolean ::= PR_TRUE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Boolean ::= PR_FALSE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // empty ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("empty",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
