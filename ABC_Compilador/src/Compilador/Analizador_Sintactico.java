
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 27 02:09:20 CST 2018
//----------------------------------------------------

package Compilador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Analisis_Semantico.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 27 02:09:20 CST 2018
  */
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\105\002\000\002\106" +
    "\002\000\002\007\012\000\002\007\003\000\002\107\002" +
    "\000\002\013\006\000\002\014\004\000\002\014\003\000" +
    "\002\016\003\000\002\016\003\000\002\017\007\000\002" +
    "\017\004\000\002\020\004\000\002\020\004\000\002\020" +
    "\003\000\002\022\004\000\002\022\003\000\002\023\003" +
    "\000\002\023\003\000\002\110\002\000\002\024\012\000" +
    "\002\024\004\000\002\026\004\000\002\026\003\000\002" +
    "\027\005\000\002\027\003\000\002\030\004\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\007" +
    "\000\002\032\007\000\002\003\003\000\002\003\003\000" +
    "\002\042\007\000\002\042\007\000\002\043\011\000\002" +
    "\043\011\000\002\043\011\000\002\005\003\000\002\005" +
    "\003\000\002\044\003\000\002\111\002\000\002\045\006" +
    "\000\002\045\004\000\002\045\003\000\002\112\002\000" +
    "\002\046\007\000\002\046\003\000\002\047\004\000\002" +
    "\047\003\000\002\052\004\000\002\053\005\000\002\053" +
    "\003\000\002\054\004\000\002\055\005\000\002\055\003" +
    "\000\002\056\004\000\002\113\002\000\002\114\002\000" +
    "\002\057\007\000\002\057\003\000\002\060\004\000\002" +
    "\060\004\000\002\060\003\000\002\061\004\000\002\062" +
    "\004\000\002\062\005\000\002\062\005\000\002\062\003" +
    "\000\002\063\003\000\002\063\005\000\002\063\005\000" +
    "\002\066\004\000\002\066\003\000\002\064\004\000\002" +
    "\064\003\000\002\065\005\000\002\065\004\000\002\065" +
    "\003\000\002\067\003\000\002\067\003\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\004\000" +
    "\002\051\004\000\002\051\004\000\002\115\002\000\002" +
    "\070\005\000\002\116\002\000\002\015\010\000\002\015" +
    "\005\000\002\015\007\000\002\117\002\000\002\071\005" +
    "\000\002\071\003\000\002\120\002\000\002\121\002\000" +
    "\002\072\012\000\002\072\005\000\002\073\014\000\002" +
    "\073\005\000\002\074\003\000\002\074\003\000\002\074" +
    "\003\000\002\075\003\000\002\075\003\000\002\075\003" +
    "\000\002\075\003\000\002\075\003\000\002\075\003\000" +
    "\002\076\003\000\002\076\003\000\002\076\003\000\002" +
    "\076\003\000\002\076\003\000\002\077\003\000\002\077" +
    "\003\000\002\077\003\000\002\077\003\000\002\077\003" +
    "\000\002\077\003\000\002\100\003\000\002\100\003\000" +
    "\002\101\003\000\002\102\003\000\002\102\003\000\002" +
    "\102\003\000\002\102\003\000\002\102\003\000\002\102" +
    "\003\000\002\102\003\000\002\102\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\104\003\000\002\104\003\000\002" +
    "\012\003\000\002\006\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\006\003\004\032\005\001\002\000\004\002" +
    "\ufffd\001\002\000\004\010\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\014\015\000\033" +
    "\000\052\000\064\000\071\000\001\002\000\014\015\uff72" +
    "\033\uff72\052\uff72\064\014\071\uff72\001\002\000\012\015" +
    "\ufff9\033\ufff9\052\ufff9\071\ufff9\001\002\000\012\015\365" +
    "\033\uff72\052\uff72\071\uff72\001\002\000\016\003\016\010" +
    "\017\015\uff72\033\uff72\052\uff72\071\uff72\001\002\000\012" +
    "\015\ufffa\033\ufffa\052\ufffa\071\ufffa\001\002\000\014\015" +
    "\041\033\047\052\045\071\uff72\110\042\001\002\000\076" +
    "\003\uff73\021\uff73\022\uff73\035\uff73\041\uff73\062\uff73\063" +
    "\uff73\073\uff73\100\uff73\101\uff73\102\uff73\103\uff73\104\uff73" +
    "\107\uff73\110\uff73\111\uff73\112\uff73\113\uff73\114\uff73\116" +
    "\uff73\117\uff73\120\uff73\121\uff73\122\uff73\123\uff73\124\uff73" +
    "\125\uff73\126\uff73\127\uff73\130\uff73\001\002\000\012\015" +
    "\ufff8\033\ufff8\052\ufff8\071\ufff8\001\002\000\012\015\ufff7" +
    "\033\ufff7\052\ufff7\071\ufff7\001\002\000\004\102\023\001" +
    "\002\000\016\004\024\005\032\006\031\007\025\020\030" +
    "\056\027\001\002\000\060\003\uff7a\021\uff7a\022\uff7a\035" +
    "\uff7a\041\uff7a\062\uff7a\063\uff7a\073\uff7a\100\uff7a\101\uff7a" +
    "\102\uff7a\103\uff7a\104\uff7a\107\uff7a\110\uff7a\114\uff7a\117" +
    "\uff7a\120\uff7a\121\uff7a\123\uff7a\124\uff7a\126\uff7a\127\uff7a" +
    "\001\002\000\060\003\uff78\021\uff78\022\uff78\035\uff78\041" +
    "\uff78\062\uff78\063\uff78\073\uff78\100\uff78\101\uff78\102\uff78" +
    "\103\uff78\104\uff78\107\uff78\110\uff78\114\uff78\117\uff78\120" +
    "\uff78\121\uff78\123\uff78\124\uff78\126\uff78\127\uff78\001\002" +
    "\000\004\110\034\001\002\000\060\003\uff74\021\uff74\022" +
    "\uff74\035\uff74\041\uff74\062\uff74\063\uff74\073\uff74\100\uff74" +
    "\101\uff74\102\uff74\103\uff74\104\uff74\107\uff74\110\uff74\114" +
    "\uff74\117\uff74\120\uff74\121\uff74\123\uff74\124\uff74\126\uff74" +
    "\127\uff74\001\002\000\060\003\uff75\021\uff75\022\uff75\035" +
    "\uff75\041\uff75\062\uff75\063\uff75\073\uff75\100\uff75\101\uff75" +
    "\102\uff75\103\uff75\104\uff75\107\uff75\110\uff75\114\uff75\117" +
    "\uff75\120\uff75\121\uff75\123\uff75\124\uff75\126\uff75\127\uff75" +
    "\001\002\000\060\003\uff79\021\uff79\022\uff79\035\uff79\041" +
    "\uff79\062\uff79\063\uff79\073\uff79\100\uff79\101\uff79\102\uff79" +
    "\103\uff79\104\uff79\107\uff79\110\uff79\114\uff79\117\uff79\120" +
    "\uff79\121\uff79\123\uff79\124\uff79\126\uff79\127\uff79\001\002" +
    "\000\060\003\uff77\021\uff77\022\uff77\035\uff77\041\uff77\062" +
    "\uff77\063\uff77\073\uff77\100\uff77\101\uff77\102\uff77\103\uff77" +
    "\104\uff77\107\uff77\110\uff77\114\uff77\117\uff77\120\uff77\121" +
    "\uff77\123\uff77\124\uff77\126\uff77\127\uff77\001\002\000\060" +
    "\003\uff76\021\uff76\022\uff76\035\uff76\041\uff76\062\uff76\063" +
    "\uff76\073\uff76\100\uff76\101\uff76\102\uff76\103\uff76\104\uff76" +
    "\107\uff76\110\uff76\114\uff76\117\uff76\120\uff76\121\uff76\123" +
    "\uff76\124\uff76\126\uff76\127\uff76\001\002\000\016\003\016" +
    "\010\017\015\uff72\033\uff72\052\uff72\071\uff72\001\002\000" +
    "\012\015\ufff6\033\ufff6\052\ufff6\071\ufff6\001\002\000\012" +
    "\015\ufff2\033\ufff2\052\ufff2\071\ufff2\001\002\000\012\015" +
    "\uffe4\033\uffe4\052\uffe4\071\uffe4\001\002\000\004\071\357" +
    "\001\002\000\016\003\330\010\017\015\uff72\033\uff72\052" +
    "\uff72\071\uff72\001\002\000\016\003\016\010\017\015\uff72" +
    "\033\uff72\052\uff72\071\uff72\001\002\000\004\071\123\001" +
    "\002\000\012\015\uffe3\033\uffe3\052\uffe3\071\uffe3\001\002" +
    "\000\004\010\017\001\002\000\012\015\ufff5\033\ufff5\052" +
    "\ufff5\071\ufff5\001\002\000\004\010\050\001\002\000\004" +
    "\130\102\001\002\000\004\130\052\001\002\000\024\023" +
    "\065\024\055\030\053\042\061\043\057\045\066\065\056" +
    "\070\064\127\uff72\001\002\000\014\003\uff7c\010\uff7c\071" +
    "\uff7c\102\uff7c\110\uff7c\001\002\000\006\003\070\010\uffd6" +
    "\001\002\000\014\003\uff7e\010\uff7e\071\uff7e\102\uff7e\110" +
    "\uff7e\001\002\000\014\003\uff80\010\uff80\071\uff80\102\uff80" +
    "\110\uff80\001\002\000\014\003\uff7b\010\uff7b\071\uff7b\102" +
    "\uff7b\110\uff7b\001\002\000\004\127\uffd3\001\002\000\014" +
    "\003\uff7f\010\uff7f\071\uff7f\102\uff7f\110\uff7f\001\002\000" +
    "\004\127\uffd7\001\002\000\004\127\067\001\002\000\014" +
    "\003\uff82\010\uff82\071\uff82\102\uff82\110\uff82\001\002\000" +
    "\014\003\uff7d\010\uff7d\071\uff7d\102\uff7d\110\uff7d\001\002" +
    "\000\014\003\uff81\010\uff81\071\uff81\102\uff81\110\uff81\001" +
    "\002\000\004\071\uffde\001\002\000\004\127\uffd4\001\002" +
    "\000\004\010\017\001\002\000\006\121\075\127\uff72\001" +
    "\002\000\004\127\uffd5\001\002\000\004\127\uffd0\001\002" +
    "\000\022\023\065\024\055\030\053\042\061\043\057\045" +
    "\066\065\056\070\064\001\002\000\004\010\uffd2\001\002" +
    "\000\004\010\017\001\002\000\006\121\075\127\uff72\001" +
    "\002\000\004\127\uffd1\001\002\000\004\003\103\001\002" +
    "\000\004\127\104\001\002\000\004\071\uffdd\001\002\000" +
    "\004\130\106\001\002\000\026\003\110\023\065\024\055" +
    "\030\053\042\061\043\057\045\066\065\056\070\064\127" +
    "\uff72\001\002\000\004\127\114\001\002\000\004\127\111" +
    "\001\002\000\004\112\112\001\002\000\022\023\065\024" +
    "\055\030\053\042\061\043\057\045\066\065\056\070\064" +
    "\001\002\000\004\071\uffdb\001\002\000\006\003\115\112" +
    "\116\001\002\000\022\023\065\024\055\030\053\042\061" +
    "\043\057\045\066\065\056\070\064\001\002\000\022\023" +
    "\065\024\055\030\053\042\061\043\057\045\066\065\056" +
    "\070\064\001\002\000\004\071\uffdc\001\002\000\004\071" +
    "\uffd8\001\002\000\004\071\uffda\001\002\000\004\071\uffd9" +
    "\001\002\000\042\003\145\004\024\005\032\006\031\007" +
    "\025\010\017\014\155\020\030\037\125\050\132\054\127" +
    "\056\027\057\uff72\117\126\123\134\130\142\001\002\000" +
    "\044\003\uffac\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\014\uffac\020\uffac\037\uffac\050\uffac\054\uffac\056\uffac\057" +
    "\uffac\060\uffac\117\uffac\123\uffac\130\uffac\001\002\000\022" +
    "\004\uff83\005\uff83\006\uff83\007\uff83\010\uff83\020\uff83\056" +
    "\uff83\130\uff83\001\002\000\100\003\uff98\004\uff98\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\020\uff98\021\uff98\022\uff98\035" +
    "\uff98\041\uff98\056\uff98\062\uff98\063\uff98\073\uff98\100\uff98" +
    "\101\uff98\102\uff98\103\uff98\104\uff98\107\uff98\110\uff98\114" +
    "\uff98\117\uff98\120\uff98\121\uff98\123\uff98\124\uff98\126\uff98" +
    "\127\uff98\130\uff98\001\002\000\006\003\314\010\315\001" +
    "\002\000\004\110\313\001\002\000\026\004\uff97\005\uff97" +
    "\006\uff97\007\uff97\010\uff97\020\uff97\056\uff97\057\uffce\060" +
    "\uffce\130\uff97\001\002\000\032\003\uffa8\004\uffa8\005\uffa8" +
    "\006\uffa8\007\uffa8\010\uffa8\020\uffa8\037\uffa8\056\uffa8\117" +
    "\uffa8\123\uffa8\130\uffa8\001\002\000\044\003\145\004\024" +
    "\005\032\006\031\007\025\010\017\014\155\020\030\037" +
    "\125\050\132\054\127\056\027\057\uff72\060\uff72\117\126" +
    "\123\134\130\142\001\002\000\100\003\uff99\004\uff99\005" +
    "\uff99\006\uff99\007\uff99\010\uff99\020\uff99\021\uff99\022\uff99" +
    "\035\uff99\041\uff99\056\uff99\062\uff99\063\uff99\073\uff99\100" +
    "\uff99\101\uff99\102\uff99\103\uff99\104\uff99\107\uff99\110\uff99" +
    "\114\uff99\117\uff99\120\uff99\121\uff99\123\uff99\124\uff99\126" +
    "\uff99\127\uff99\130\uff99\001\002\000\074\003\uff72\021\uff72" +
    "\022\uff72\035\uff72\041\uff72\062\uff72\063\uff72\073\uff72\100" +
    "\uff72\101\uff72\102\uff72\103\uff72\104\uff72\107\uff72\110\uff72" +
    "\111\246\113\247\114\uff72\116\243\117\uff72\120\uff72\121" +
    "\uff72\122\252\123\uff72\124\uff72\125\250\126\uff72\127\uff72" +
    "\130\251\001\002\000\022\004\024\005\032\006\031\007" +
    "\025\010\017\020\030\056\027\130\142\001\002\000\060" +
    "\003\uff72\021\uff72\022\uff72\035\uff72\041\uff72\062\uff72\063" +
    "\uff72\073\uff72\100\uff72\101\uff72\102\uff72\103\uff72\104\uff72" +
    "\107\uff72\110\uff72\114\uff72\117\126\120\uff72\121\uff72\123" +
    "\134\124\uff72\126\uff72\127\uff72\001\002\000\060\003\uffc0" +
    "\021\uffc0\022\uffc0\035\uffc0\041\uffc0\062\uffc0\063\uffc0\073" +
    "\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\107\uffc0" +
    "\110\uffc0\114\uffc0\117\uffc0\120\uffc0\121\uffc0\123\uffc0\124" +
    "\uffc0\126\uffc0\127\uffc0\001\002\000\060\003\uff72\021\uff72" +
    "\022\uff72\035\uff72\041\226\062\uff72\063\232\073\uff72\100" +
    "\uff72\101\uff72\102\uff72\103\uff72\104\uff72\107\uff72\110\uff72" +
    "\114\231\117\uff72\120\230\121\uff72\123\uff72\124\223\126" +
    "\222\127\uff72\001\002\000\030\004\024\005\032\006\031" +
    "\007\025\010\017\020\030\037\125\056\027\117\126\123" +
    "\134\130\142\001\002\000\060\003\uff72\021\uff72\022\uff72" +
    "\035\uff72\041\uff72\062\uff72\063\uff72\073\uff72\100\213\101" +
    "\207\102\205\103\210\104\214\107\212\110\uff72\114\uff72" +
    "\117\uff72\120\uff72\121\uff72\123\uff72\124\uff72\126\uff72\127" +
    "\uff72\001\002\000\060\003\uff72\021\uff72\022\uff72\035\200" +
    "\041\uff72\062\uff72\063\uff72\073\176\100\uff72\101\uff72\102" +
    "\uff72\103\uff72\104\uff72\107\uff72\110\uff72\114\uff72\117\uff72" +
    "\120\uff72\121\uff72\123\uff72\124\uff72\126\uff72\127\uff72\001" +
    "\002\000\006\057\174\110\173\001\002\000\022\004\024" +
    "\005\032\006\031\007\025\010\017\020\030\056\027\130" +
    "\142\001\002\000\044\003\uffaf\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\014\uffaf\020\uffaf\037\uffaf\050\uffaf\054" +
    "\uffaf\056\uffaf\057\uffaf\060\uffaf\117\uffaf\123\uffaf\130\uffaf" +
    "\001\002\000\060\003\uffbb\021\uffbb\022\uffbb\035\uffbb\041" +
    "\uffbb\062\uffbb\063\uffbb\073\uffbb\100\uffbb\101\uffbb\102\uffbb" +
    "\103\uffbb\104\uffbb\107\uffbb\110\uffbb\114\uffbb\117\uffbb\120" +
    "\uffbb\121\uffbb\123\uffbb\124\uffbb\126\uffbb\127\uffbb\001\002" +
    "\000\004\057\170\001\002\000\044\003\uffad\004\uffad\005" +
    "\uffad\006\uffad\007\uffad\010\uffad\014\uffad\020\uffad\037\uffad" +
    "\050\uffad\054\uffad\056\uffad\057\uffad\060\uffad\117\uffad\123" +
    "\uffad\130\uffad\001\002\000\044\003\uffae\004\uffae\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\014\uffae\020\uffae\037\uffae\050" +
    "\uffae\054\uffae\056\uffae\057\uffae\060\uffae\117\uffae\123\uffae" +
    "\130\uffae\001\002\000\044\003\uffb0\004\uffb0\005\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\014\uffb0\020\uffb0\037\uffb0\050\uffb0" +
    "\054\uffb0\056\uffb0\057\uffb0\060\uffb0\117\uffb0\123\uffb0\130" +
    "\uffb0\001\002\000\032\003\156\004\uff9f\005\uff9f\006\uff9f" +
    "\007\uff9f\010\uff9f\020\uff9f\037\uff9f\056\uff9f\117\uff9f\123" +
    "\uff9f\130\uff9f\001\002\000\004\057\167\001\002\000\030" +
    "\004\024\005\032\006\031\007\025\010\017\020\030\037" +
    "\125\056\027\117\126\123\134\130\142\001\002\000\004" +
    "\062\162\001\002\000\100\003\uff97\004\uff97\005\uff97\006" +
    "\uff97\007\uff97\010\uff97\020\uff97\021\uff97\022\uff97\035\uff97" +
    "\041\uff97\056\uff97\062\uff97\063\uff97\073\uff97\100\uff97\101" +
    "\uff97\102\uff97\103\uff97\104\uff97\107\uff97\110\uff97\114\uff97" +
    "\117\uff97\120\uff97\121\uff97\123\uff97\124\uff97\126\uff97\127" +
    "\uff97\130\uff97\001\002\000\004\071\uff9e\001\002\000\004" +
    "\071\164\001\002\000\042\003\145\004\024\005\032\006" +
    "\031\007\025\010\017\014\155\020\030\037\125\050\132" +
    "\054\127\056\027\057\uff72\117\126\123\134\130\142\001" +
    "\002\000\004\057\166\001\002\000\044\003\uff9d\004\uff9d" +
    "\005\uff9d\006\uff9d\007\uff9d\010\uff9d\014\uff9d\020\uff9d\037" +
    "\uff9d\050\uff9d\054\uff9d\056\uff9d\057\uff9d\060\uff9d\117\uff9d" +
    "\123\uff9d\130\uff9d\001\002\000\044\003\uff9c\004\uff9c\005" +
    "\uff9c\006\uff9c\007\uff9c\010\uff9c\014\uff9c\020\uff9c\037\uff9c" +
    "\050\uff9c\054\uff9c\056\uff9c\057\uff9c\060\uff9c\117\uff9c\123" +
    "\uff9c\130\uff9c\001\002\000\012\015\uff72\033\047\052\045" +
    "\071\uff72\001\002\000\012\015\uffe2\033\uffe2\052\uffe2\071" +
    "\uffe2\001\002\000\060\003\uffc2\021\uffc2\022\uffc2\035\uffc2" +
    "\041\uffc2\062\uffc2\063\uffc2\073\uffc2\100\uffc2\101\uffc2\102" +
    "\uffc2\103\uffc2\104\uffc2\107\uffc2\110\uffc2\114\uffc2\117\uffc2" +
    "\120\uffc2\121\uffc2\123\uffc2\124\uffc2\126\uffc2\127\uffc2\001" +
    "\002\000\044\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9" +
    "\010\uffa9\014\uffa9\020\uffa9\037\uffa9\050\uffa9\054\uffa9\056" +
    "\uffa9\057\uffa9\060\uffa9\117\uffa9\123\uffa9\130\uffa9\001\002" +
    "\000\044\003\uffab\004\uffab\005\uffab\006\uffab\007\uffab\010" +
    "\uffab\014\uffab\020\uffab\037\uffab\050\uffab\054\uffab\056\uffab" +
    "\057\uffab\060\uffab\117\uffab\123\uffab\130\uffab\001\002\000" +
    "\060\003\uffcd\021\uffcd\022\uffcd\035\uffcd\041\uffcd\062\uffcd" +
    "\063\uffcd\073\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104" +
    "\uffcd\107\uffcd\110\uffcd\114\uffcd\117\uffcd\120\uffcd\121\uffcd" +
    "\123\uffcd\124\uffcd\126\uffcd\127\uffcd\001\002\000\030\004" +
    "\uff84\005\uff84\006\uff84\007\uff84\010\uff84\020\uff84\037\uff84" +
    "\056\uff84\117\uff84\123\uff84\130\uff84\001\002\000\060\003" +
    "\uffcb\021\uffcb\022\uffcb\035\uffcb\041\uffcb\062\uffcb\063\uffcb" +
    "\073\uffcb\100\uffcb\101\uffcb\102\uffcb\103\uffcb\104\uffcb\107" +
    "\uffcb\110\uffcb\114\uffcb\117\uffcb\120\uffcb\121\uffcb\123\uffcb" +
    "\124\uffcb\126\uffcb\127\uffcb\001\002\000\030\004\uff85\005" +
    "\uff85\006\uff85\007\uff85\010\uff85\020\uff85\037\uff85\056\uff85" +
    "\117\uff85\123\uff85\130\uff85\001\002\000\030\004\024\005" +
    "\032\006\031\007\025\010\017\020\030\037\125\056\027" +
    "\117\126\123\134\130\142\001\002\000\060\003\uff72\021" +
    "\uff72\022\uff72\035\200\041\uff72\062\uff72\063\uff72\073\176" +
    "\100\uff72\101\uff72\102\uff72\103\uff72\104\uff72\107\uff72\110" +
    "\uff72\114\uff72\117\uff72\120\uff72\121\uff72\123\uff72\124\uff72" +
    "\126\uff72\127\uff72\001\002\000\060\003\uffcc\021\uffcc\022" +
    "\uffcc\035\uffcc\041\uffcc\062\uffcc\063\uffcc\073\uffcc\100\uffcc" +
    "\101\uffcc\102\uffcc\103\uffcc\104\uffcc\107\uffcc\110\uffcc\114" +
    "\uffcc\117\uffcc\120\uffcc\121\uffcc\123\uffcc\124\uffcc\126\uffcc" +
    "\127\uffcc\001\002\000\060\003\uffca\021\uffca\022\uffca\035" +
    "\uffca\041\uffca\062\uffca\063\uffca\073\uffca\100\uffca\101\uffca" +
    "\102\uffca\103\uffca\104\uffca\107\uffca\110\uffca\114\uffca\117" +
    "\uffca\120\uffca\121\uffca\123\uffca\124\uffca\126\uffca\127\uffca" +
    "\001\002\000\030\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010" +
    "\uff8b\020\uff8b\037\uff8b\056\uff8b\117\uff8b\123\uff8b\130\uff8b" +
    "\001\002\000\060\003\uffc8\021\uffc8\022\uffc8\035\uffc8\041" +
    "\uffc8\062\uffc8\063\uffc8\073\uffc8\100\uffc8\101\uffc8\102\uffc8" +
    "\103\uffc8\104\uffc8\107\uffc8\110\uffc8\114\uffc8\117\uffc8\120" +
    "\uffc8\121\uffc8\123\uffc8\124\uffc8\126\uffc8\127\uffc8\001\002" +
    "\000\030\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\020" +
    "\uff89\037\uff89\056\uff89\117\uff89\123\uff89\130\uff89\001\002" +
    "\000\030\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\020" +
    "\uff86\037\uff86\056\uff86\117\uff86\123\uff86\130\uff86\001\002" +
    "\000\030\004\024\005\032\006\031\007\025\010\017\020" +
    "\030\037\125\056\027\117\126\123\134\130\142\001\002" +
    "\000\030\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\020" +
    "\uff87\037\uff87\056\uff87\117\uff87\123\uff87\130\uff87\001\002" +
    "\000\030\004\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\020" +
    "\uff8a\037\uff8a\056\uff8a\117\uff8a\123\uff8a\130\uff8a\001\002" +
    "\000\030\004\uff88\005\uff88\006\uff88\007\uff88\010\uff88\020" +
    "\uff88\037\uff88\056\uff88\117\uff88\123\uff88\130\uff88\001\002" +
    "\000\060\003\uff72\021\uff72\022\uff72\035\uff72\041\uff72\062" +
    "\uff72\063\uff72\073\uff72\100\213\101\207\102\205\103\210" +
    "\104\214\107\212\110\uff72\114\uff72\117\uff72\120\uff72\121" +
    "\uff72\123\uff72\124\uff72\126\uff72\127\uff72\001\002\000\060" +
    "\003\uffc9\021\uffc9\022\uffc9\035\uffc9\041\uffc9\062\uffc9\063" +
    "\uffc9\073\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9" +
    "\107\uffc9\110\uffc9\114\uffc9\117\uffc9\120\uffc9\121\uffc9\123" +
    "\uffc9\124\uffc9\126\uffc9\127\uffc9\001\002\000\006\003\220" +
    "\127\221\001\002\000\060\003\uffbc\021\uffbc\022\uffbc\035" +
    "\uffbc\041\uffbc\062\uffbc\063\uffbc\073\uffbc\100\uffbc\101\uffbc" +
    "\102\uffbc\103\uffbc\104\uffbc\107\uffbc\110\uffbc\114\uffbc\117" +
    "\uffbc\120\uffbc\121\uffbc\123\uffbc\124\uffbc\126\uffbc\127\uffbc" +
    "\001\002\000\060\003\uffbd\021\uffbd\022\uffbd\035\uffbd\041" +
    "\uffbd\062\uffbd\063\uffbd\073\uffbd\100\uffbd\101\uffbd\102\uffbd" +
    "\103\uffbd\104\uffbd\107\uffbd\110\uffbd\114\uffbd\117\uffbd\120" +
    "\uffbd\121\uffbd\123\uffbd\124\uffbd\126\uffbd\127\uffbd\001\002" +
    "\000\030\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\020" +
    "\uff94\037\uff94\056\uff94\117\uff94\123\uff94\130\uff94\001\002" +
    "\000\030\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96\020" +
    "\uff96\037\uff96\056\uff96\117\uff96\123\uff96\130\uff96\001\002" +
    "\000\060\003\uffc3\021\uffc3\022\uffc3\035\uffc3\041\uffc3\062" +
    "\uffc3\063\uffc3\073\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3" +
    "\104\uffc3\107\uffc3\110\uffc3\114\uffc3\117\uffc3\120\uffc3\121" +
    "\uffc3\123\uffc3\124\uffc3\126\uffc3\127\uffc3\001\002\000\060" +
    "\003\uffc7\021\uffc7\022\uffc7\035\uffc7\041\uffc7\062\uffc7\063" +
    "\uffc7\073\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7" +
    "\107\uffc7\110\uffc7\114\uffc7\117\uffc7\120\uffc7\121\uffc7\123" +
    "\uffc7\124\uffc7\126\uffc7\127\uffc7\001\002\000\030\004\uff92" +
    "\005\uff92\006\uff92\007\uff92\010\uff92\020\uff92\037\uff92\056" +
    "\uff92\117\uff92\123\uff92\130\uff92\001\002\000\030\004\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\020\uffc6\037\uffc6\056" +
    "\uffc6\117\uffc6\123\uffc6\130\uffc6\001\002\000\030\004\uff95" +
    "\005\uff95\006\uff95\007\uff95\010\uff95\020\uff95\037\uff95\056" +
    "\uff95\117\uff95\123\uff95\130\uff95\001\002\000\030\004\uff93" +
    "\005\uff93\006\uff93\007\uff93\010\uff93\020\uff93\037\uff93\056" +
    "\uff93\117\uff93\123\uff93\130\uff93\001\002\000\030\004\uff91" +
    "\005\uff91\006\uff91\007\uff91\010\uff91\020\uff91\037\uff91\056" +
    "\uff91\117\uff91\123\uff91\130\uff91\001\002\000\030\004\024" +
    "\005\032\006\031\007\025\010\017\020\030\037\125\056" +
    "\027\117\126\123\134\130\142\001\002\000\060\003\uffc5" +
    "\021\uffc5\022\uffc5\035\uffc5\041\uffc5\062\uffc5\063\uffc5\073" +
    "\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\107\uffc5" +
    "\110\uffc5\114\uffc5\117\uffc5\120\uffc5\121\uffc5\123\uffc5\124" +
    "\uffc5\126\uffc5\127\uffc5\001\002\000\060\003\uff72\021\uff72" +
    "\022\uff72\035\uff72\041\226\062\uff72\063\232\073\uff72\100" +
    "\uff72\101\uff72\102\uff72\103\uff72\104\uff72\107\uff72\110\uff72" +
    "\114\231\117\uff72\120\230\121\uff72\123\uff72\124\223\126" +
    "\222\127\uff72\001\002\000\060\003\uffc4\021\uffc4\022\uffc4" +
    "\035\uffc4\041\uffc4\062\uffc4\063\uffc4\073\uffc4\100\uffc4\101" +
    "\uffc4\102\uffc4\103\uffc4\104\uffc4\107\uffc4\110\uffc4\114\uffc4" +
    "\117\uffc4\120\uffc4\121\uffc4\123\uffc4\124\uffc4\126\uffc4\127" +
    "\uffc4\001\002\000\060\003\uffbf\021\uffbf\022\uffbf\035\uffbf" +
    "\041\uffbf\062\uffbf\063\uffbf\073\uffbf\100\uffbf\101\uffbf\102" +
    "\uffbf\103\uffbf\104\uffbf\107\uffbf\110\uffbf\114\uffbf\117\uffbf" +
    "\120\uffbf\121\uffbf\123\uffbf\124\uffbf\126\uffbf\127\uffbf\001" +
    "\002\000\060\003\uffc1\021\uffc1\022\uffc1\035\uffc1\041\uffc1" +
    "\062\uffc1\063\uffc1\073\uffc1\100\uffc1\101\uffc1\102\uffc1\103" +
    "\uffc1\104\uffc1\107\uffc1\110\uffc1\114\uffc1\117\uffc1\120\uffc1" +
    "\121\uffc1\123\uffc1\124\uffc1\126\uffc1\127\uffc1\001\002\000" +
    "\060\003\uffbe\021\uffbe\022\uffbe\035\uffbe\041\uffbe\062\uffbe" +
    "\063\uffbe\073\uffbe\100\uffbe\101\uffbe\102\uffbe\103\uffbe\104" +
    "\uffbe\107\uffbe\110\uffbe\114\uffbe\117\uffbe\120\uffbe\121\uffbe" +
    "\123\uffbe\124\uffbe\126\uffbe\127\uffbe\001\002\000\030\004" +
    "\024\005\032\006\031\007\025\010\017\020\030\037\125" +
    "\056\027\117\126\123\134\130\142\001\002\000\030\004" +
    "\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\020\uff8e\037\uff8e" +
    "\056\uff8e\117\uff8e\123\uff8e\130\uff8e\001\002\000\060\003" +
    "\uffba\021\uffba\022\uffba\035\uffba\041\uffba\062\uffba\063\uffba" +
    "\073\uffba\100\uffba\101\uffba\102\uffba\103\uffba\104\uffba\107" +
    "\uffba\110\uffba\114\uffba\117\uffba\120\uffba\121\uffba\123\uffba" +
    "\124\uffba\126\uffba\127\uffba\001\002\000\060\003\uffb6\021" +
    "\uffb6\022\uffb6\035\uffb6\041\uffb6\062\uffb6\063\uffb6\073\uffb6" +
    "\100\uffb6\101\uffb6\102\uffb6\103\uffb6\104\uffb6\107\uffb6\110" +
    "\uffb6\114\uffb6\117\uffb6\120\uffb6\121\uffb6\123\uffb6\124\uffb6" +
    "\126\uffb6\127\uffb6\001\002\000\030\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\020\uff90\037\uff90\056\uff90\117\uff90" +
    "\123\uff90\130\uff90\001\002\000\030\004\uff8c\005\uff8c\006" +
    "\uff8c\007\uff8c\010\uff8c\020\uff8c\037\uff8c\056\uff8c\117\uff8c" +
    "\123\uff8c\130\uff8c\001\002\000\030\004\uff8d\005\uff8d\006" +
    "\uff8d\007\uff8d\010\uff8d\020\uff8d\037\uff8d\056\uff8d\117\uff8d" +
    "\123\uff8d\130\uff8d\001\002\000\034\003\uff72\004\024\005" +
    "\032\006\031\007\025\010\017\020\030\037\125\056\027" +
    "\117\126\123\134\127\uff72\130\142\001\002\000\030\004" +
    "\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\020\uff8f\037\uff8f" +
    "\056\uff8f\117\uff8f\123\uff8f\130\uff8f\001\002\000\010\003" +
    "\uff72\121\262\127\uff72\001\002\000\006\003\256\127\257" +
    "\001\002\000\026\003\uffb4\004\uff97\005\uff97\006\uff97\007" +
    "\uff97\010\uff97\020\uff97\056\uff97\127\uffb4\130\uff97\001\002" +
    "\000\060\003\uffb8\021\uffb8\022\uffb8\035\uffb8\041\uffb8\062" +
    "\uffb8\063\uffb8\073\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8" +
    "\104\uffb8\107\uffb8\110\uffb8\114\uffb8\117\uffb8\120\uffb8\121" +
    "\uffb8\123\uffb8\124\uffb8\126\uffb8\127\uffb8\001\002\000\060" +
    "\003\uffb9\021\uffb9\022\uffb9\035\uffb9\041\uffb9\062\uffb9\063" +
    "\uffb9\073\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9" +
    "\107\uffb9\110\uffb9\114\uffb9\117\uffb9\120\uffb9\121\uffb9\123" +
    "\uffb9\124\uffb9\126\uffb9\127\uffb9\001\002\000\006\003\uffb5" +
    "\127\uffb5\001\002\000\006\003\uffb1\127\uffb1\001\002\000" +
    "\032\003\264\004\024\005\032\006\031\007\025\010\017" +
    "\020\030\037\125\056\027\117\126\123\134\130\142\001" +
    "\002\000\010\003\uff72\121\262\127\uff72\001\002\000\006" +
    "\003\uffb2\127\uffb2\001\002\000\006\003\uffb3\127\uffb3\001" +
    "\002\000\060\003\uffb7\021\uffb7\022\uffb7\035\uffb7\041\uffb7" +
    "\062\uffb7\063\uffb7\073\uffb7\100\uffb7\101\uffb7\102\uffb7\103" +
    "\uffb7\104\uffb7\107\uffb7\110\uffb7\114\uffb7\117\uffb7\120\uffb7" +
    "\121\uffb7\123\uffb7\124\uffb7\126\uffb7\127\uffb7\001\002\000" +
    "\006\057\uffcf\060\uffcf\001\002\000\032\003\273\004\024" +
    "\005\032\006\031\007\025\010\017\020\030\037\125\056" +
    "\027\117\126\123\134\130\142\001\002\000\006\003\304" +
    "\022\305\001\002\000\044\003\uffa7\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\014\uffa7\020\uffa7\037\uffa7\050\uffa7" +
    "\054\uffa7\056\uffa7\057\uffa7\060\uffa7\117\uffa7\123\uffa7\130" +
    "\uffa7\001\002\000\004\022\274\001\002\000\044\003\145" +
    "\004\024\005\032\006\031\007\025\010\017\014\155\020" +
    "\030\037\125\050\132\054\127\056\027\057\uff72\060\uff72" +
    "\117\126\123\134\130\142\001\002\000\006\057\uff72\060" +
    "\276\001\002\000\042\003\uffa2\004\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\010\uffa2\014\uffa2\020\uffa2\037\uffa2\050\uffa2\054" +
    "\uffa2\056\uffa2\057\uffa2\117\uffa2\123\uffa2\130\uffa2\001\002" +
    "\000\004\057\301\001\002\000\004\057\uffa0\001\002\000" +
    "\044\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\014\uffa3\020\uffa3\037\uffa3\050\uffa3\054\uffa3\056\uffa3\057" +
    "\uffa3\060\uffa3\117\uffa3\123\uffa3\130\uffa3\001\002\000\042" +
    "\003\145\004\024\005\032\006\031\007\025\010\017\014" +
    "\155\020\030\037\125\050\132\054\127\056\027\057\uff72" +
    "\117\126\123\134\130\142\001\002\000\004\057\uffa1\001" +
    "\002\000\004\057\312\001\002\000\044\003\uffa6\004\uffa6" +
    "\005\uffa6\006\uffa6\007\uffa6\010\uffa6\014\uffa6\020\uffa6\037" +
    "\uffa6\050\uffa6\054\uffa6\056\uffa6\057\uffa6\060\uffa6\117\uffa6" +
    "\123\uffa6\130\uffa6\001\002\000\044\003\145\004\024\005" +
    "\032\006\031\007\025\010\017\014\155\020\030\037\125" +
    "\050\132\054\127\056\027\057\uff72\060\uff72\117\126\123" +
    "\134\130\142\001\002\000\006\057\uff72\060\276\001\002" +
    "\000\004\057\311\001\002\000\044\003\uffa5\004\uffa5\005" +
    "\uffa5\006\uffa5\007\uffa5\010\uffa5\014\uffa5\020\uffa5\037\uffa5" +
    "\050\uffa5\054\uffa5\056\uffa5\057\uffa5\060\uffa5\117\uffa5\123" +
    "\uffa5\130\uffa5\001\002\000\044\003\uffa4\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\014\uffa4\020\uffa4\037\uffa4\050" +
    "\uffa4\054\uffa4\056\uffa4\057\uffa4\060\uffa4\117\uffa4\123\uffa4" +
    "\130\uffa4\001\002\000\044\003\uffaa\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\014\uffaa\020\uffaa\037\uffaa\050\uffaa" +
    "\054\uffaa\056\uffaa\057\uffaa\060\uffaa\117\uffaa\123\uffaa\130" +
    "\uffaa\001\002\000\004\057\326\001\002\000\004\111\316" +
    "\001\002\000\030\004\024\005\032\006\031\007\025\010" +
    "\017\020\030\037\125\056\027\117\126\123\134\130\142" +
    "\001\002\000\004\021\320\001\002\000\030\004\024\005" +
    "\032\006\031\007\025\010\017\020\030\037\125\056\027" +
    "\117\126\123\134\130\142\001\002\000\004\062\322\001" +
    "\002\000\004\071\323\001\002\000\042\003\145\004\024" +
    "\005\032\006\031\007\025\010\017\014\155\020\030\037" +
    "\125\050\132\054\127\056\027\057\uff72\117\126\123\134" +
    "\130\142\001\002\000\004\057\325\001\002\000\044\003" +
    "\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\014\uff9b" +
    "\020\uff9b\037\uff9b\050\uff9b\054\uff9b\056\uff9b\057\uff9b\060" +
    "\uff9b\117\uff9b\123\uff9b\130\uff9b\001\002\000\044\003\uff9a" +
    "\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\014\uff9a\020" +
    "\uff9a\037\uff9a\050\uff9a\054\uff9a\056\uff9a\057\uff9a\060\uff9a" +
    "\117\uff9a\123\uff9a\130\uff9a\001\002\000\012\015\ufff4\033" +
    "\ufff4\052\ufff4\071\ufff4\001\002\000\014\015\uff72\033\047" +
    "\052\045\071\uff72\110\354\001\002\000\012\015\uffef\033" +
    "\uffef\052\uffef\071\uffef\001\002\000\012\015\uffee\033\uffee" +
    "\052\uffee\071\uffee\001\002\000\012\015\ufff3\033\ufff3\052" +
    "\ufff3\071\ufff3\001\002\000\006\112\uff72\121\337\001\002" +
    "\000\004\112\342\001\002\000\004\112\uffe7\001\002\000" +
    "\004\010\017\001\002\000\006\112\uff72\121\337\001\002" +
    "\000\004\112\uffe8\001\002\000\022\023\065\024\055\030" +
    "\053\042\061\043\057\045\066\065\056\070\064\001\002" +
    "\000\006\102\uffed\110\uffed\001\002\000\006\102\345\110" +
    "\uff72\001\002\000\016\004\024\005\032\006\031\007\025" +
    "\020\030\056\027\001\002\000\004\110\uffe5\001\002\000" +
    "\004\110\350\001\002\000\016\003\330\010\017\015\uff72" +
    "\033\uff72\052\uff72\071\uff72\001\002\000\012\015\uffec\033" +
    "\uffec\052\uffec\071\uffec\001\002\000\004\110\uffe6\001\002" +
    "\000\012\015\uffe9\033\uffe9\052\uffe9\071\uffe9\001\002\000" +
    "\016\003\330\010\017\015\uff72\033\uff72\052\uff72\071\uff72" +
    "\001\002\000\012\015\uffeb\033\uffeb\052\uffeb\071\uffeb\001" +
    "\002\000\012\015\uffea\033\uffea\052\uffea\071\uffea\001\002" +
    "\000\042\003\145\004\024\005\032\006\031\007\025\010" +
    "\017\014\155\020\030\037\125\050\132\054\127\056\027" +
    "\057\uff72\117\126\123\134\130\142\001\002\000\004\057" +
    "\361\001\002\000\012\015\uff72\033\047\052\045\071\uff72" +
    "\001\002\000\012\015\uffe1\033\uffe1\052\uffe1\071\uffe1\001" +
    "\002\000\010\033\uffff\052\uffff\071\uffff\001\002\000\010" +
    "\033\ufff0\052\ufff0\071\ufff0\001\002\000\014\003\330\010" +
    "\017\033\uff72\052\uff72\071\uff72\001\002\000\010\033\ufff1" +
    "\052\ufff1\071\ufff1\001\002\000\010\033\047\052\045\071" +
    "\uff72\001\002\000\004\071\371\001\002\000\042\003\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\014\ufffc\020" +
    "\ufffc\037\ufffc\050\ufffc\054\ufffc\056\ufffc\057\ufffc\117\ufffc" +
    "\123\ufffc\130\ufffc\001\002\000\004\002\ufffe\001\002\000" +
    "\042\003\145\004\024\005\032\006\031\007\025\010\017" +
    "\014\155\020\030\037\125\050\132\054\127\056\027\057" +
    "\uff72\117\126\123\134\130\142\001\002\000\004\057\375" +
    "\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\373\000\004\007\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\105\010\001\001\000\006\006\011\014\012\001\001\000" +
    "\002\001\001\000\006\006\363\022\362\001\001\000\012" +
    "\006\020\012\021\016\014\017\017\001\001\000\002\001" +
    "\001\000\016\006\043\020\045\031\035\032\036\042\042" +
    "\043\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\103\025\104\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\020\012" +
    "\021\016\034\017\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\006" +
    "\331\012\333\023\332\024\330\001\001\000\012\006\020" +
    "\012\021\016\326\017\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\104\001\001\000\002\001\001" +
    "\000\004\012\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\006\057\044\062\045\061\102\053\001\001" +
    "\000\002\001\001\000\004\111\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\071\001\001\000" +
    "\006\006\073\046\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\075\001\001\000\004\112\076\001" +
    "\001\000\004\012\077\001\001\000\006\006\073\046\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\057" +
    "\044\106\045\061\102\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\117\005" +
    "\120\102\121\001\001\000\004\102\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\006\130\012\134\047\150\050\153\051\146" +
    "\052\127\054\143\056\142\060\140\061\137\062\136\067" +
    "\132\070\152\072\151\073\123\074\145\101\135\103\147" +
    "\104\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\115\267\001\001\000\050\006\130\012" +
    "\134\047\266\050\153\051\146\052\127\054\143\056\142" +
    "\060\140\061\137\062\136\067\132\070\152\072\151\073" +
    "\123\074\145\101\135\103\147\104\032\001\001\000\002" +
    "\001\001\000\012\006\244\063\240\066\243\076\241\001" +
    "\001\000\014\012\134\061\237\062\136\103\147\104\032" +
    "\001\001\000\006\006\160\074\236\001\001\000\002\001" +
    "\001\000\010\006\223\057\224\075\226\001\001\000\032" +
    "\006\160\012\134\052\216\054\143\056\142\060\140\061" +
    "\137\062\136\074\145\101\135\103\147\104\032\001\001" +
    "\000\010\006\205\055\203\077\210\001\001\000\010\006" +
    "\176\053\174\100\200\001\001\000\002\001\001\000\014" +
    "\012\134\061\171\062\136\103\147\104\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\120" +
    "\156\001\001\000\002\001\001\000\032\006\160\012\134" +
    "\052\157\054\143\056\142\060\140\061\137\062\136\074" +
    "\145\101\135\103\147\104\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\121\162\001\001\000\002\001" +
    "\001\000\050\006\130\012\134\047\164\050\153\051\146" +
    "\052\127\054\143\056\142\060\140\061\137\062\136\067" +
    "\132\070\152\072\151\073\123\074\145\101\135\103\147" +
    "\104\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\006\043\031\170\032\036\042\042" +
    "\043\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\160\012\134\054\201\056\142\060\140\061\137\062\136" +
    "\074\145\101\135\103\147\104\032\001\001\000\010\006" +
    "\176\053\202\100\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\160\012\134\056\214" +
    "\060\140\061\137\062\136\074\145\101\135\103\147\104" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\205\055\215\077\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\113\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\160\012\134\060\233\061\137\062\136" +
    "\074\145\101\135\103\147\104\032\001\001\000\004\114" +
    "\234\001\001\000\010\006\223\057\235\075\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\006\160\012\134\052\265\054\143" +
    "\056\142\060\140\061\137\062\136\074\145\101\135\103" +
    "\147\104\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\254\012\134\052\252\054\143" +
    "\056\142\060\140\061\137\062\136\064\253\074\145\101" +
    "\135\103\147\104\032\001\001\000\002\001\001\000\006" +
    "\006\260\065\257\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\006\160\012\134\052\262\054" +
    "\143\056\142\060\140\061\137\062\136\074\145\101\135" +
    "\103\147\104\032\001\001\000\006\006\260\065\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\006\160\012\134\015\271\052" +
    "\270\054\143\056\142\060\140\061\137\062\136\074\145" +
    "\101\135\103\147\104\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\006\130\012\134" +
    "\047\274\050\153\051\146\052\127\054\143\056\142\060" +
    "\140\061\137\062\136\067\132\070\152\072\151\073\123" +
    "\074\145\101\135\103\147\104\032\001\001\000\006\006" +
    "\277\071\276\001\001\000\004\117\301\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\006" +
    "\130\012\134\047\302\050\153\051\146\052\127\054\143" +
    "\056\142\060\140\061\137\062\136\067\132\070\152\072" +
    "\151\073\123\074\145\101\135\103\147\104\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\116\305\001" +
    "\001\000\050\006\130\012\134\047\306\050\153\051\146" +
    "\052\127\054\143\056\142\060\140\061\137\062\136\067" +
    "\132\070\152\072\151\073\123\074\145\101\135\103\147" +
    "\104\032\001\001\000\006\006\277\071\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\160\012\134\052\316\054\143\056\142\060\140\061\137" +
    "\062\136\074\145\101\135\103\147\104\032\001\001\000" +
    "\002\001\001\000\032\006\160\012\134\052\320\054\143" +
    "\056\142\060\140\061\137\062\136\074\145\101\135\103" +
    "\147\104\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\006\130\012\134\047\323\050\153\051\146\052" +
    "\127\054\143\056\142\060\140\061\137\062\136\067\132" +
    "\070\152\072\151\073\123\074\145\101\135\103\147\104" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\043\026\354\031" +
    "\352\032\036\042\042\043\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\335\027" +
    "\334\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\337\001\001\000\006\006\335\027\340\001\001\000" +
    "\002\001\001\000\004\102\342\001\001\000\004\110\343" +
    "\001\001\000\006\006\345\030\346\001\001\000\006\103" +
    "\351\104\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\331\012\333\023\350\024\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\331\012\333\023\355\024\330\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\006\130\012\134\047\357" +
    "\050\153\051\146\052\127\054\143\056\142\060\140\061" +
    "\137\062\136\067\132\070\152\072\151\073\123\074\145" +
    "\101\135\103\147\104\032\001\001\000\002\001\001\000" +
    "\014\006\043\031\361\032\036\042\042\043\037\001\001" +
    "\000\002\001\001\000\004\106\366\001\001\000\002\001" +
    "\001\000\012\006\331\012\333\023\365\024\330\001\001" +
    "\000\002\001\001\000\014\006\043\031\367\032\036\042" +
    "\042\043\037\001\001\000\004\013\371\001\001\000\004" +
    "\107\372\001\001\000\002\001\001\000\050\006\130\012" +
    "\134\047\373\050\153\051\146\052\127\054\143\056\142" +
    "\060\140\061\137\062\136\067\132\070\152\072\151\073" +
    "\123\074\145\101\135\103\147\104\032\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private Generador_Codigo generador = new Generador_Codigo();

    public Generador_Codigo getGenerador() {
        return generador;
    }
    public String resultado="";
    public static ArrayList<Simbolo> tablaSimbolos = new ArrayList();

    public static boolean inCiclo=false;
    public static ArrayList<String> errores = new ArrayList<>();
    public static ArrayList<String> errSemantic = new ArrayList<>();
    public static ArrayList<String> lista_vars = new ArrayList<>();
    public static ArrayList<String[]> lista_params = new ArrayList<>();
    public static ArrayList<ArrayList<String>> funciones = new ArrayList<>();
    public static String funActual;
    public static String tipoActual;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);


        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), (linea+1)));
        //System.out.println(ScannerABC.errores.size());
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);

        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), linea+1));
     
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador_Sintactico$actions {



  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // empty ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("empty",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // id ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		RESULT = i; parser.getGenerador().recordar_identificador((String) i);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("id",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Boolean ::= PR_FALSE 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = lit; parser.getGenerador().recordar_RS_DO("Boolean",(String) lit);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",66, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Boolean ::= PR_TRUE 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = lit; parser.getGenerador().recordar_RS_DO("Boolean",(String) lit);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",66, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // literal ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",65, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // literal ::= L_CHAR 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = lit; parser.getGenerador().recordar_RS_DO("Char",(String) lit);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",65, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // literal ::= L_STRING 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = lit; parser.getGenerador().recordar_RS_DO("String",(String) lit);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",65, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // literal ::= L_FLOAT 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = lit; parser.getGenerador().recordar_RS_DO("Float",(String) lit);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",65, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // literal ::= L_INTEGER 
            {
              Object RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		String lit = (String)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = lit; parser.getGenerador().recordar_RS_DO("Int",(String) lit);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",65, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Tipo ::= PR_FLOAT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Tipo ::= PR_REAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Tipo ::= PR_STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Tipo ::= PR_SHORTINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Tipo ::= PR_LONGINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Tipo ::= PR_CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Tipo ::= PR_INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Tipo ::= PR_BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OperadoresLogicosUnarios ::= O_NOT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosUnarios",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OperadoresLogicosBinarios ::= O_AND 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OperadoresLogicosBinarios ::= O_OR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OperadoresComparacion ::= O_LESS_GREATER 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OperadoresComparacion ::= O_LESS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OperadoresComparacion ::= O_LESS_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OperadoresComparacion ::= O_GREATER 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OperadoresComparacion ::= O_GREATER_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OperadoresComparacion ::= O_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OperadorAsignacion ::= O_SLASH_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OperadorAsignacion ::= O_ASTERISK_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OperadorAsignacion ::= O_MINUS_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OperadorAsignacion ::= O_PLUS_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OperadorAsignacion ::= O_COLON_EQUALS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OperadoresEnteros ::= O_DIV 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OperadoresEnteros ::= O_MOD 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OperadoresEnteros ::= O_SLASH 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OperadoresEnteros ::= O_ASTERISK 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OperadoresEnteros ::= O_MINUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OperadoresEnteros ::= O_PLUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; System.out.println("HOLA"+(String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // IncrementoDecremento ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // IncrementoDecremento ::= O_MINUS_MINUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // IncrementoDecremento ::= O_PLUS_PLUS 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = o; parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // For ::= PR_FOR error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion FOR Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // For ::= PR_FOR IDENTIFICADOR O_COLON_EQUALS Expresion PR_TO Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // While ::= PR_WHILE error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion WHILE Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // While ::= PR_WHILE NT$11 Expresion PR_DO NT$12 PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		 parser.getGenerador().end_while(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
 parser.getGenerador().eval_exp_while(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",79, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$11 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().start_while(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",78, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Else ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Else ::= PR_ELSE NT$10 Instrucciones 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$10 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().else_if(); System.out.println("Else IF"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",77, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // continuarIF ::= error PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("continuarIF",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // continuarIF ::= Expresion error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END, Espera un PR_THEN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("continuarIF",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // continuarIF ::= Expresion PR_THEN NT$9 Instrucciones Else PR_END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("continuarIF",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$9 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().eval_exp_if();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",76, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IfThenElse ::= PR_IF NT$8 continuarIF 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		 parser.getGenerador().end_if(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",54, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().start_if(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",75, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // InstruccionSC ::= error O_SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion sc Recuperado con O_SEMICOLON");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // InstruccionSC ::= Expresion O_SEMICOLON 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // InstruccionBE ::= error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccionbe Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // InstruccionBE ::= For 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // InstruccionBE ::= While 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // InstruccionBE ::= IfThenElse 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Instruccion ::= InstruccionSC 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Instruccion ::= InstruccionBE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ListaParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ListaParametros ::= O_COMMA error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix: Expresion esperada despues de la coma.");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ListaParametros ::= O_COMMA Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // LParametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // LParametro ::= Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ExpresionAsignacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExpresionAsignacion ::= OperadorAsignacion Expresion 
            {
              Object RESULT =null;
		 parser.getGenerador().generarCodigoAsignacion();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expresion7 ::= ExpresionAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expresion6 ::= literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expresion6 ::= id Expresion7 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expresion5 ::= Expresion6 IncrementoDecremento 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion5",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expresion4 ::= Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expresion4 ::= OperadoresLogicosUnarios Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expresion4 ::= IncrementoDecremento Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ExpresionOperadoresEnteros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ExpresionOperadoresEnteros ::= OperadoresEnteros NT$6 Expresion4 NT$7 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$7 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
 parser.getGenerador().eval_exp_binaria();
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",74, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$6 ::= 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
 parser.getGenerador().recordar_operador((String) o);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",73, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expresion3 ::= Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExpresionOperadoresComparacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExpresionOperadoresComparacion ::= OperadoresComparacion Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expresion2 ::= Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExpresionOperadoresLogicos ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExpresionOperadoresLogicos ::= OperadoresLogicosBinarios Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expresion ::= Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Instrucciones ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Instrucciones ::= Instruccion Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // masParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // masParametros ::= O_COMMA Tipo NT$5 id masParametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$5 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
 parser.getGenerador().recordar_tipo((String) t);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",72, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Parametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Parametro ::= Tipo error 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros recuperado en Parametro"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Parametro ::= Tipo NT$4 id masParametros 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$4 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
 parser.getGenerador().recordar_tipo((String) t);
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",71, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // kk ::= r 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("kk",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // kk ::= Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("kk",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EncabezadoFuncion ::= PR_FUNCTION id O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS error kk 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros2"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EncabezadoFuncion ::= PR_FUNCTION id O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EncabezadoFuncion ::= PR_FUNCTION id O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 parser.getGenerador().guardar_funcion_TS((String) i,((String) t));
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EncabezadoProcedimiento ::= PR_PROCEDURE id O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rr ::= Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rr",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rr ::= PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rr",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Rutina ::= EncabezadoFuncion PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Rutina ::= EncabezadoProcedimiento PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Rutinas ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Rutinas ::= Rutina 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Inicializar ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Inicializar ::= O_EQUALS literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Identificadores ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Identificadores ::= O_COMMA id Identificadores 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ErroresVariables ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ErroresVariables ::= O_SEMICOLON Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con O_SEMICOLON Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Variable ::= error ErroresVariables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con ErroresVariables Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Variable ::= id Identificadores O_COLON Tipo NT$3 Inicializar O_SEMICOLON Variables 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)).value;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$3 ::= 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
 System.out.println("Tipo variables: " + (String) tipo); parser.getGenerador().guardar_variables_TS((String)tipo,1); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",70, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Variables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Variables ::= Variable 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SeccionVariables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SeccionVariables ::= PR_VAR Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ErrorConstante ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ErrorConstante ::= PR_VAR Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ErrorConstante ::= O_SEMICOLON Constantes 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Constante ::= error ErrorConstante 
            {
              Object RESULT =null;
		System.out.println("Error");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Constante ::= id O_EQUALS literal O_SEMICOLON Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Constantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Constantes ::= Constante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SeccionConstantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SeccionConstantes ::= PR_CONST Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // EntradaPrograma ::= PR_BEGIN NT$2 Instrucciones PR_END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		 parser.getGenerador().fin_programa(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EntradaPrograma",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().inicio_programa(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",69, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la estructura del programa");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= PR_PROGRAM IDENTIFICADOR NT$0 SeccionConstantes SeccionVariables NT$1 Rutinas EntradaPrograma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
		 System.out.println(parser.getGenerador().getCodigo());System.out.println(parser.getGenerador().getTabla_simbolos().toString()); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)).value;
 parser.getGenerador().finalizar_variables(); parser.getGenerador().inicializar_pila(); parser.getGenerador().iniciar_codigo(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",68, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.getGenerador().iniciar_variables(); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",67, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

