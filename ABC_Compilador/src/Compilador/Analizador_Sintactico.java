
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\002\004\000\002\007\010\000\002\007" +
    "\003\000\002\012\005\000\002\013\004\000\002\013\003" +
    "\000\002\014\003\000\002\014\003\000\002\015\007\000" +
    "\002\015\004\000\002\016\004\000\002\016\004\000\002" +
    "\016\003\000\002\020\004\000\002\020\003\000\002\021" +
    "\003\000\002\021\003\000\002\022\011\000\002\022\004" +
    "\000\002\024\004\000\002\024\003\000\002\025\005\000" +
    "\002\025\003\000\002\026\004\000\002\026\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\011\000\002\030" +
    "\004\000\002\004\010\000\002\004\004\000\002\003\003" +
    "\000\002\003\003\000\002\031\004\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\033\007\000\002" +
    "\033\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\003\000\002\035\004\000\002\035\003\000\002\036\003" +
    "\000\002\036\003\000\002\037\011\000\002\037\004\000" +
    "\002\040\007\000\002\040\007\000\002\041\011\000\002" +
    "\041\011\000\002\041\011\000\002\005\003\000\002\005" +
    "\003\000\002\042\003\000\002\043\005\000\002\043\004" +
    "\000\002\043\003\000\002\044\006\000\002\044\003\000" +
    "\002\045\004\000\002\045\003\000\002\050\004\000\002" +
    "\051\005\000\002\051\003\000\002\052\004\000\002\053" +
    "\005\000\002\053\003\000\002\054\004\000\002\055\005" +
    "\000\002\055\003\000\002\056\004\000\002\056\004\000" +
    "\002\056\003\000\002\057\004\000\002\060\004\000\002" +
    "\060\005\000\002\060\005\000\002\060\003\000\002\061" +
    "\003\000\002\061\005\000\002\061\005\000\002\064\004" +
    "\000\002\064\003\000\002\062\004\000\002\062\003\000" +
    "\002\063\005\000\002\063\004\000\002\063\003\000\002" +
    "\065\003\000\002\065\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\004\000\002\047\004" +
    "\000\002\047\004\000\002\066\010\000\002\066\006\000" +
    "\002\066\010\000\002\002\006\000\002\002\005\000\002" +
    "\002\004\000\002\002\003\000\002\067\004\000\002\067" +
    "\003\000\002\070\010\000\002\070\005\000\002\071\014" +
    "\000\002\071\005\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\073\003\000\002\073" +
    "\003\000\002\074\003\000\002\074\003\000\002\074\003" +
    "\000\002\074\003\000\002\074\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\075\003\000\002\075\003\000\002\076\003\000\002\076" +
    "\003\000\002\077\003\000\002\100\003\000\002\100\003" +
    "\000\002\100\003\000\002\100\003\000\002\100\003\000" +
    "\002\100\003\000\002\100\003\000\002\101\003\000\002" +
    "\101\003\000\002\101\003\000\002\101\003\000\002\101" +
    "\003\000\002\102\003\000\002\102\003\000\002\006\002" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\006\003\004\032\005\001\002\000\004\002" +
    "\uffff\001\002\000\004\010\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\014\015\uff6d\033" +
    "\uff6d\051\uff6d\063\013\070\uff6d\001\002\000\012\015\ufffc" +
    "\033\ufffc\051\ufffc\070\ufffc\001\002\000\012\015\u0101\033" +
    "\uff6d\051\uff6d\070\uff6d\001\002\000\016\003\015\010\016" +
    "\015\uff6d\033\uff6d\051\uff6d\070\uff6d\001\002\000\012\015" +
    "\ufffd\033\ufffd\051\ufffd\070\ufffd\001\002\000\014\015\036" +
    "\033\045\051\043\070\uff6d\107\040\001\002\000\004\101" +
    "\021\001\002\000\012\015\ufffb\033\ufffb\051\ufffb\070\ufffb" +
    "\001\002\000\012\015\ufffa\033\ufffa\051\ufffa\070\ufffa\001" +
    "\002\000\016\004\023\005\030\006\027\007\022\020\025" +
    "\055\026\001\002\000\060\003\uff72\021\uff72\022\uff72\035" +
    "\uff72\041\uff72\061\uff72\062\uff72\072\uff72\077\uff72\100\uff72" +
    "\101\uff72\102\uff72\103\uff72\106\uff72\107\uff72\113\uff72\116" +
    "\uff72\117\uff72\120\uff72\122\uff72\123\uff72\125\uff72\126\uff72" +
    "\001\002\000\060\003\uff74\021\uff74\022\uff74\035\uff74\041" +
    "\uff74\061\uff74\062\uff74\072\uff74\077\uff74\100\uff74\101\uff74" +
    "\102\uff74\103\uff74\106\uff74\107\uff74\113\uff74\116\uff74\117" +
    "\uff74\120\uff74\122\uff74\123\uff74\125\uff74\126\uff74\001\002" +
    "\000\004\107\032\001\002\000\060\003\uff6f\021\uff6f\022" +
    "\uff6f\035\uff6f\041\uff6f\061\uff6f\062\uff6f\072\uff6f\077\uff6f" +
    "\100\uff6f\101\uff6f\102\uff6f\103\uff6f\106\uff6f\107\uff6f\113" +
    "\uff6f\116\uff6f\117\uff6f\120\uff6f\122\uff6f\123\uff6f\125\uff6f" +
    "\126\uff6f\001\002\000\060\003\uff6e\021\uff6e\022\uff6e\035" +
    "\uff6e\041\uff6e\061\uff6e\062\uff6e\072\uff6e\077\uff6e\100\uff6e" +
    "\101\uff6e\102\uff6e\103\uff6e\106\uff6e\107\uff6e\113\uff6e\116" +
    "\uff6e\117\uff6e\120\uff6e\122\uff6e\123\uff6e\125\uff6e\126\uff6e" +
    "\001\002\000\060\003\uff73\021\uff73\022\uff73\035\uff73\041" +
    "\uff73\061\uff73\062\uff73\072\uff73\077\uff73\100\uff73\101\uff73" +
    "\102\uff73\103\uff73\106\uff73\107\uff73\113\uff73\116\uff73\117" +
    "\uff73\120\uff73\122\uff73\123\uff73\125\uff73\126\uff73\001\002" +
    "\000\060\003\uff71\021\uff71\022\uff71\035\uff71\041\uff71\061" +
    "\uff71\062\uff71\072\uff71\077\uff71\100\uff71\101\uff71\102\uff71" +
    "\103\uff71\106\uff71\107\uff71\113\uff71\116\uff71\117\uff71\120" +
    "\uff71\122\uff71\123\uff71\125\uff71\126\uff71\001\002\000\060" +
    "\003\uff70\021\uff70\022\uff70\035\uff70\041\uff70\061\uff70\062" +
    "\uff70\072\uff70\077\uff70\100\uff70\101\uff70\102\uff70\103\uff70" +
    "\106\uff70\107\uff70\113\uff70\116\uff70\117\uff70\120\uff70\122" +
    "\uff70\123\uff70\125\uff70\126\uff70\001\002\000\016\003\015" +
    "\010\016\015\uff6d\033\uff6d\051\uff6d\070\uff6d\001\002\000" +
    "\012\015\ufff9\033\ufff9\051\ufff9\070\ufff9\001\002\000\012" +
    "\015\ufff5\033\ufff5\051\ufff5\070\ufff5\001\002\000\016\003" +
    "\uffe8\015\uffe8\033\uffe8\051\uffe8\063\uffe8\070\uffe8\001\002" +
    "\000\016\003\150\010\151\015\uff6d\033\uff6d\051\uff6d\070" +
    "\uff6d\001\002\000\012\003\116\015\uff6d\063\114\070\uff6d" +
    "\001\002\000\016\003\015\010\016\015\uff6d\033\uff6d\051" +
    "\uff6d\070\uff6d\001\002\000\010\015\uff6d\063\114\070\uff6d" +
    "\001\002\000\016\003\uffe7\015\uffe7\033\uffe7\051\uffe7\063" +
    "\uffe7\070\uffe7\001\002\000\004\010\076\001\002\000\012" +
    "\015\ufff8\033\ufff8\051\ufff8\070\ufff8\001\002\000\004\010" +
    "\046\001\002\000\004\127\047\001\002\000\024\003\060" +
    "\023\062\024\052\030\050\042\055\044\063\064\053\067" +
    "\061\126\uff6d\001\002\000\020\003\uff75\010\uff75\015\uff75" +
    "\063\uff75\070\uff75\101\uff75\107\uff75\001\002\000\006\003" +
    "\066\010\067\001\002\000\020\003\uff77\010\uff77\015\uff77" +
    "\063\uff77\070\uff77\101\uff77\107\uff77\001\002\000\020\003" +
    "\uff79\010\uff79\015\uff79\063\uff79\070\uff79\101\uff79\107\uff79" +
    "\001\002\000\004\126\uffc7\001\002\000\020\003\uff78\010" +
    "\uff78\015\uff78\063\uff78\070\uff78\101\uff78\107\uff78\001\002" +
    "\000\004\126\uffca\001\002\000\004\126\065\001\002\000" +
    "\004\126\064\001\002\000\020\003\uff7b\010\uff7b\015\uff7b" +
    "\063\uff7b\070\uff7b\101\uff7b\107\uff7b\001\002\000\020\003" +
    "\uff76\010\uff76\015\uff76\063\uff76\070\uff76\101\uff76\107\uff76" +
    "\001\002\000\020\003\uff7a\010\uff7a\015\uff7a\063\uff7a\070" +
    "\uff7a\101\uff7a\107\uff7a\001\002\000\010\015\uffd0\063\uffd0" +
    "\070\uffd0\001\002\000\010\015\uffd1\063\uffd1\070\uffd1\001" +
    "\002\000\004\126\uffc8\001\002\000\006\120\072\126\uff6d" +
    "\001\002\000\004\126\uffc9\001\002\000\004\126\uffc5\001" +
    "\002\000\020\023\062\024\052\030\050\042\055\044\063" +
    "\064\053\067\061\001\002\000\004\010\074\001\002\000" +
    "\006\120\072\126\uff6d\001\002\000\004\126\uffc6\001\002" +
    "\000\004\127\077\001\002\000\024\003\101\023\062\024" +
    "\052\030\050\042\055\044\063\064\053\067\061\126\uff6d" +
    "\001\002\000\004\126\105\001\002\000\004\126\102\001" +
    "\002\000\004\111\103\001\002\000\020\023\062\024\052" +
    "\030\050\042\055\044\063\064\053\067\061\001\002\000" +
    "\012\003\uffce\015\uffce\063\uffce\070\uffce\001\002\000\006" +
    "\003\106\111\107\001\002\000\030\003\116\015\uff6d\023" +
    "\062\024\052\030\050\042\055\044\063\063\114\064\053" +
    "\067\061\070\uff6d\001\002\000\020\023\062\024\052\030" +
    "\050\042\055\044\063\064\053\067\061\001\002\000\012" +
    "\003\uffcf\015\uffcf\063\uffcf\070\uffcf\001\002\000\012\003" +
    "\uffcb\015\uffcb\063\uffcb\070\uffcb\001\002\000\012\003\uffcd" +
    "\015\uffcd\063\uffcd\070\uffcd\001\002\000\012\003\uffcc\015" +
    "\uffcc\063\uffcc\070\uffcc\001\002\000\012\003\015\010\016" +
    "\015\uff6d\070\uff6d\001\002\000\006\015\uffdf\070\uffdf\001" +
    "\002\000\020\003\uff6d\015\uff6d\033\045\051\043\056\362" +
    "\063\uff6d\070\uff6d\001\002\000\006\015\122\070\uff6d\001" +
    "\002\000\004\070\164\001\002\000\004\070\uffd6\001\002" +
    "\000\010\003\123\010\125\070\uff6d\001\002\000\012\033" +
    "\045\051\043\070\uff6d\107\146\001\002\000\004\070\uffd7" +
    "\001\002\000\006\111\uff6d\120\132\001\002\000\004\070" +
    "\uffd5\001\002\000\004\070\uffd4\001\002\000\004\111\135" +
    "\001\002\000\004\111\uffeb\001\002\000\004\010\133\001" +
    "\002\000\006\111\uff6d\120\132\001\002\000\004\111\uffec" +
    "\001\002\000\020\023\062\024\052\030\050\042\055\044" +
    "\063\064\053\067\061\001\002\000\006\101\137\107\uff6d" +
    "\001\002\000\016\004\023\005\030\006\027\007\022\020" +
    "\025\055\026\001\002\000\004\107\uffe9\001\002\000\004" +
    "\107\142\001\002\000\010\003\123\010\125\070\uff6d\001" +
    "\002\000\004\070\uffd3\001\002\000\004\107\uffea\001\002" +
    "\000\012\015\uffed\033\uffed\051\uffed\070\uffed\001\002\000" +
    "\016\003\150\010\151\015\uff6d\033\uff6d\051\uff6d\070\uff6d" +
    "\001\002\000\004\070\uffd2\001\002\000\014\015\uff6d\033" +
    "\045\051\043\070\uff6d\107\146\001\002\000\006\111\uff6d" +
    "\120\132\001\002\000\012\015\ufff2\033\ufff2\051\ufff2\070" +
    "\ufff2\001\002\000\012\015\ufff1\033\ufff1\051\ufff1\070\ufff1" +
    "\001\002\000\012\015\uffee\033\uffee\051\uffee\070\uffee\001" +
    "\002\000\004\111\156\001\002\000\020\023\062\024\052" +
    "\030\050\042\055\044\063\064\053\067\061\001\002\000" +
    "\006\101\137\107\uff6d\001\002\000\004\107\161\001\002" +
    "\000\016\003\150\010\151\015\uff6d\033\uff6d\051\uff6d\070" +
    "\uff6d\001\002\000\012\015\ufff0\033\ufff0\051\ufff0\070\ufff0" +
    "\001\002\000\012\015\uffef\033\uffef\051\uffef\070\uffef\001" +
    "\002\000\042\003\205\004\023\005\030\006\027\007\022" +
    "\010\210\014\216\020\025\037\166\047\174\053\170\055" +
    "\026\056\uff6d\116\167\122\175\127\203\001\002\000\044" +
    "\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\014" +
    "\uffa3\020\uffa3\037\uffa3\047\uffa3\053\uffa3\055\uffa3\056\uffa3" +
    "\057\uffa3\116\uffa3\122\uffa3\127\uffa3\001\002\000\022\004" +
    "\uff7c\005\uff7c\006\uff7c\007\uff7c\010\uff7c\020\uff7c\055\uff7c" +
    "\127\uff7c\001\002\000\100\003\uff91\004\uff91\005\uff91\006" +
    "\uff91\007\uff91\010\uff91\020\uff91\021\uff91\022\uff91\035\uff91" +
    "\041\uff91\055\uff91\061\uff91\062\uff91\072\uff91\077\uff91\100" +
    "\uff91\101\uff91\102\uff91\103\uff91\106\uff91\107\uff91\113\uff91" +
    "\116\uff91\117\uff91\120\uff91\122\uff91\123\uff91\125\uff91\126" +
    "\uff91\127\uff91\001\002\000\006\003\345\010\346\001\002" +
    "\000\004\107\344\001\002\000\026\004\uff90\005\uff90\006" +
    "\uff90\007\uff90\010\uff90\020\uff90\055\uff90\056\uffc3\057\uffc3" +
    "\127\uff90\001\002\000\044\003\205\004\023\005\030\006" +
    "\027\007\022\010\210\014\216\020\025\037\166\047\174" +
    "\053\170\055\026\056\uff6d\057\uff6d\116\167\122\175\127" +
    "\203\001\002\000\032\003\325\004\023\005\030\006\027" +
    "\007\022\010\210\020\025\037\166\055\026\116\167\122" +
    "\175\127\203\001\002\000\100\003\uff92\004\uff92\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\020\uff92\021\uff92\022\uff92\035" +
    "\uff92\041\uff92\055\uff92\061\uff92\062\uff92\072\uff92\077\uff92" +
    "\100\uff92\101\uff92\102\uff92\103\uff92\106\uff92\107\uff92\113" +
    "\uff92\116\uff92\117\uff92\120\uff92\122\uff92\123\uff92\125\uff92" +
    "\126\uff92\127\uff92\001\002\000\022\004\023\005\030\006" +
    "\027\007\022\010\210\020\025\055\026\127\203\001\002" +
    "\000\060\003\uff6d\021\uff6d\022\uff6d\035\uff6d\041\uff6d\061" +
    "\uff6d\062\uff6d\072\uff6d\077\uff6d\100\uff6d\101\uff6d\102\uff6d" +
    "\103\uff6d\106\uff6d\107\uff6d\113\uff6d\116\167\117\uff6d\120" +
    "\uff6d\122\175\123\uff6d\125\uff6d\126\uff6d\001\002\000\060" +
    "\003\uffb7\021\uffb7\022\uffb7\035\uffb7\041\uffb7\061\uffb7\062" +
    "\uffb7\072\uffb7\077\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7" +
    "\106\uffb7\107\uffb7\113\uffb7\116\uffb7\117\uffb7\120\uffb7\122" +
    "\uffb7\123\uffb7\125\uffb7\126\uffb7\001\002\000\060\003\uff6d" +
    "\021\uff6d\022\uff6d\035\uff6d\041\313\061\uff6d\062\317\072" +
    "\uff6d\077\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d\106\uff6d" +
    "\107\uff6d\113\316\116\uff6d\117\315\120\uff6d\122\uff6d\123" +
    "\312\125\307\126\uff6d\001\002\000\060\003\uff6d\021\uff6d" +
    "\022\uff6d\035\uff6d\041\uff6d\061\uff6d\062\uff6d\072\uff6d\077" +
    "\303\100\277\101\275\102\300\103\304\106\302\107\uff6d" +
    "\113\uff6d\116\uff6d\117\uff6d\120\uff6d\122\uff6d\123\uff6d\125" +
    "\uff6d\126\uff6d\001\002\000\030\004\023\005\030\006\027" +
    "\007\022\010\210\020\025\037\166\055\026\116\167\122" +
    "\175\127\203\001\002\000\060\003\uff6d\021\uff6d\022\uff6d" +
    "\035\265\041\uff6d\061\uff6d\062\uff6d\072\263\077\uff6d\100" +
    "\uff6d\101\uff6d\102\uff6d\103\uff6d\106\uff6d\107\uff6d\113\uff6d" +
    "\116\uff6d\117\uff6d\120\uff6d\122\uff6d\123\uff6d\125\uff6d\126" +
    "\uff6d\001\002\000\006\056\261\107\260\001\002\000\022" +
    "\004\023\005\030\006\027\007\022\010\210\020\025\055" +
    "\026\127\203\001\002\000\044\003\uffa6\004\uffa6\005\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\014\uffa6\020\uffa6\037\uffa6\047" +
    "\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6\116\uffa6\122\uffa6" +
    "\127\uffa6\001\002\000\074\003\uff6d\021\uff6d\022\uff6d\035" +
    "\uff6d\041\uff6d\061\uff6d\062\uff6d\072\uff6d\077\uff6d\100\uff6d" +
    "\101\uff6d\102\uff6d\103\uff6d\106\uff6d\107\uff6d\110\236\112" +
    "\237\113\uff6d\115\233\116\uff6d\117\uff6d\120\uff6d\121\242" +
    "\122\uff6d\123\uff6d\124\240\125\uff6d\126\uff6d\127\241\001" +
    "\002\000\060\003\uffb2\021\uffb2\022\uffb2\035\uffb2\041\uffb2" +
    "\061\uffb2\062\uffb2\072\uffb2\077\uffb2\100\uffb2\101\uffb2\102" +
    "\uffb2\103\uffb2\106\uffb2\107\uffb2\113\uffb2\116\uffb2\117\uffb2" +
    "\120\uffb2\122\uffb2\123\uffb2\125\uffb2\126\uffb2\001\002\000" +
    "\004\056\227\001\002\000\044\003\uffa4\004\uffa4\005\uffa4" +
    "\006\uffa4\007\uffa4\010\uffa4\014\uffa4\020\uffa4\037\uffa4\047" +
    "\uffa4\053\uffa4\055\uffa4\056\uffa4\057\uffa4\116\uffa4\122\uffa4" +
    "\127\uffa4\001\002\000\044\003\uffa5\004\uffa5\005\uffa5\006" +
    "\uffa5\007\uffa5\010\uffa5\014\uffa5\020\uffa5\037\uffa5\047\uffa5" +
    "\053\uffa5\055\uffa5\056\uffa5\057\uffa5\116\uffa5\122\uffa5\127" +
    "\uffa5\001\002\000\044\003\uffa7\004\uffa7\005\uffa7\006\uffa7" +
    "\007\uffa7\010\uffa7\014\uffa7\020\uffa7\037\uffa7\047\uffa7\053" +
    "\uffa7\055\uffa7\056\uffa7\057\uffa7\116\uffa7\122\uffa7\127\uffa7" +
    "\001\002\000\032\003\221\004\023\005\030\006\027\007" +
    "\022\010\210\020\025\037\166\055\026\116\167\122\175" +
    "\127\203\001\002\000\004\061\223\001\002\000\100\003" +
    "\uff90\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\020\uff90" +
    "\021\uff90\022\uff90\035\uff90\041\uff90\055\uff90\061\uff90\062" +
    "\uff90\072\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90" +
    "\106\uff90\107\uff90\113\uff90\116\uff90\117\uff90\120\uff90\122" +
    "\uff90\123\uff90\125\uff90\126\uff90\127\uff90\001\002\000\004" +
    "\056\222\001\002\000\044\003\uff95\004\uff95\005\uff95\006" +
    "\uff95\007\uff95\010\uff95\014\uff95\020\uff95\037\uff95\047\uff95" +
    "\053\uff95\055\uff95\056\uff95\057\uff95\116\uff95\122\uff95\127" +
    "\uff95\001\002\000\004\070\224\001\002\000\042\003\205" +
    "\004\023\005\030\006\027\007\022\010\210\014\216\020" +
    "\025\037\166\047\174\053\170\055\026\056\uff6d\116\167" +
    "\122\175\127\203\001\002\000\004\056\226\001\002\000" +
    "\044\003\uff96\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\014\uff96\020\uff96\037\uff96\047\uff96\053\uff96\055\uff96\056" +
    "\uff96\057\uff96\116\uff96\122\uff96\127\uff96\001\002\000\016" +
    "\003\uff6d\015\uff6d\033\045\051\043\063\uff6d\070\uff6d\001" +
    "\002\000\016\003\uffe4\015\uffe4\033\uffe4\051\uffe4\063\uffe4" +
    "\070\uffe4\001\002\000\060\003\uffb5\021\uffb5\022\uffb5\035" +
    "\uffb5\041\uffb5\061\uffb5\062\uffb5\072\uffb5\077\uffb5\100\uffb5" +
    "\101\uffb5\102\uffb5\103\uffb5\106\uffb5\107\uffb5\113\uffb5\116" +
    "\uffb5\117\uffb5\120\uffb5\122\uffb5\123\uffb5\125\uffb5\126\uffb5" +
    "\001\002\000\030\004\023\005\030\006\027\007\022\010" +
    "\210\020\025\037\166\055\026\116\167\122\175\127\203" +
    "\001\002\000\030\004\uff87\005\uff87\006\uff87\007\uff87\010" +
    "\uff87\020\uff87\037\uff87\055\uff87\116\uff87\122\uff87\127\uff87" +
    "\001\002\000\060\003\uffb1\021\uffb1\022\uffb1\035\uffb1\041" +
    "\uffb1\061\uffb1\062\uffb1\072\uffb1\077\uffb1\100\uffb1\101\uffb1" +
    "\102\uffb1\103\uffb1\106\uffb1\107\uffb1\113\uffb1\116\uffb1\117" +
    "\uffb1\120\uffb1\122\uffb1\123\uffb1\125\uffb1\126\uffb1\001\002" +
    "\000\060\003\uffad\021\uffad\022\uffad\035\uffad\041\uffad\061" +
    "\uffad\062\uffad\072\uffad\077\uffad\100\uffad\101\uffad\102\uffad" +
    "\103\uffad\106\uffad\107\uffad\113\uffad\116\uffad\117\uffad\120" +
    "\uffad\122\uffad\123\uffad\125\uffad\126\uffad\001\002\000\030" +
    "\004\uff89\005\uff89\006\uff89\007\uff89\010\uff89\020\uff89\037" +
    "\uff89\055\uff89\116\uff89\122\uff89\127\uff89\001\002\000\030" +
    "\004\uff85\005\uff85\006\uff85\007\uff85\010\uff85\020\uff85\037" +
    "\uff85\055\uff85\116\uff85\122\uff85\127\uff85\001\002\000\030" +
    "\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\020\uff86\037" +
    "\uff86\055\uff86\116\uff86\122\uff86\127\uff86\001\002\000\034" +
    "\003\uff6d\004\023\005\030\006\027\007\022\010\210\020" +
    "\025\037\166\055\026\116\167\122\175\126\uff6d\127\203" +
    "\001\002\000\030\004\uff88\005\uff88\006\uff88\007\uff88\010" +
    "\uff88\020\uff88\037\uff88\055\uff88\116\uff88\122\uff88\127\uff88" +
    "\001\002\000\010\003\uff6d\120\252\126\uff6d\001\002\000" +
    "\006\003\246\126\247\001\002\000\026\003\uffab\004\uff90" +
    "\005\uff90\006\uff90\007\uff90\010\uff90\020\uff90\055\uff90\126" +
    "\uffab\127\uff90\001\002\000\060\003\uffaf\021\uffaf\022\uffaf" +
    "\035\uffaf\041\uffaf\061\uffaf\062\uffaf\072\uffaf\077\uffaf\100" +
    "\uffaf\101\uffaf\102\uffaf\103\uffaf\106\uffaf\107\uffaf\113\uffaf" +
    "\116\uffaf\117\uffaf\120\uffaf\122\uffaf\123\uffaf\125\uffaf\126" +
    "\uffaf\001\002\000\060\003\uffb0\021\uffb0\022\uffb0\035\uffb0" +
    "\041\uffb0\061\uffb0\062\uffb0\072\uffb0\077\uffb0\100\uffb0\101" +
    "\uffb0\102\uffb0\103\uffb0\106\uffb0\107\uffb0\113\uffb0\116\uffb0" +
    "\117\uffb0\120\uffb0\122\uffb0\123\uffb0\125\uffb0\126\uffb0\001" +
    "\002\000\006\003\uffac\126\uffac\001\002\000\006\003\uffa8" +
    "\126\uffa8\001\002\000\032\003\254\004\023\005\030\006" +
    "\027\007\022\010\210\020\025\037\166\055\026\116\167" +
    "\122\175\127\203\001\002\000\010\003\uff6d\120\252\126" +
    "\uff6d\001\002\000\006\003\uffa9\126\uffa9\001\002\000\006" +
    "\003\uffaa\126\uffaa\001\002\000\060\003\uffae\021\uffae\022" +
    "\uffae\035\uffae\041\uffae\061\uffae\062\uffae\072\uffae\077\uffae" +
    "\100\uffae\101\uffae\102\uffae\103\uffae\106\uffae\107\uffae\113" +
    "\uffae\116\uffae\117\uffae\120\uffae\122\uffae\123\uffae\125\uffae" +
    "\126\uffae\001\002\000\060\003\uffb9\021\uffb9\022\uffb9\035" +
    "\uffb9\041\uffb9\061\uffb9\062\uffb9\072\uffb9\077\uffb9\100\uffb9" +
    "\101\uffb9\102\uffb9\103\uffb9\106\uffb9\107\uffb9\113\uffb9\116" +
    "\uffb9\117\uffb9\120\uffb9\122\uffb9\123\uffb9\125\uffb9\126\uffb9" +
    "\001\002\000\044\003\uffa0\004\uffa0\005\uffa0\006\uffa0\007" +
    "\uffa0\010\uffa0\014\uffa0\020\uffa0\037\uffa0\047\uffa0\053\uffa0" +
    "\055\uffa0\056\uffa0\057\uffa0\116\uffa0\122\uffa0\127\uffa0\001" +
    "\002\000\044\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\014\uffa2\020\uffa2\037\uffa2\047\uffa2\053\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\116\uffa2\122\uffa2\127\uffa2\001\002" +
    "\000\060\003\uffc2\021\uffc2\022\uffc2\035\uffc2\041\uffc2\061" +
    "\uffc2\062\uffc2\072\uffc2\077\uffc2\100\uffc2\101\uffc2\102\uffc2" +
    "\103\uffc2\106\uffc2\107\uffc2\113\uffc2\116\uffc2\117\uffc2\120" +
    "\uffc2\122\uffc2\123\uffc2\125\uffc2\126\uffc2\001\002\000\030" +
    "\004\uff7d\005\uff7d\006\uff7d\007\uff7d\010\uff7d\020\uff7d\037" +
    "\uff7d\055\uff7d\116\uff7d\122\uff7d\127\uff7d\001\002\000\060" +
    "\003\uffc0\021\uffc0\022\uffc0\035\uffc0\041\uffc0\061\uffc0\062" +
    "\uffc0\072\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0" +
    "\106\uffc0\107\uffc0\113\uffc0\116\uffc0\117\uffc0\120\uffc0\122" +
    "\uffc0\123\uffc0\125\uffc0\126\uffc0\001\002\000\030\004\uff7e" +
    "\005\uff7e\006\uff7e\007\uff7e\010\uff7e\020\uff7e\037\uff7e\055" +
    "\uff7e\116\uff7e\122\uff7e\127\uff7e\001\002\000\030\004\023" +
    "\005\030\006\027\007\022\010\210\020\025\037\166\055" +
    "\026\116\167\122\175\127\203\001\002\000\060\003\uff6d" +
    "\021\uff6d\022\uff6d\035\265\041\uff6d\061\uff6d\062\uff6d\072" +
    "\263\077\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d\106\uff6d" +
    "\107\uff6d\113\uff6d\116\uff6d\117\uff6d\120\uff6d\122\uff6d\123" +
    "\uff6d\125\uff6d\126\uff6d\001\002\000\060\003\uffc1\021\uffc1" +
    "\022\uffc1\035\uffc1\041\uffc1\061\uffc1\062\uffc1\072\uffc1\077" +
    "\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\106\uffc1\107\uffc1" +
    "\113\uffc1\116\uffc1\117\uffc1\120\uffc1\122\uffc1\123\uffc1\125" +
    "\uffc1\126\uffc1\001\002\000\006\003\272\126\273\001\002" +
    "\000\060\003\uffb3\021\uffb3\022\uffb3\035\uffb3\041\uffb3\061" +
    "\uffb3\062\uffb3\072\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3" +
    "\103\uffb3\106\uffb3\107\uffb3\113\uffb3\116\uffb3\117\uffb3\120" +
    "\uffb3\122\uffb3\123\uffb3\125\uffb3\126\uffb3\001\002\000\060" +
    "\003\uffb4\021\uffb4\022\uffb4\035\uffb4\041\uffb4\061\uffb4\062" +
    "\uffb4\072\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4" +
    "\106\uffb4\107\uffb4\113\uffb4\116\uffb4\117\uffb4\120\uffb4\122" +
    "\uffb4\123\uffb4\125\uffb4\126\uffb4\001\002\000\060\003\uffbf" +
    "\021\uffbf\022\uffbf\035\uffbf\041\uffbf\061\uffbf\062\uffbf\072" +
    "\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf\103\uffbf\106\uffbf" +
    "\107\uffbf\113\uffbf\116\uffbf\117\uffbf\120\uffbf\122\uffbf\123" +
    "\uffbf\125\uffbf\126\uffbf\001\002\000\030\004\uff84\005\uff84" +
    "\006\uff84\007\uff84\010\uff84\020\uff84\037\uff84\055\uff84\116" +
    "\uff84\122\uff84\127\uff84\001\002\000\060\003\uffbd\021\uffbd" +
    "\022\uffbd\035\uffbd\041\uffbd\061\uffbd\062\uffbd\072\uffbd\077" +
    "\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd\106\uffbd\107\uffbd" +
    "\113\uffbd\116\uffbd\117\uffbd\120\uffbd\122\uffbd\123\uffbd\125" +
    "\uffbd\126\uffbd\001\002\000\030\004\uff82\005\uff82\006\uff82" +
    "\007\uff82\010\uff82\020\uff82\037\uff82\055\uff82\116\uff82\122" +
    "\uff82\127\uff82\001\002\000\030\004\uff7f\005\uff7f\006\uff7f" +
    "\007\uff7f\010\uff7f\020\uff7f\037\uff7f\055\uff7f\116\uff7f\122" +
    "\uff7f\127\uff7f\001\002\000\030\004\023\005\030\006\027" +
    "\007\022\010\210\020\025\037\166\055\026\116\167\122" +
    "\175\127\203\001\002\000\030\004\uff80\005\uff80\006\uff80" +
    "\007\uff80\010\uff80\020\uff80\037\uff80\055\uff80\116\uff80\122" +
    "\uff80\127\uff80\001\002\000\030\004\uff83\005\uff83\006\uff83" +
    "\007\uff83\010\uff83\020\uff83\037\uff83\055\uff83\116\uff83\122" +
    "\uff83\127\uff83\001\002\000\030\004\uff81\005\uff81\006\uff81" +
    "\007\uff81\010\uff81\020\uff81\037\uff81\055\uff81\116\uff81\122" +
    "\uff81\127\uff81\001\002\000\060\003\uff6d\021\uff6d\022\uff6d" +
    "\035\uff6d\041\uff6d\061\uff6d\062\uff6d\072\uff6d\077\303\100" +
    "\277\101\275\102\300\103\304\106\302\107\uff6d\113\uff6d" +
    "\116\uff6d\117\uff6d\120\uff6d\122\uff6d\123\uff6d\125\uff6d\126" +
    "\uff6d\001\002\000\060\003\uffbe\021\uffbe\022\uffbe\035\uffbe" +
    "\041\uffbe\061\uffbe\062\uffbe\072\uffbe\077\uffbe\100\uffbe\101" +
    "\uffbe\102\uffbe\103\uffbe\106\uffbe\107\uffbe\113\uffbe\116\uffbe" +
    "\117\uffbe\120\uffbe\122\uffbe\123\uffbe\125\uffbe\126\uffbe\001" +
    "\002\000\030\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d" +
    "\020\uff8d\037\uff8d\055\uff8d\116\uff8d\122\uff8d\127\uff8d\001" +
    "\002\000\060\003\uffba\021\uffba\022\uffba\035\uffba\041\uffba" +
    "\061\uffba\062\uffba\072\uffba\077\uffba\100\uffba\101\uffba\102" +
    "\uffba\103\uffba\106\uffba\107\uffba\113\uffba\116\uffba\117\uffba" +
    "\120\uffba\122\uffba\123\uffba\125\uffba\126\uffba\001\002\000" +
    "\060\003\uffbc\021\uffbc\022\uffbc\035\uffbc\041\uffbc\061\uffbc" +
    "\062\uffbc\072\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103" +
    "\uffbc\106\uffbc\107\uffbc\113\uffbc\116\uffbc\117\uffbc\120\uffbc" +
    "\122\uffbc\123\uffbc\125\uffbc\126\uffbc\001\002\000\030\004" +
    "\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\020\uff8f\037\uff8f" +
    "\055\uff8f\116\uff8f\122\uff8f\127\uff8f\001\002\000\030\004" +
    "\uff8b\005\uff8b\006\uff8b\007\uff8b\010\uff8b\020\uff8b\037\uff8b" +
    "\055\uff8b\116\uff8b\122\uff8b\127\uff8b\001\002\000\030\004" +
    "\023\005\030\006\027\007\022\010\210\020\025\037\166" +
    "\055\026\116\167\122\175\127\203\001\002\000\030\004" +
    "\uff8e\005\uff8e\006\uff8e\007\uff8e\010\uff8e\020\uff8e\037\uff8e" +
    "\055\uff8e\116\uff8e\122\uff8e\127\uff8e\001\002\000\030\004" +
    "\uff8c\005\uff8c\006\uff8c\007\uff8c\010\uff8c\020\uff8c\037\uff8c" +
    "\055\uff8c\116\uff8c\122\uff8c\127\uff8c\001\002\000\030\004" +
    "\uff8a\005\uff8a\006\uff8a\007\uff8a\010\uff8a\020\uff8a\037\uff8a" +
    "\055\uff8a\116\uff8a\122\uff8a\127\uff8a\001\002\000\060\003" +
    "\uff6d\021\uff6d\022\uff6d\035\uff6d\041\313\061\uff6d\062\317" +
    "\072\uff6d\077\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d\106" +
    "\uff6d\107\uff6d\113\316\116\uff6d\117\315\120\uff6d\122\uff6d" +
    "\123\312\125\307\126\uff6d\001\002\000\060\003\uffbb\021" +
    "\uffbb\022\uffbb\035\uffbb\041\uffbb\061\uffbb\062\uffbb\072\uffbb" +
    "\077\uffbb\100\uffbb\101\uffbb\102\uffbb\103\uffbb\106\uffbb\107" +
    "\uffbb\113\uffbb\116\uffbb\117\uffbb\120\uffbb\122\uffbb\123\uffbb" +
    "\125\uffbb\126\uffbb\001\002\000\060\003\uffb6\021\uffb6\022" +
    "\uffb6\035\uffb6\041\uffb6\061\uffb6\062\uffb6\072\uffb6\077\uffb6" +
    "\100\uffb6\101\uffb6\102\uffb6\103\uffb6\106\uffb6\107\uffb6\113" +
    "\uffb6\116\uffb6\117\uffb6\120\uffb6\122\uffb6\123\uffb6\125\uffb6" +
    "\126\uffb6\001\002\000\060\003\uffb8\021\uffb8\022\uffb8\035" +
    "\uffb8\041\uffb8\061\uffb8\062\uffb8\072\uffb8\077\uffb8\100\uffb8" +
    "\101\uffb8\102\uffb8\103\uffb8\106\uffb8\107\uffb8\113\uffb8\116" +
    "\uffb8\117\uffb8\120\uffb8\122\uffb8\123\uffb8\125\uffb8\126\uffb8" +
    "\001\002\000\006\003\335\022\336\001\002\000\004\022" +
    "\326\001\002\000\044\003\205\004\023\005\030\006\027" +
    "\007\022\010\210\014\216\020\025\037\166\047\174\053" +
    "\170\055\026\056\uff6d\057\uff6d\116\167\122\175\127\203" +
    "\001\002\000\006\056\uff6d\057\330\001\002\000\042\003" +
    "\205\004\023\005\030\006\027\007\022\010\210\014\216" +
    "\020\025\037\166\047\174\053\170\055\026\056\uff6d\116" +
    "\167\122\175\127\203\001\002\000\004\056\333\001\002" +
    "\000\004\056\uff97\001\002\000\044\003\uff9d\004\uff9d\005" +
    "\uff9d\006\uff9d\007\uff9d\010\uff9d\014\uff9d\020\uff9d\037\uff9d" +
    "\047\uff9d\053\uff9d\055\uff9d\056\uff9d\057\uff9d\116\uff9d\122" +
    "\uff9d\127\uff9d\001\002\000\004\056\uff98\001\002\000\004" +
    "\056\342\001\002\000\044\003\205\004\023\005\030\006" +
    "\027\007\022\010\210\014\216\020\025\037\166\047\174" +
    "\053\170\055\026\056\uff6d\057\uff6d\116\167\122\175\127" +
    "\203\001\002\000\006\056\uff6d\057\330\001\002\000\004" +
    "\056\341\001\002\000\044\003\uff9f\004\uff9f\005\uff9f\006" +
    "\uff9f\007\uff9f\010\uff9f\014\uff9f\020\uff9f\037\uff9f\047\uff9f" +
    "\053\uff9f\055\uff9f\056\uff9f\057\uff9f\116\uff9f\122\uff9f\127" +
    "\uff9f\001\002\000\044\003\uff9e\004\uff9e\005\uff9e\006\uff9e" +
    "\007\uff9e\010\uff9e\014\uff9e\020\uff9e\037\uff9e\047\uff9e\053" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\116\uff9e\122\uff9e\127\uff9e" +
    "\001\002\000\006\056\uffc4\057\uffc4\001\002\000\044\003" +
    "\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1\014\uffa1" +
    "\020\uffa1\037\uffa1\047\uffa1\053\uffa1\055\uffa1\056\uffa1\057" +
    "\uffa1\116\uffa1\122\uffa1\127\uffa1\001\002\000\004\056\357" +
    "\001\002\000\004\110\347\001\002\000\030\004\023\005" +
    "\030\006\027\007\022\010\210\020\025\037\166\055\026" +
    "\116\167\122\175\127\203\001\002\000\004\021\351\001" +
    "\002\000\030\004\023\005\030\006\027\007\022\010\210" +
    "\020\025\037\166\055\026\116\167\122\175\127\203\001" +
    "\002\000\004\061\353\001\002\000\004\070\354\001\002" +
    "\000\042\003\205\004\023\005\030\006\027\007\022\010" +
    "\210\014\216\020\025\037\166\047\174\053\170\055\026" +
    "\056\uff6d\116\167\122\175\127\203\001\002\000\004\056" +
    "\356\001\002\000\044\003\uff94\004\uff94\005\uff94\006\uff94" +
    "\007\uff94\010\uff94\014\uff94\020\uff94\037\uff94\047\uff94\053" +
    "\uff94\055\uff94\056\uff94\057\uff94\116\uff94\122\uff94\127\uff94" +
    "\001\002\000\044\003\uff93\004\uff93\005\uff93\006\uff93\007" +
    "\uff93\010\uff93\014\uff93\020\uff93\037\uff93\047\uff93\053\uff93" +
    "\055\uff93\056\uff93\057\uff93\116\uff93\122\uff93\127\uff93\001" +
    "\002\000\016\003\uffe1\015\uffe1\033\uffe1\051\uffe1\063\uffe1" +
    "\070\uffe1\001\002\000\016\003\uffe3\015\uffe3\033\uffe3\051" +
    "\uffe3\063\uffe3\070\uffe3\001\002\000\016\003\uffe2\015\uffe2" +
    "\033\uffe2\051\uffe2\063\uffe2\070\uffe2\001\002\000\006\015" +
    "\uffe0\070\uffe0\001\002\000\006\015\uffdd\070\uffdd\001\002" +
    "\000\006\015\uffde\070\uffde\001\002\000\006\015\122\070" +
    "\uff6d\001\002\000\004\070\370\001\002\000\042\003\205" +
    "\004\023\005\030\006\027\007\022\010\210\014\216\020" +
    "\025\037\166\047\174\053\170\055\026\056\uff6d\116\167" +
    "\122\175\127\203\001\002\000\004\056\372\001\002\000" +
    "\016\003\uff6d\015\uff6d\033\045\051\043\063\uff6d\070\uff6d" +
    "\001\002\000\016\003\uffe6\015\uffe6\033\uffe6\051\uffe6\063" +
    "\uffe6\070\uffe6\001\002\000\012\015\ufff7\033\ufff7\051\ufff7" +
    "\070\ufff7\001\002\000\016\003\uffe5\015\uffe5\033\uffe5\051" +
    "\uffe5\063\uffe5\070\uffe5\001\002\000\012\015\ufff6\033\ufff6" +
    "\051\ufff6\070\ufff6\001\002\000\010\033\045\051\043\070" +
    "\uff6d\001\002\000\010\033\ufff3\051\ufff3\070\ufff3\001\002" +
    "\000\014\003\150\010\151\033\uff6d\051\uff6d\070\uff6d\001" +
    "\002\000\010\033\ufff4\051\ufff4\070\ufff4\001\002\000\004" +
    "\070\u0104\001\002\000\042\003\205\004\023\005\030\006" +
    "\027\007\022\010\210\014\216\020\025\037\166\047\174" +
    "\053\170\055\026\056\uff6d\116\167\122\175\127\203\001" +
    "\002\000\004\002\000\001\002\000\004\056\u0107\001\002" +
    "\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0105\000\004\007\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\010\013\011\001\001\000\002\001\001\000\006\006" +
    "\377\020\376\001\001\000\010\006\017\014\013\015\016" +
    "\001\001\000\002\001\001\000\016\006\041\016\043\027" +
    "\033\030\034\040\040\041\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\101\023\102" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\017" +
    "\014\032\015\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\152\021\375\022\151" +
    "\001\001\000\010\004\374\006\114\031\116\001\001\000" +
    "\010\006\017\014\373\015\016\001\001\000\006\006\114" +
    "\031\365\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\053\042\056\043\055\100\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\070\044\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\072\001" +
    "\001\000\002\001\001\000\006\006\070\044\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\053\042" +
    "\077\043\055\100\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\100\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\110\005\111" +
    "\006\114\031\116\100\112\001\001\000\004\100\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\363\015\364\032\362\001" +
    "\001\000\002\001\001\000\016\003\360\006\041\027\357" +
    "\030\034\040\040\041\036\001\001\000\006\006\120\035" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\126\036\123\037\125\001\001\000\016\006\041\024" +
    "\146\027\144\030\034\040\040\041\036\001\001\000\002" +
    "\001\001\000\006\006\130\025\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\130\025\133\001\001\000" +
    "\002\001\001\000\004\100\135\001\001\000\006\006\137" +
    "\026\140\001\001\000\006\101\143\102\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\126\036\142" +
    "\037\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\152\021\153\022\151\001\001" +
    "\000\002\001\001\000\016\006\041\024\162\027\144\030" +
    "\034\040\040\041\036\001\001\000\006\006\130\025\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\100\156\001\001\000\006" +
    "\006\137\026\157\001\001\000\002\001\001\000\010\006" +
    "\152\021\161\022\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\006\171\045\211\046\214\047\206\050" +
    "\170\052\203\054\201\056\200\057\177\060\176\065\172" +
    "\066\213\070\212\071\164\072\205\077\175\101\210\102" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\006\171\045\342\046\214\047\206\050\170" +
    "\052\203\054\201\056\200\057\177\060\176\065\172\066" +
    "\213\070\212\071\164\072\205\077\175\101\210\102\030" +
    "\001\001\000\030\006\217\050\323\052\203\054\201\056" +
    "\200\057\177\060\176\072\205\077\175\101\210\102\030" +
    "\001\001\000\002\001\001\000\012\057\322\060\176\101" +
    "\210\102\030\001\001\000\006\006\217\072\321\001\001" +
    "\000\002\001\001\000\010\006\307\055\310\073\313\001" +
    "\001\000\010\006\275\053\273\075\300\001\001\000\030" +
    "\006\217\050\270\052\203\054\201\056\200\057\177\060" +
    "\176\072\205\077\175\101\210\102\030\001\001\000\010" +
    "\006\263\051\261\076\265\001\001\000\002\001\001\000" +
    "\012\057\256\060\176\101\210\102\030\001\001\000\002" +
    "\001\001\000\012\006\234\061\230\064\233\074\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\006\217\050" +
    "\216\052\203\054\201\056\200\057\177\060\176\072\205" +
    "\077\175\101\210\102\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\006\171\045\224\046\214\047\206\050" +
    "\170\052\203\054\201\056\200\057\177\060\176\065\172" +
    "\066\213\070\212\071\164\072\205\077\175\101\210\102" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\041\027\227\030\034\040\040\041\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\217\050\255" +
    "\052\203\054\201\056\200\057\177\060\176\072\205\077" +
    "\175\101\210\102\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\006\244\050\242\052\203" +
    "\054\201\056\200\057\177\060\176\062\243\072\205\077" +
    "\175\101\210\102\030\001\001\000\002\001\001\000\006" +
    "\006\250\063\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\006\217\050\252\052\203\054" +
    "\201\056\200\057\177\060\176\072\205\077\175\101\210" +
    "\102\030\001\001\000\006\006\250\063\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\217\052\266\054\201\056\200\057\177\060" +
    "\176\072\205\077\175\101\210\102\030\001\001\000\010" +
    "\006\263\051\267\076\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\217\054\304\056\200" +
    "\057\177\060\176\072\205\077\175\101\210\102\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\275\053\305\075\300\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\217\056" +
    "\317\057\177\060\176\072\205\077\175\101\210\102\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\307\055\320\073\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\006\171\045\326\046\214" +
    "\047\206\050\170\052\203\054\201\056\200\057\177\060" +
    "\176\065\172\066\213\070\212\071\164\072\205\077\175" +
    "\101\210\102\030\001\001\000\006\006\331\067\330\001" +
    "\001\000\046\006\171\045\333\046\214\047\206\050\170" +
    "\052\203\054\201\056\200\057\177\060\176\065\172\066" +
    "\213\070\212\071\164\072\205\077\175\101\210\102\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\006\171" +
    "\045\336\046\214\047\206\050\170\052\203\054\201\056" +
    "\200\057\177\060\176\065\172\066\213\070\212\071\164" +
    "\072\205\077\175\101\210\102\030\001\001\000\006\006" +
    "\331\067\337\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\006\217\050\347" +
    "\052\203\054\201\056\200\057\177\060\176\072\205\077" +
    "\175\101\210\102\030\001\001\000\002\001\001\000\030" +
    "\006\217\050\351\052\203\054\201\056\200\057\177\060" +
    "\176\072\205\077\175\101\210\102\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\006\171\045\354\046" +
    "\214\047\206\050\170\052\203\054\201\056\200\057\177" +
    "\060\176\065\172\066\213\070\212\071\164\072\205\077" +
    "\175\101\210\102\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\006\120\035\366\001\001\000" +
    "\002\001\001\000\046\006\171\045\370\046\214\047\206" +
    "\050\170\052\203\054\201\056\200\057\177\060\176\065" +
    "\172\066\213\070\212\071\164\072\205\077\175\101\210" +
    "\102\030\001\001\000\002\001\001\000\014\006\041\027" +
    "\372\030\034\040\040\041\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\041\027\u0102\030\034\040\040\041\036\001\001" +
    "\000\002\001\001\000\010\006\152\021\u0101\022\151\001" +
    "\001\000\002\001\001\000\004\012\u0104\001\001\000\046" +
    "\006\171\045\u0105\046\214\047\206\050\170\052\203\054" +
    "\201\056\200\057\177\060\176\065\172\066\213\070\212" +
    "\071\164\072\205\077\175\101\210\102\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado="";
    public static ArrayList<Simbolo> tablaSimbolos = new ArrayList();

    public static boolean inCiclo=false;
    public static ArrayList<String> errores = new ArrayList<>();
    public static ArrayList<String> errSemantic = new ArrayList<>();
    public static ArrayList<String> lista_vars = new ArrayList<>();
    public static ArrayList<String[]> lista_params = new ArrayList<>();
    public static ArrayList<ArrayList<String>> funciones = new ArrayList<>();
    public static String funActual;
    public static String tipoActual;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);


        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), (linea+1)));
        //System.out.println(ScannerABC.errores.size());
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);

        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), linea+1));
     
    }

    //*********************************************************************************************************// 
    //**********************************Funcionalidad de la Tabla de Simbolos**********************************//
    //*********************************************************************************************************// 
    static boolean agregarSimbolo(Object name, Object type, String ambito, String linea){
      for(Simbolo sym:tablaSimbolos){
            if(name.equals(sym.getName()) && ambito.equals(sym.getAmbito())){
                //ScannerABC.errores.add(new ErrorToken((String)sym.getName(),"ERROR_SEMANTICO","Error Semántico: Variable " + sym.getName() + " doblemente declarada. Linea Original: " + sym.getLinea() + " Segunda declaracion: " + (linea+1), linea+1));
                //errSemantic.add("Variable doblemente declarada: "+name+" Variable Vieja: "+sym.getLinea()+"\t Variable Nueva: "+linea);
                return false;
            }
        }
        Simbolo nuevoS = new Simbolo(name, type, ambito, linea);
        tablaSimbolos.add(nuevoS);
        //System.err.println("Simbolo agregado :"+tablaSimbolos.get(tablaSimbolos.size()-1).toString());
        return true;
    }
/*
    static void addListaVar(){
        for(String ss: lista_vars){
            agregarSimbolo(ss,tipoActual,getFunction(),s.current_line());
        }
        lista_vars = new ArrayList<>();
    }
*/
    static void addListaParam(){
        ArrayList<String> funcs = new ArrayList<>();
        funcs.add(funActual);
        for(String[] ss: lista_params){
            funcs.add(ss[0].toString());
            agregarSimbolo(ss[1],ss[0]+" Parametro",ss[3],ss[2]);
        }
        funciones.add(funcs);
        lista_params = new ArrayList<>();
    }

    static boolean useSymbol(Object name){
        for(Simbolo sym:tablaSimbolos){
            String[] func=sym.getType().toString().split(" ");
            if(func[0].equals("Funcion") && name.equals(sym.getName()))
                return true;
            if(sym.getAmbito().equals("Global") && name.equals(sym.getName()))
                return true;
            if(name.equals(sym.getName()) && (getFunction().equals(sym.getAmbito())))
                return true;        
        }
    //ScannerABC.errores.add(new ErrorToken((String)sym.getName(),"ERROR_SEMANTICO","Error Semántico: Variable o Funcion " + name.toString() + " no declarada. Linea: " + (linea+1), linea+1));
    //errSemantic.add("Variable o funcion ->"+name+"<- usada sin ser declarada en "+s.current_line());
    return false;
    }

    static String getFunction(){
        if (funActual != null && !funActual.isEmpty())
            return funActual;
        else
            return "Global";
    }

    static void addPar(Object par, String func){
      // for(ArrayList<> a: funciones){

      // }
      int a=2;

    }
/*
    static void printTablaSimbolos(){
        try {
            String arch = "TablaSimbolos.txt";
            BufferedWriter out = new BufferedWriter(new FileWriter(arch));
            int cont=0;
            for(Simbolo s: tablaSimbolos){
                out.write(cont+"=>"+s.toString());
                out.newLine();
                cont++;
            }
            out.close();
            } 
        catch (IOException ex) {
            Logger.getLogger(Parser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {



  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PR_PROGRAM IDENTIFICADOR SeccionConstantes SeccionVariables Rutinas EntradaPrograma 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la estructura del programa");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // EntradaPrograma ::= PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EntradaPrograma",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SeccionConstantes ::= PR_CONST Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SeccionConstantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantes",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Constantes ::= Constante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Constantes ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constantes",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Constante ::= IDENTIFICADOR O_EQUALS literal O_SEMICOLON Constantes 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Constante ::= error ErrorConstante 
            {
              Object RESULT =null;
		System.out.println("Error");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Constante",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ErrorConstante ::= O_SEMICOLON Constantes 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ErrorConstante ::= PR_VAR Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ErrorConstante ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstante",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SeccionVariables ::= PR_VAR Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SeccionVariables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariables",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Variables ::= Variable 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Variables ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variables",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Variable ::= IDENTIFICADOR Identificadores O_COLON Tipo Inicializar O_SEMICOLON Variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Variable ::= error ErroresVariables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con ErroresVariables Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ErroresVariables ::= O_SEMICOLON Variables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con O_SEMICOLON Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ErroresVariables ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErroresVariables",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Identificadores ::= O_COMMA IDENTIFICADOR Identificadores 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Identificadores ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Identificadores",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Inicializar ::= O_EQUALS literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Inicializar ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Inicializar",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Rutinas ::= Rutina 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Rutinas ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutinas",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Rutina ::= EncabezadoProcedimiento SeccionConstantesFuncion SeccionVariablesFuncion PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Rutina ::= EncabezadoFuncion r 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Rutina",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // r ::= SeccionConstantesFuncion SeccionVariablesFuncion PR_BEGIN Instrucciones PR_END Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // r ::= error rr 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("r",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rr ::= PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rr",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // rr ::= Rutinas 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rr",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SeccionConstantesFuncion ::= PR_CONST ConstantesFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantesFuncion",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SeccionConstantesFuncion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionConstantesFuncion",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ConstantesFuncion ::= Constante 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ConstantesFuncion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ConstantesFuncion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ConstantesFuncion",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ConstanteFuncion ::= IDENTIFICADOR O_EQUALS literal O_SEMICOLON ConstantesFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ConstanteFuncion",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ConstanteFuncion ::= error ErrorConstante 
            {
              Object RESULT =null;
		System.out.println("Error");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ConstanteFuncion",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ErrorConstanteFuncion ::= O_SEMICOLON ConstantesFuncion 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstanteFuncion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ErrorConstanteFuncion ::= PR_VAR VariablesFuncion 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstanteFuncion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ErrorConstanteFuncion ::= Rutinas 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Constantes Recuperado con Rutinas");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ErrorConstanteFuncion",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SeccionVariablesFuncion ::= PR_VAR VariablesFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariablesFuncion",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SeccionVariablesFuncion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("SeccionVariablesFuncion",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VariablesFuncion ::= VariableFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VariablesFuncion",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // VariablesFuncion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VariablesFuncion",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VariableFuncion ::= IDENTIFICADOR Identificadores O_COLON Tipo Inicializar O_SEMICOLON VariablesFuncion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VariableFuncion",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VariableFuncion ::= error ErroresVariables 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico Variable Recuperado con ErroresVariables Variables");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("VariableFuncion",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoProcedimiento",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS O_COLON Tipo 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS error kk 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros2"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("EncabezadoFuncion",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // kk ::= Tipo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("kk",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // kk ::= r 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("kk",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Parametros ::= Parametro 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Parametro ::= Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Parametro ::= Tipo error 
            {
              Object RESULT =null;
		 System.out.println("Error en Parametros recuperado en Parametro"); 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Parametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Parametro",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // masParametros ::= O_COMMA Tipo IDENTIFICADOR masParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // masParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("masParametros",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Instrucciones ::= Instruccion Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Instrucciones ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instrucciones",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expresion ::= Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpresionOperadoresLogicos ::= OperadoresLogicosBinarios Expresion2 ExpresionOperadoresLogicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpresionOperadoresLogicos ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresLogicos",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expresion2 ::= Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion2",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpresionOperadoresComparacion ::= OperadoresComparacion Expresion3 ExpresionOperadoresComparacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExpresionOperadoresComparacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresComparacion",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expresion3 ::= Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion3",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ExpresionOperadoresEnteros ::= OperadoresEnteros Expresion4 ExpresionOperadoresEnteros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ExpresionOperadoresEnteros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionOperadoresEnteros",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expresion4 ::= IncrementoDecremento Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expresion4 ::= OperadoresLogicosUnarios Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expresion4 ::= Expresion5 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion4",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expresion5 ::= Expresion6 IncrementoDecremento 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion5",45, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expresion6 ::= IDENTIFICADOR Expresion7 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expresion6 ::= O_LEFT_PARENTHESIS Expresion error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expresion6 ::= literal 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion6",46, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expresion7 ::= ExpresionAsignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro O_RIGHT_PARENTHESIS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expresion7 ::= O_LEFT_PARENTHESIS LParametro error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix, ) esperado");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Expresion7",47, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExpresionAsignacion ::= OperadorAsignacion Expresion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExpresionAsignacion ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ExpresionAsignacion",50, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // LParametro ::= Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // LParametro ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("LParametro",48, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ListaParametros ::= O_COMMA Expresion ListaParametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ListaParametros ::= O_COMMA error 
            {
              Object RESULT =null;
		System.out.println("Error Sintaxix: Expresion esperada despues de la coma.");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ListaParametros ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",49, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Instruccion ::= InstruccionBE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Instruccion ::= InstruccionSC 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Instruccion",51, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // InstruccionBE ::= IfThenElse 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // InstruccionBE ::= While 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // InstruccionBE ::= For 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // InstruccionBE ::= error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccionbe Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionBE",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // InstruccionSC ::= Expresion O_SEMICOLON 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // InstruccionSC ::= error O_SEMICOLON 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion sc Recuperado con O_SEMICOLON");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("InstruccionSC",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // IfThenElse ::= PR_IF Expresion PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IfThenElse ::= PR_IF Expresion error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END, Espera un PR_THEN");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // IfThenElse ::= PR_IF error PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion IF Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IfThenElse",52, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // rrr ::= PR_THEN Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rrr",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // rrr ::= Instrucciones Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rrr",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // rrr ::= Else PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rrr",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // rrr ::= PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("rrr",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Else ::= PR_ELSE Instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Else ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Else",53, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // While ::= PR_WHILE Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",54, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // While ::= PR_WHILE error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion WHILE Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("While",54, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // For ::= PR_FOR IDENTIFICADOR O_COLON_EQUALS Expresion PR_TO Expresion PR_DO PR_BEGIN Instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // For ::= PR_FOR error PR_END 
            {
              Object RESULT =null;
		System.out.println("Error Sintactico instruccion FOR Recuperado con PR_END");
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("For",55, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IncrementoDecremento ::= O_PLUS_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IncrementoDecremento ::= O_MINUS_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IncrementoDecremento ::= empty 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("IncrementoDecremento",56, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OperadoresEnteros ::= O_PLUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OperadoresEnteros ::= O_MINUS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OperadoresEnteros ::= O_ASTERISK 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OperadoresEnteros ::= O_SLASH 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OperadoresEnteros ::= O_MOD 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OperadoresEnteros ::= O_DIV 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresEnteros",57, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OperadorAsignacion ::= O_COLON_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OperadorAsignacion ::= O_PLUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OperadorAsignacion ::= O_MINUS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OperadorAsignacion ::= O_ASTERISK_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OperadorAsignacion ::= O_SLASH_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadorAsignacion",58, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OperadoresComparacion ::= O_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OperadoresComparacion ::= O_GREATER_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OperadoresComparacion ::= O_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OperadoresComparacion ::= O_LESS_EQUALS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OperadoresComparacion ::= O_LESS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OperadoresComparacion ::= O_LESS_GREATER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresComparacion",59, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OperadoresLogicosBinarios ::= O_OR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OperadoresLogicosBinarios ::= O_AND 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosBinarios",60, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OperadoresLogicosUnarios ::= O_NOT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("OperadoresLogicosUnarios",61, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Tipo ::= PR_BOOLEAN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = "BOOLEAN"; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Tipo ::= PR_INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Tipo ::= PR_CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Tipo ::= PR_LONGINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Tipo ::= PR_SHORTINT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Tipo ::= PR_STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Tipo ::= PR_REAL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.peek()).value;
		 RESULT = t; 
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Tipo",62, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // literal ::= L_INTEGER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // literal ::= L_FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // literal ::= L_STRING 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // literal ::= L_CHAR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // literal ::= Boolean 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // Boolean ::= PR_TRUE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Boolean ::= PR_FALSE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("Boolean",64, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // empty ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("empty",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
