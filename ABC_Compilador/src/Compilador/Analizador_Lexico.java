/* The following code was generated by JFlex 1.6.1 */

/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package Compilador;
import java_cup.runtime.*;
import java.util.ArrayList;

/*------------  2da Area: Opciones y Declaraciones ---------*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/ayma-93/Documents/Semestre II - 2018/Compiladores e Interpretes/Compilador/Parser/ParserCompi-IIS2018/ABC_Compilador/src/Compilador/Analizador_Lexico.flex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  4, 15, 16,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3,  0,  9, 23,  0,  0,  0,  8, 17, 19, 18, 22, 60,  6,  7, 14, 
    13, 13, 13, 13, 12, 12, 12, 12,  2,  2, 59, 58, 57, 56, 55,  0, 
     0, 36, 52, 45, 46,  5, 50, 44, 33, 30,  1, 49, 34, 47, 38, 25, 
    41,  1, 26, 43, 31, 37, 35, 28, 24, 40,  1, 54, 10, 53,  0,  1, 
     0, 36, 11, 45, 46,  5, 51, 44, 33, 30,  1, 49, 34, 47, 39, 25, 
    41,  1, 27, 43, 32, 37, 35, 28, 24, 40,  1, 20,  0, 21,  0,  0, 
     0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\1\5\1\6"+
    "\2\1\1\2\1\7\1\10\1\11\1\12\1\13\1\1"+
    "\1\14\1\1\4\2\1\1\10\2\1\1\6\2\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\2\1\27\1\30\1\26\3\0\1\31\1\0"+
    "\3\2\1\4\1\32\1\0\1\33\1\0\1\4\1\34"+
    "\1\35\1\36\1\2\1\37\1\40\2\2\1\0\2\2"+
    "\1\41\1\42\1\41\1\42\1\43\12\2\1\0\3\2"+
    "\3\0\7\2\1\44\1\0\3\2\1\0\4\2\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\26\1\53\1\0"+
    "\1\2\1\54\1\36\2\0\3\2\2\0\1\55\3\2"+
    "\1\0\1\2\1\0\1\2\1\0\1\2\1\56\1\0"+
    "\1\56\6\2\1\57\1\2\1\60\1\2\1\61\2\62"+
    "\2\2\1\63\2\0\1\63\5\2\1\0\2\2\2\64"+
    "\1\65\1\66\1\0\4\2\1\67\1\70\1\26\2\71"+
    "\1\0\2\2\1\72\1\4\1\73\1\74\2\2\1\0"+
    "\1\2\2\75\1\0\1\2\1\0\1\2\1\76\1\77"+
    "\1\100\3\2\1\0\3\2\1\0\1\2\2\0\2\2"+
    "\1\101\1\0\1\2\1\102\2\103\2\2\2\104\1\2"+
    "\1\0\2\2\1\53\1\0\2\105\3\2\2\106\2\107"+
    "\1\0\1\2\1\0\1\2\1\110\1\111\2\112\2\2"+
    "\1\0\1\2\2\0\2\2\2\113\2\2\1\114\2\115"+
    "\1\2\1\53\1\2\1\116\1\117\2\120\1\0\3\2"+
    "\2\121\1\122\1\0\1\122\1\2\1\123\1\2\1\0"+
    "\1\2\1\124\2\125\1\126\1\2\1\0\1\2\1\127"+
    "\1\0\2\2\2\130\2\131\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\75\0\364\0\u0131\0\u016e"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\75\0\u029f\0\u02dc\0\75"+
    "\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4"+
    "\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\75"+
    "\0\75\0\u0894\0\75\0\u08d1\0\75\0\u090e\0\75\0\u094b"+
    "\0\u0988\0\u09c5\0\u0a02\0\75\0\75\0\u016e\0\u0a3f\0\u0a7c"+
    "\0\u01e8\0\75\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\75"+
    "\0\u0bea\0\75\0\u0319\0\u0319\0\75\0\75\0\u0393\0\u0c27"+
    "\0\172\0\172\0\u0c64\0\u0ca1\0\u0cde\0\u0d1b\0\u0d58\0\u0d95"+
    "\0\75\0\u0dd2\0\172\0\172\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6"+
    "\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296"+
    "\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\75"+
    "\0\75\0\75\0\u1666\0\75\0\u16a3\0\u16e0\0\u171d\0\u175a"+
    "\0\172\0\75\0\u1797\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8"+
    "\0\u1905\0\172\0\u1942\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73"+
    "\0\u1ab0\0\u1aed\0\u1b2a\0\75\0\u1b67\0\172\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\172\0\u1d12\0\172\0\u1d4f"+
    "\0\172\0\75\0\172\0\u1d8c\0\u1dc9\0\75\0\u1e06\0\u1e43"+
    "\0\172\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\u1fee"+
    "\0\u202b\0\75\0\172\0\172\0\u2068\0\u20a5\0\u20e2\0\u211f"+
    "\0\u215c\0\u2199\0\75\0\75\0\u21d6\0\75\0\172\0\u2213"+
    "\0\u2250\0\u228d\0\172\0\u0bea\0\172\0\172\0\u22ca\0\u2307"+
    "\0\u2344\0\u2381\0\75\0\172\0\u23be\0\u23fb\0\u2438\0\u2475"+
    "\0\172\0\172\0\172\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6"+
    "\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e"+
    "\0\172\0\u27cb\0\u2808\0\172\0\75\0\172\0\u2845\0\u2882"+
    "\0\75\0\172\0\u28bf\0\u28fc\0\u2939\0\u2976\0\u29b3\0\u29f0"+
    "\0\75\0\172\0\u2a2d\0\u2a6a\0\u2aa7\0\75\0\172\0\75"+
    "\0\172\0\u2ae4\0\u2b21\0\u2b5e\0\u2b9b\0\172\0\172\0\75"+
    "\0\172\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09\0\u2d46"+
    "\0\u2d83\0\75\0\172\0\u2dc0\0\u2dfd\0\172\0\75\0\172"+
    "\0\u2e3a\0\u29f0\0\u2e77\0\172\0\172\0\75\0\172\0\u2eb4"+
    "\0\u2ef1\0\u2f2e\0\u2f6b\0\75\0\172\0\75\0\u2fa8\0\172"+
    "\0\u2fe5\0\172\0\u3022\0\u305f\0\u309c\0\172\0\75\0\172"+
    "\0\172\0\u30d9\0\u3116\0\u3153\0\172\0\u3190\0\u31cd\0\u320a"+
    "\0\75\0\172\0\75\0\172\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\2\1\13\2\4\1\14\1\0\1\15\1\16"+
    "\1\17\1\20\1\21\1\2\1\22\1\23\1\24\1\25"+
    "\2\26\1\27\1\30\1\31\2\32\1\3\1\33\1\34"+
    "\1\35\1\36\2\37\1\3\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\2\1\3\2\47\1\13\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\76\0"+
    "\2\3\2\0\1\3\5\0\3\3\12\0\5\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\11\0\1\60\1\4"+
    "\2\0\1\60\1\0\1\61\3\0\1\60\2\4\12\0"+
    "\5\60\1\0\14\60\1\0\5\60\1\0\4\60\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\12\0\5\3\1\0"+
    "\4\3\1\62\3\3\2\63\2\3\1\0\5\3\1\0"+
    "\4\3\16\0\1\64\61\0\1\65\6\0\1\66\11\0"+
    "\2\66\57\0\4\67\1\0\3\67\1\0\1\67\1\70"+
    "\62\67\11\71\1\72\1\73\62\71\1\0\2\3\2\0"+
    "\1\74\5\0\3\3\12\0\1\3\1\75\3\3\1\0"+
    "\12\3\1\76\1\3\1\0\5\3\1\0\4\3\26\0"+
    "\1\77\51\0\1\100\26\0\1\101\142\0\1\102\4\0"+
    "\25\103\1\104\47\103\26\0\1\105\41\0\1\106\6\0"+
    "\1\107\11\0\2\107\60\0\2\3\2\0\1\3\5\0"+
    "\3\3\12\0\1\3\1\110\3\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\11\0\2\3\2\0\1\3\5\0"+
    "\3\3\12\0\2\3\2\111\1\3\1\0\14\3\1\0"+
    "\5\3\1\0\1\3\2\112\1\3\11\0\2\3\2\0"+
    "\1\113\5\0\3\3\12\0\5\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\11\0\2\3\2\0\1\3\5\0"+
    "\3\3\12\0\2\3\2\114\1\3\1\115\1\116\2\3"+
    "\1\117\10\3\1\0\5\3\1\0\4\3\56\0\2\120"+
    "\12\0\2\121\12\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\10\3\2\122\2\3\1\0\5\3"+
    "\1\0\1\3\2\123\1\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\1\3\1\124\2\125\1\3\1\0"+
    "\3\3\1\126\6\3\1\127\1\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\1\3\1\130\3\3\1\0\6\3\1\131\5\3\1\0"+
    "\5\3\1\0\4\3\11\0\2\3\2\0\1\3\5\0"+
    "\3\3\12\0\5\3\1\0\6\3\1\132\5\3\1\0"+
    "\5\3\1\0\4\3\11\0\2\3\2\0\1\3\5\0"+
    "\3\3\12\0\2\3\2\133\1\3\1\0\10\3\2\134"+
    "\2\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\12\0\5\3\1\0\10\3\2\135"+
    "\2\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\12\0\1\3\1\136\3\3\1\137"+
    "\1\140\13\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\2\3\2\141\1\3"+
    "\1\0\6\3\1\142\5\3\1\0\5\3\1\0\4\3"+
    "\15\0\1\143\31\0\2\144\1\145\34\0\2\3\2\0"+
    "\1\146\5\0\3\3\12\0\5\3\1\0\1\3\2\147"+
    "\1\150\10\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\1\3\1\151\3\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\1\3\1\152\3\3"+
    "\1\0\3\3\1\153\2\3\1\154\5\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\1\3\1\155\3\3\1\156\1\157\13\3\1\0"+
    "\5\3\1\0\4\3\11\0\2\3\2\0\1\3\5\0"+
    "\3\3\12\0\1\3\1\160\3\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\11\0\2\3\2\0\1\3\5\0"+
    "\3\3\12\0\1\3\1\161\3\3\1\162\1\163\3\3"+
    "\1\164\1\3\1\165\1\166\4\3\1\0\5\3\1\0"+
    "\4\3\77\0\1\167\1\170\73\0\1\171\1\172\1\173"+
    "\73\0\1\174\5\0\2\60\2\0\1\60\1\0\1\175"+
    "\3\0\3\60\12\0\5\60\1\0\14\60\1\0\5\60"+
    "\1\0\4\60\11\0\1\175\1\176\2\0\1\175\5\0"+
    "\1\175\2\176\12\0\5\175\1\0\14\175\1\0\5\175"+
    "\1\0\4\175\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\14\3\1\177\1\200\4\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\5\3\1\0\14\3\1\0\3\3\1\201\1\3\1\0"+
    "\4\3\20\0\1\202\74\0\4\67\1\203\1\204\15\0"+
    "\1\67\4\0\1\67\6\0\1\67\13\0\1\67\21\0"+
    "\6\71\15\0\1\71\4\0\1\71\6\0\1\71\13\0"+
    "\1\71\12\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\5\3\1\0\14\3\1\0\1\3\1\205\3\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\1\3\1\206\3\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\5\3\1\0\1\3\2\207\11\3\1\0\5\3\1\0"+
    "\4\3\10\0\4\77\1\0\12\77\2\0\54\77\12\101"+
    "\1\210\7\101\1\211\52\101\1\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\2\3\2\212\1\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\6\3\1\213\4\3"+
    "\1\214\1\0\2\3\1\215\2\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\12\0\5\3\1\216"+
    "\1\217\13\3\1\0\5\3\1\0\4\3\47\0\2\220"+
    "\35\0\2\3\2\0\1\3\5\0\3\3\12\0\5\3"+
    "\1\0\1\3\2\221\11\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\12\0\5\3"+
    "\1\222\1\223\13\3\1\0\5\3\1\0\4\3\47\0"+
    "\2\224\1\0\1\225\33\0\2\3\2\0\1\3\5\0"+
    "\3\3\12\0\5\3\1\0\1\3\2\226\1\3\1\227"+
    "\7\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\12\0\5\3\1\0\7\3\1\230"+
    "\4\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\231\5\0\3\3\12\0\5\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\11\0\2\3\2\0\1\3\5\0"+
    "\3\3\12\0\5\3\1\0\13\3\1\232\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\10\3\2\233\2\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\1\234"+
    "\2\3\12\0\5\3\1\0\14\3\1\0\5\3\1\0"+
    "\3\3\1\234\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\2\3\2\235\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\2\3\2\236\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\14\3\1\0\3\3\1\237\1\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\1\3\2\240\11\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\1\3\2\241\11\3\1\0\5\3"+
    "\1\0\4\3\52\0\1\242\33\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\4\3\1\243\7\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\1\3\1\244\3\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\14\3\1\0\2\3"+
    "\1\245\2\3\1\0\4\3\47\0\2\246\66\0\2\247"+
    "\72\0\1\250\44\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\1\3\2\251\11\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\2\3\2\252\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\1\3\1\253\3\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\1\3\2\254\11\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\10\3\2\255\2\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\6\3\1\256\5\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\14\3\1\257\1\260\4\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\4\3\1\261\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\53\0\1\262\32\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\5\3\1\263\6\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\14\3\1\0\3\3\1\264\1\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\2\3\2\265\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\52\0\1\266\33\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\4\3\1\267\7\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\1\3\1\270\3\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\4\3\1\271\7\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\10\3\2\272\2\3"+
    "\1\0\5\3\1\0\4\3\100\0\1\273\74\0\1\274"+
    "\5\0\2\175\2\0\1\175\5\0\3\175\12\0\5\175"+
    "\1\0\14\175\1\0\5\175\1\0\4\175\11\0\1\175"+
    "\1\176\2\0\1\275\5\0\1\175\2\176\12\0\5\175"+
    "\1\0\14\175\1\0\5\175\1\0\4\175\15\0\1\276"+
    "\70\0\2\3\2\0\1\277\5\0\3\3\12\0\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\20\0\1\202"+
    "\3\0\2\67\67\0\1\202\3\0\2\203\60\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\5\3\1\300\1\301"+
    "\13\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\12\0\5\3\1\0\4\3\1\302"+
    "\7\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\303\5\0\3\3\12\0\5\3\1\0\14\3\1\0"+
    "\5\3\1\0\4\3\20\0\6\101\15\0\1\101\4\0"+
    "\1\101\6\0\1\101\13\0\1\101\11\0\12\101\1\210"+
    "\7\101\1\211\1\304\51\101\1\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\4\3\1\305\7\3"+
    "\1\0\3\3\1\306\1\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\307\5\0\3\3\12\0\5\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\1\3\1\310\3\3\1\0\14\3"+
    "\1\0\5\3\1\0\4\3\47\0\2\311\35\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\5\3\1\0\1\3"+
    "\2\312\11\3\1\0\5\3\1\0\4\3\51\0\1\313"+
    "\34\0\2\3\2\0\1\3\5\0\3\3\12\0\5\3"+
    "\1\0\3\3\1\314\10\3\1\0\5\3\1\0\4\3"+
    "\52\0\1\315\33\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\4\3\1\316\7\3\1\0\5\3"+
    "\1\0\4\3\45\0\2\317\37\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\317\1\320\13\3\1\0"+
    "\5\3\1\0\4\3\11\0\2\3\2\0\1\321\5\0"+
    "\3\3\12\0\5\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\5\3\1\0\10\3\2\322\2\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\323\5\0\3\3\12\0"+
    "\5\3\1\0\14\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\12\0\5\3\1\0"+
    "\14\3\1\0\1\3\1\324\3\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\325\5\0\3\3\12\0\5\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\12\0\5\3\1\0\6\3\1\326"+
    "\5\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\12\0\5\3\1\327\1\330\13\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\14\3\1\0\1\3"+
    "\1\331\1\332\2\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\12\0\5\3\1\0\14\3\1\0"+
    "\5\3\1\333\1\334\3\3\45\0\2\335\70\0\2\336"+
    "\42\0\2\3\2\0\1\3\5\0\3\3\12\0\5\3"+
    "\1\335\1\337\13\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\12\0\2\3\2\340"+
    "\1\3\1\0\14\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\12\0\1\3\1\341"+
    "\3\3\1\0\14\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\12\0\5\3\1\0"+
    "\14\3\1\342\1\343\4\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\2\3\2\344\1\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\15\0\1\345"+
    "\70\0\2\3\2\0\1\346\5\0\3\3\12\0\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\5\3\1\0\10\3"+
    "\2\347\2\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\4\3\1\350\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\15\0\1\351\70\0"+
    "\2\3\2\0\1\352\5\0\3\3\12\0\5\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\12\0\5\3\1\0\6\3\1\353"+
    "\5\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\12\0\5\3\1\0\14\3\1\354"+
    "\1\355\4\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\14\3\1\0\2\3"+
    "\1\356\2\3\1\0\4\3\11\0\1\175\1\357\2\0"+
    "\1\175\1\360\4\0\1\175\2\357\10\0\1\360\1\0"+
    "\5\175\1\0\14\175\1\0\5\175\1\0\4\175\56\0"+
    "\2\361\26\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\5\3\1\0\10\3\2\362\2\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\363\5\0\3\3\12\0"+
    "\5\3\1\0\14\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\12\0\5\3\1\0"+
    "\6\3\1\364\5\3\1\0\5\3\1\0\4\3\11\0"+
    "\2\3\2\0\1\3\5\0\3\3\12\0\2\3\2\365"+
    "\1\3\1\0\14\3\1\0\5\3\1\0\4\3\15\0"+
    "\1\366\70\0\2\3\2\0\1\367\5\0\3\3\12\0"+
    "\5\3\1\0\14\3\1\0\5\3\1\0\4\3\15\0"+
    "\1\370\70\0\2\3\2\0\1\371\5\0\3\3\12\0"+
    "\5\3\1\0\14\3\1\0\5\3\1\0\4\3\56\0"+
    "\2\372\26\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\5\3\1\0\10\3\2\373\2\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\5\3\1\374\1\375\13\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\12\0\5\3"+
    "\1\0\4\3\1\376\7\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\12\0\5\3"+
    "\1\0\12\3\1\377\1\3\1\0\5\3\1\0\4\3"+
    "\52\0\1\u0100\33\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\4\3\1\u0101\7\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\2\3\2\u0102\1\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\u0103\5\0\3\3"+
    "\12\0\5\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\15\0\1\u0104\70\0\2\3\2\0\1\u0105\5\0\3\3"+
    "\12\0\5\3\1\0\14\3\1\0\5\3\1\0\4\3"+
    "\56\0\2\u0106\64\0\2\u0107\35\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\10\3\2\u0108\2\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\1\3\2\u0109\11\3"+
    "\1\0\5\3\1\0\4\3\47\0\2\u010a\35\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\5\3\1\0\1\3"+
    "\2\u010b\11\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\5\3\1\0\1\3"+
    "\2\u010c\11\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\5\3\1\0\6\3"+
    "\1\u010d\5\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\5\3\1\0\1\3"+
    "\2\u010e\11\3\1\0\5\3\1\0\4\3\15\0\1\u010f"+
    "\70\0\2\3\2\0\1\u0110\5\0\3\3\12\0\5\3"+
    "\1\0\14\3\1\0\5\3\1\0\4\3\11\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\5\3\1\0\1\3"+
    "\2\u0111\11\3\1\0\5\3\1\0\4\3\11\0\1\175"+
    "\1\357\2\0\1\175\5\0\1\175\2\357\12\0\5\175"+
    "\1\0\14\175\1\0\5\175\1\0\4\175\12\0\1\u0112"+
    "\11\0\2\u0112\60\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\6\3\1\u0113\5\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\1\3\2\u0114\11\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\14\3\1\0\3\3\1\u0115\1\3"+
    "\1\0\4\3\15\0\1\u0116\70\0\2\3\2\0\1\u0117"+
    "\5\0\3\3\12\0\5\3\1\0\14\3\1\0\5\3"+
    "\1\0\4\3\56\0\2\u0118\26\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\10\3\2\u0119\2\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\6\3\1\u011a\5\3"+
    "\1\0\5\3\1\0\4\3\11\0\2\3\2\0\1\3"+
    "\5\0\3\3\12\0\5\3\1\0\14\3\1\0\3\3"+
    "\1\u011b\1\3\1\0\4\3\66\0\1\u011c\17\0\2\3"+
    "\2\0\1\3\5\0\3\3\12\0\5\3\1\0\14\3"+
    "\1\0\3\3\1\u011d\1\3\1\0\4\3\64\0\1\u011e"+
    "\55\0\2\u011f\37\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\14\3\1\0\1\3\1\u0120\3\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\u011f\1\u0121\13\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\1\3\1\u0122\3\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\2\3\2\u0123\1\3\1\0\14\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\5\3\1\u0124\1\u0125\13\3\1\0\5\3\1\0\4\3"+
    "\11\0\2\3\2\0\1\3\5\0\3\3\12\0\5\3"+
    "\1\0\10\3\2\u0126\2\3\1\0\5\3\1\0\4\3"+
    "\47\0\2\u0127\35\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\1\3\2\u0128\11\3\1\0\5\3"+
    "\1\0\4\3\11\0\2\3\2\0\1\3\5\0\3\3"+
    "\12\0\5\3\1\0\14\3\1\0\4\3\1\u0129\1\0"+
    "\4\3\11\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\5\3\1\0\7\3\1\u012a\4\3\1\0\5\3\1\0"+
    "\4\3\56\0\2\u012b\26\0\2\3\2\0\1\3\5\0"+
    "\3\3\12\0\5\3\1\0\10\3\2\u012c\2\3\1\0"+
    "\5\3\1\0\4\3\11\0\2\3\2\0\1\3\5\0"+
    "\3\3\12\0\5\3\1\0\14\3\1\0\3\3\1\u012d"+
    "\1\3\1\0\4\3\41\0\1\u012e\44\0\2\3\2\0"+
    "\1\3\5\0\3\3\12\0\1\3\1\u012f\3\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\11\0\2\3\2\0"+
    "\1\3\5\0\3\3\12\0\2\3\2\u0130\1\3\1\0"+
    "\14\3\1\0\5\3\1\0\4\3\47\0\2\u0131\35\0"+
    "\2\3\2\0\1\3\5\0\3\3\12\0\5\3\1\0"+
    "\1\3\2\u0132\11\3\1\0\5\3\1\0\4\3\56\0"+
    "\2\u0133\26\0\2\3\2\0\1\3\5\0\3\3\12\0"+
    "\5\3\1\0\10\3\2\u0134\2\3\1\0\5\3\1\0"+
    "\4\3\11\0\2\3\2\0\1\u0135\5\0\3\3\12\0"+
    "\5\3\1\0\14\3\1\0\5\3\1\0\4\3\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12871];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\7\1\1\11\2\1\1\11"+
    "\27\1\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\4\1\2\11\1\1\3\0\1\11\1\0\4\1\1\11"+
    "\1\0\1\11\1\0\1\1\2\11\6\1\1\0\3\1"+
    "\1\11\15\1\1\0\3\1\3\0\10\1\1\0\3\1"+
    "\1\0\5\1\3\11\1\1\1\11\2\1\1\0\2\1"+
    "\1\11\2\0\3\1\2\0\4\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\11\1\0\14\1\1\11\3\1"+
    "\1\11\2\0\6\1\1\0\2\1\1\11\3\1\1\0"+
    "\4\1\2\11\1\1\1\11\1\1\1\0\10\1\1\0"+
    "\1\1\1\11\1\1\1\0\1\1\1\0\7\1\1\0"+
    "\3\1\1\0\1\1\2\0\3\1\1\0\2\1\1\11"+
    "\3\1\1\11\2\1\1\0\3\1\1\0\1\11\4\1"+
    "\1\11\1\1\1\11\1\1\1\0\1\1\1\0\3\1"+
    "\1\11\3\1\1\0\1\1\2\0\2\1\1\11\4\1"+
    "\1\11\6\1\1\11\1\1\1\0\3\1\1\11\1\1"+
    "\1\11\1\0\4\1\1\0\2\1\1\11\3\1\1\0"+
    "\2\1\1\0\2\1\1\11\1\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[309];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    //----> Codigo de usuario en sintaxis java
    //public static LinkedList<TError> TablaEL = new LinkedList<TError>(); 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { ScannerABC.errores.add(new ErrorToken(yytext(),"ERROR_INVALID_SYMBOL","Error Léxico: Símbolo " + yytext() + " no reconocido. Linea: " + yyline + ".", yyline));
            }
          case 91: break;
          case 2: 
            { ScannerABC.agregarToken(yytext(),Token.IDENTIFICADOR,yyline+1);
                        ScannerABC.nombreTokens.add(yytext());
                        return new Symbol(sym.IDENTIFICADOR, yycolumn, yyline+1, yytext());
            }
          case 92: break;
          case 3: 
            { ScannerABC.agregarToken(yytext(),Token.L_INTEGER,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.L_INTEGER, yycolumn, yyline, yytext());
            }
          case 93: break;
          case 4: 
            { /*Ignore*/
            }
          case 94: break;
          case 5: 
            { ScannerABC.agregarToken(yytext(),Token.O_MINUS,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_MINUS, yycolumn, yyline, yytext());
            }
          case 95: break;
          case 6: 
            { ScannerABC.agregarToken(yytext(),Token.O_FULL_STOP,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_FULL_STOP, yycolumn, yyline, yytext());
            }
          case 96: break;
          case 7: 
            { ScannerABC.agregarToken(yytext(),Token.O_SLASH,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_SLASH, yycolumn, yyline, yytext());
            }
          case 97: break;
          case 8: 
            { /* Espacios en blanco, se ignoran */
            }
          case 98: break;
          case 9: 
            { ScannerABC.agregarToken(yytext(),Token.O_LEFT_PARENTHESIS,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_LEFT_PARENTHESIS, yycolumn, yyline, yytext());
            }
          case 99: break;
          case 10: 
            { ScannerABC.agregarToken(yytext(),Token.O_ASTERISK,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_ASTERISK, yycolumn, yyline, yytext());
            }
          case 100: break;
          case 11: 
            { ScannerABC.agregarToken(yytext(),Token.O_RIGHT_PARENTHESIS,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_RIGHT_PARENTHESIS, yycolumn, yyline, yytext());
            }
          case 101: break;
          case 12: 
            { ScannerABC.agregarToken(yytext(),Token.O_PLUS,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_PLUS, yycolumn, yyline, yytext());
            }
          case 102: break;
          case 13: 
            { ScannerABC.agregarToken(yytext(),Token.O_RIGHT_SQUARE_BRACKET,(yyline+1));
                ScannerABC.nombreTokens.add(yytext());
                return new Symbol(sym.O_RIGHT_SQUARE_BRACKET, yycolumn, yyline, yytext());
            }
          case 103: break;
          case 14: 
            { ScannerABC.agregarToken(yytext(),Token.O_LEFT_SQUARE_BRACKET,(yyline+1));
                ScannerABC.nombreTokens.add(yytext());
                return new Symbol(sym.O_LEFT_SQUARE_BRACKET, yycolumn, yyline, yytext());
            }
          case 104: break;
          case 15: 
            { ScannerABC.agregarToken(yytext(),Token.O_GREATER,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_GREATER, yycolumn, yyline, yytext());
            }
          case 105: break;
          case 16: 
            { ScannerABC.agregarToken(yytext(),Token.O_EQUALS,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_EQUALS, yycolumn, yyline, yytext());
            }
          case 106: break;
          case 17: 
            { ScannerABC.agregarToken(yytext(),Token.O_LESS,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_LESS, yycolumn, yyline, yytext());
            }
          case 107: break;
          case 18: 
            { ScannerABC.agregarToken(yytext(),Token.O_SEMICOLON,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_SEMICOLON, yycolumn, yyline, yytext());
            }
          case 108: break;
          case 19: 
            { ScannerABC.agregarToken(yytext(),Token.O_COLON,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_COLON, yycolumn, yyline, yytext());
            }
          case 109: break;
          case 20: 
            { ScannerABC.agregarToken(yytext(),Token.O_COMMA,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_COMMA, yycolumn, yyline, yytext());
            }
          case 110: break;
          case 21: 
            { ScannerABC.errores.add(new ErrorToken(yytext(),"ERROR_INTEGER","Error Léxico: Número entero " + yytext() + " inválido. Linea: " + yyline + ".", yyline));
            }
          case 111: break;
          case 22: 
            { ScannerABC.errores.add(new ErrorToken(yytext(),"ERROR_FLOAT","Error Léxico: Número decimal " + yytext() + " inválido. Linea: " + yyline + ".", yyline));
            }
          case 112: break;
          case 23: 
            { ScannerABC.agregarToken(yytext(),Token.O_MINUS_MINUS,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_MINUS_MINUS, yycolumn, yyline, yytext());
            }
          case 113: break;
          case 24: 
            { ScannerABC.agregarToken(yytext(),Token.O_MINUS_EQUALS,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_MINUS_EQUALS, yycolumn, yyline, yytext());
            }
          case 114: break;
          case 25: 
            { return new Symbol(sym.L_STRING, yycolumn, yyline, yytext());
            }
          case 115: break;
          case 26: 
            { ScannerABC.agregarToken(yytext(),Token.O_SLASH_EQUALS,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_SLASH_EQUALS, yycolumn, yyline, yytext());
            }
          case 116: break;
          case 27: 
            { ScannerABC.agregarToken(yytext(),Token.O_ASTERISK_EQUALS,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_ASTERISK_EQUALS, yycolumn, yyline, yytext());
            }
          case 117: break;
          case 28: 
            { ScannerABC.agregarToken(yytext(),Token.O_PLUS_PLUS,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_PLUS_PLUS, yycolumn, yyline, yytext());
            }
          case 118: break;
          case 29: 
            { ScannerABC.agregarToken(yytext(),Token.O_PLUS_EQUALS,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_PLUS_EQUALS, yycolumn, yyline, yytext());
            }
          case 119: break;
          case 30: 
            { return new Symbol(sym.L_CHAR, yycolumn, yyline, yytext());
            }
          case 120: break;
          case 31: 
            { ScannerABC.agregarToken(yytext(),Token.O_OR,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_OR, yycolumn, yyline, yytext());
            }
          case 121: break;
          case 32: 
            { ScannerABC.agregarToken(yytext(),Token.PR_OF,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_OF, yycolumn, yyline, yytext());
            }
          case 122: break;
          case 33: 
            { ScannerABC.agregarToken(yytext(),Token.PR_IN,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_IN, yycolumn, yyline, yytext());
            }
          case 123: break;
          case 34: 
            { ScannerABC.agregarToken(yytext(),Token.PR_IF,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_IF, yycolumn, yyline, yytext());
            }
          case 124: break;
          case 35: 
            { ScannerABC.agregarToken(yytext(),Token.PR_TO,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_TO, yycolumn, yyline, yytext());
            }
          case 125: break;
          case 36: 
            { ScannerABC.agregarToken(yytext(),Token.PR_DO,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_DO, yycolumn, yyline, yytext());
            }
          case 126: break;
          case 37: 
            { ScannerABC.agregarToken(yytext(),Token.O_GREATER_GREATER,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_GREATER_GREATER, yycolumn, yyline, yytext());
            }
          case 127: break;
          case 38: 
            { ScannerABC.agregarToken(yytext(),Token.O_GREATER_EQUALS,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_GREATER_EQUALS, yycolumn, yyline, yytext());
            }
          case 128: break;
          case 39: 
            { ScannerABC.agregarToken(yytext(),Token.O_LESS_GREATER,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_LESS_GREATER, yycolumn, yyline, yytext());
            }
          case 129: break;
          case 40: 
            { ScannerABC.agregarToken(yytext(),Token.O_LESS_EQUALS,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_LESS_EQUALS, yycolumn, yyline, yytext());
            }
          case 130: break;
          case 41: 
            { ScannerABC.agregarToken(yytext(),Token.O_LESS_LESS,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_LESS_LESS, yycolumn, yyline, yytext());
            }
          case 131: break;
          case 42: 
            { ScannerABC.agregarToken(yytext(),Token.O_COLON_EQUALS,yyline+1);
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_COLON_EQUALS, yycolumn, yyline, yytext());
            }
          case 132: break;
          case 43: 
            { return new Symbol(sym.L_FLOAT, yycolumn, yyline, yytext());
            }
          case 133: break;
          case 44: 
            { ScannerABC.agregarToken(yytext(),Token.PR_END,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_END, yycolumn, yyline, yytext());
            }
          case 134: break;
          case 45: 
            { ScannerABC.agregarToken(yytext(),Token.O_XOR,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_XOR, yycolumn, yyline, yytext());
            }
          case 135: break;
          case 46: 
            { ScannerABC.agregarToken(yytext(),Token.PR_INT,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_INT, yycolumn, yyline, yytext());
            }
          case 136: break;
          case 47: 
            { ScannerABC.agregarToken(yytext(),Token.PR_VAR,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_VAR, yycolumn, yyline, yytext());
            }
          case 137: break;
          case 48: 
            { ScannerABC.agregarToken(yytext(),Token.O_AND,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_AND, yycolumn, yyline, yytext());
            }
          case 138: break;
          case 49: 
            { ScannerABC.agregarToken(yytext(),Token.O_NOT,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_NOT, yycolumn, yyline, yytext());
            }
          case 139: break;
          case 50: 
            { ScannerABC.agregarToken(yytext(),Token.PR_NIL,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_NIL, yycolumn, yyline, yytext());
            }
          case 140: break;
          case 51: 
            { ScannerABC.agregarToken(yytext(),Token.PR_SET,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_SET, yycolumn, yyline, yytext());
            }
          case 141: break;
          case 52: 
            { ScannerABC.agregarToken(yytext(),Token.O_DIV,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_DIV, yycolumn, yyline, yytext());
            }
          case 142: break;
          case 53: 
            { ScannerABC.agregarToken(yytext(),Token.O_MOD,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_MOD, yycolumn, yyline, yytext());
            }
          case 143: break;
          case 54: 
            { ScannerABC.agregarToken(yytext(),Token.PR_FOR,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_FOR, yycolumn, yyline, yytext());
            }
          case 144: break;
          case 55: 
            { ScannerABC.agregarToken(yytext(),Token.O_GREATER_GREATER_EQUALS,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_GREATER_GREATER_EQUALS, yycolumn, yyline, yytext());
            }
          case 145: break;
          case 56: 
            { ScannerABC.agregarToken(yytext(),Token.O_LESS_LESS_EQUALS,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.O_LESS_LESS_EQUALS, yycolumn, yyline, yytext());
            }
          case 146: break;
          case 57: 
            { ScannerABC.agregarToken(yytext(),Token.PR_ELSE,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_ELSE, yycolumn, yyline, yytext());
            }
          case 147: break;
          case 58: 
            { ScannerABC.agregarToken(yytext(),Token.PR_BYTE,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_BYTE, yycolumn, yyline, yytext());
            }
          case 148: break;
          case 59: 
            { ScannerABC.agregarToken(yytext(),Token.PR_REAL,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_REAL, yycolumn, yyline, yytext());
            }
          case 149: break;
          case 60: 
            { ScannerABC.agregarToken(yytext(),Token.PR_READ,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_READ, yycolumn, yyline, yytext());
            }
          case 150: break;
          case 61: 
            { ScannerABC.agregarToken(yytext(),Token.PR_WITH,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_WITH, yycolumn, yyline, yytext());
            }
          case 151: break;
          case 62: 
            { ScannerABC.agregarToken(yytext(),Token.PR_TRUE,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_TRUE, yycolumn, yyline, yytext());
            }
          case 152: break;
          case 63: 
            { ScannerABC.agregarToken(yytext(),Token.PR_THEN,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_THEN, yycolumn, yyline, yytext());
            }
          case 153: break;
          case 64: 
            { ScannerABC.agregarToken(yytext(),Token.PR_TYPE,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_TYPE, yycolumn, yyline, yytext());
            }
          case 154: break;
          case 65: 
            { ScannerABC.agregarToken(yytext(),Token.PR_GOTO,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_GOTO, yycolumn, yyline, yytext());
            }
          case 155: break;
          case 66: 
            { ScannerABC.agregarToken(yytext(),Token.PR_CHAR,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_CHAR, yycolumn, yyline, yytext());
            }
          case 156: break;
          case 67: 
            { ScannerABC.agregarToken(yytext(),Token.PR_CASE,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_CASE, yycolumn, yyline, yytext());
            }
          case 157: break;
          case 68: 
            { ScannerABC.agregarToken(yytext(),Token.PR_FILE,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_FILE, yycolumn, yyline, yytext());
            }
          case 158: break;
          case 69: 
            { ScannerABC.agregarToken(yytext(),Token.PR_BEGIN,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_BEGIN, yycolumn, yyline, yytext());
            }
          case 159: break;
          case 70: 
            { ScannerABC.agregarToken(yytext(),Token.PR_WRITE,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_WRITE, yycolumn, yyline, yytext());
            }
          case 160: break;
          case 71: 
            { ScannerABC.agregarToken(yytext(),Token.PR_WHILE,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_WHILE, yycolumn, yyline, yytext());
            }
          case 161: break;
          case 72: 
            { ScannerABC.agregarToken(yytext(),Token.PR_LABEL,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_LABEL, yycolumn, yyline, yytext());
            }
          case 162: break;
          case 73: 
            { ScannerABC.agregarToken(yytext(),Token.PR_ARRAY,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_ARRAY, yycolumn, yyline, yytext());
            }
          case 163: break;
          case 74: 
            { ScannerABC.agregarToken(yytext(),Token.PR_UNTIL,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_UNTIL, yycolumn, yyline, yytext());
            }
          case 164: break;
          case 75: 
            { ScannerABC.agregarToken(yytext(),Token.PR_CONST,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_CONST, yycolumn, yyline, yytext());
            }
          case 165: break;
          case 76: 
            { ScannerABC.agregarToken(yytext(),Token.PR_FLOAT,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_FLOAT, yycolumn, yyline, yytext());
            }
          case 166: break;
          case 77: 
            { ScannerABC.agregarToken(yytext(),Token.PR_FALSE,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_FALSE, yycolumn, yyline, yytext());
            }
          case 167: break;
          case 78: 
            { ScannerABC.agregarToken(yytext(),Token.PR_REPEAT,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_REPEAT, yycolumn, yyline, yytext());
            }
          case 168: break;
          case 79: 
            { ScannerABC.agregarToken(yytext(),Token.PR_RECORD,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_RECORD, yycolumn, yyline, yytext());
            }
          case 169: break;
          case 80: 
            { ScannerABC.agregarToken(yytext(),Token.PR_INLINE,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_INLINE, yycolumn, yyline, yytext());
            }
          case 170: break;
          case 81: 
            { ScannerABC.agregarToken(yytext(),Token.PR_PACKED,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_PACKED, yycolumn, yyline, yytext());
            }
          case 171: break;
          case 82: 
            { ScannerABC.agregarToken(yytext(),Token.PR_STRING,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_STRING, yycolumn, yyline, yytext());
            }
          case 172: break;
          case 83: 
            { ScannerABC.agregarToken(yytext(),Token.PR_DOWNTO,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_DOWNTO, yycolumn, yyline, yytext());
            }
          case 173: break;
          case 84: 
            { ScannerABC.agregarToken(yytext(),Token.PR_BOOLEAN,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_BOOLEAN, yycolumn, yyline, yytext());
            }
          case 174: break;
          case 85: 
            { ScannerABC.agregarToken(yytext(),Token.PR_LONGINT,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_LONGINT, yycolumn, yyline, yytext());
            }
          case 175: break;
          case 86: 
            { ScannerABC.agregarToken(yytext(),Token.PR_PROGRAM,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_PROGRAM, yycolumn, yyline, yytext());
            }
          case 176: break;
          case 87: 
            { ScannerABC.agregarToken(yytext(),Token.PR_FORWARD,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_FORWARD, yycolumn, yyline, yytext());
            }
          case 177: break;
          case 88: 
            { ScannerABC.agregarToken(yytext(),Token.PR_SHORTINT,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_SHORTINT, yycolumn, yyline, yytext());
            }
          case 178: break;
          case 89: 
            { ScannerABC.agregarToken(yytext(),Token.PR_FUNCTION,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_FUNCTION, yycolumn, yyline, yytext());
            }
          case 179: break;
          case 90: 
            { ScannerABC.agregarToken(yytext(),Token.PR_PROCEDURE,(yyline+1));
                    ScannerABC.nombreTokens.add(yytext());
                    return new Symbol(sym.PR_PROCEDURE, yycolumn, yyline, yytext());
            }
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
