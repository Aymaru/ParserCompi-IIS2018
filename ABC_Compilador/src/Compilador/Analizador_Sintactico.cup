/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package Compilador;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Analisis_Semantico.*;
//import java.util.LinkedList;

//------> Codigo para el parser,variables, metodos
parser code
{:

    private Generador_Codigo generador = new Generador_Codigo();

    public Generador_Codigo getGenerador() {
        return generador;
    }
    public String resultado="";
    public static ArrayList<Simbolo> tablaSimbolos = new ArrayList();

    public static boolean inCiclo=false;
    public static ArrayList<String> errores = new ArrayList<>();
    public static ArrayList<String> errSemantic = new ArrayList<>();
    public static ArrayList<String> lista_vars = new ArrayList<>();
    public static ArrayList<String[]> lista_params = new ArrayList<>();
    public static ArrayList<ArrayList<String>> funciones = new ArrayList<>();
    public static String funActual;
    public static String tipoActual;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);


        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), (linea+1)));
        //System.out.println(ScannerABC.errores.size());
       
        
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String token = s.value.toString();
        int linea = s.right;
        int columna = s.left;
        
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+token);
        System.out.println("\t\tFila: "+linea);
        System.out.println("\t\tColumna: "+columna);

        ScannerABC.errores.add(new ErrorToken(token,"ERROR_SINTAXIS","Error Sintáctico: Caracter " + token + " no esperado. Linea: " + (linea+1), linea+1));
     
    }

:}

//------> Codigo para las acciones gramaticales
action code
{:
:}

/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales


terminal String L_INTEGER, L_CHAR, L_FLOAT, L_STRING, IDENTIFICADOR; 
terminal O_XOR,
        PR_WRITE,
        PR_WITH,
        PR_WHILE,
        PR_VAR,
        PR_UNTIL,
        PR_TYPE,
        PR_TRUE,
        PR_TO,
        PR_THEN,
        PR_STRING,
        PR_SHORTINT,
        PR_SET,
        PR_REPEAT,
        PR_RECORD,
        PR_REAL,
        PR_READ,
        PR_PROGRAM,
        PR_PROCEDURE,
        PR_PACKED,
        O_OR,
        PR_OF,
        O_NOT,
        PR_NIL,
        O_MOD,
        PR_LONGINT,
        PR_LABEL,
        PR_INT,
        PR_INLINE,
        PR_IN,
        PR_IF,
        PR_GOTO,
        PR_FUNCTION,
        PR_FORWARD,
        PR_FOR,
        PR_FILE,
        PR_FALSE,
        PR_END,
        PR_ELSE,
        PR_DOWNTO,
        PR_DO,
        O_DIV,
        PR_CONST,
        PR_CHAR,
        PR_CASE,
        PR_BYTE,
        PR_BOOLEAN,
        PR_BEGIN,
        PR_ARRAY,
        O_AND,
        O_RIGHT_SQUARE_BRACKET,
        O_LEFT_SQUARE_BRACKET,
        O_GREATER_GREATER_EQUALS,
        O_GREATER_GREATER,
        O_GREATER_EQUALS,
        O_GREATER,
        O_EQUALS,
        O_LESS_GREATER,
        O_LESS_EQUALS,
        O_LESS_LESS_EQUALS,
        O_LESS_LESS,
        O_LESS,
        O_SEMICOLON,
        O_COLON_EQUALS,
        O_COLON,
        O_SLASH_EQUALS,
        O_SLASH,
        O_FULL_STOP,
        O_MINUS_EQUALS,
        O_MINUS_MINUS,
        O_MINUS,
        O_COMMA,
        O_PLUS_EQUALS,
        O_PLUS_PLUS,
        O_PLUS,
        O_ASTERISK_EQUALS,
        O_ASTERISK,
        O_RIGHT_PARENTHESIS,
        O_LEFT_PARENTHESIS;

//------> declaracion de no terminales
non terminal rrr, rr, r, kk, empty,INICIO,E,
        S,
        id,
        EntradaPrograma,
        SeccionConstantes,
        Constantes,
        Constante,
        ErrorConstante,
        ErroresConstantes,
        SeccionVariables,
        Variables,
        Variable,
        ErrorVariable,
        ErroresVariables,
        Identificadores, 
        Inicializar,
        Rutinas, 
        Rutina,
        SeccionConstantesFuncion,
        ConstantesFuncion,
        ConstanteFuncion,
        ErrorConstanteFuncion,
        SeccionVariablesFuncion,
        VariablesFuncion,
        VariableFuncion,
        EncabezadoProcedimiento, 
        EncabezadoFuncion, 
        Parametros,
        Parametro, 
        masParametros, 
        Instrucciones, 
        InstruccionBE,
        InstruccionSC,
        Expresion, 
        ExpresionOperadoresLogicos, 
        Expresion2,
        ExpresionOperadoresComparacion,
        Expresion3, 
        ExpresionOperadoresEnteros, 
        Expresion4,
        Expresion5,
        Expresion6,
        Expresion7,
        LParametro,
        ListaParametros,
        ExpresionAsignacion, 
        Instruccion, 
        IfThenElse, 
        Else,
        While,
        For, 
        IncrementoDecremento,
        OperadoresEnteros,
        OperadorAsignacion, 
        OperadoresComparacion,
        OperadoresLogicosBinarios,
        OperadoresLogicosUnarios, 
        Tipo,
        literal,
        Boolean;

//----> precedencia de menor a mayor
precedence left IDENTIFICADOR;
precedence nonassoc L_CHAR,
                L_STRING,
                L_INTEGER,
                L_FLOAT;

precedence left O_LEFT_PARENTHESIS, O_RIGHT_PARENTHESIS;
precedence left PR_BEGIN, PR_VAR, PR_PROCEDURE, PR_FUNCTION;

precedence left O_OR;
precedence left O_XOR;
precedence left O_AND;
precedence left O_EQUALS, O_LESS_GREATER;
precedence left O_LESS, O_LESS_EQUALS, O_GREATER, O_GREATER_EQUALS;
precedence left O_PLUS, O_MINUS;
precedence left O_ASTERISK, O_SLASH,O_DIV,O_MOD;
precedence left O_NOT,O_PLUS_PLUS,O_MINUS_MINUS;
precedence left O_LEFT_PARENTHESIS;
precedence left O_RIGHT_PARENTHESIS;
precedence left PR_TRUE;
precedence left PR_FALSE;


start with INICIO;

/*--------------- 3ra Area: Reglas Semanticas -----------------------*/

INICIO ::= PR_PROGRAM IDENTIFICADOR {: parser.getGenerador().iniciar_variables(); :} SeccionConstantes SeccionVariables {: parser.getGenerador().finalizar_variables(); parser.getGenerador().inicializar_pila(); parser.getGenerador().iniciar_codigo(); :} Rutinas EntradaPrograma {: System.out.println(parser.getGenerador().getCodigo());System.out.println(parser.getGenerador().getTabla_simbolos().toString()); :}
        |error {:System.out.println("Error en la estructura del programa");:};

EntradaPrograma ::= PR_BEGIN {: parser.getGenerador().inicio_programa(); :} Instrucciones PR_END {: parser.getGenerador().fin_programa(); :};

/**** Declaracion de Constantes y Variables ****/

SeccionConstantes ::= PR_CONST Constantes 
	|empty;

Constantes ::= Constante
	|empty;

Constante ::= id O_EQUALS literal O_SEMICOLON Constantes
        |error ErrorConstante {:System.out.println("Error");:};

ErrorConstante ::= O_SEMICOLON Constantes {:System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");:}
        |PR_VAR Variables  {:System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");:}
        |Rutinas {:System.out.println("Error Sintactico Constantes Recuperado con Rutinas");:};

SeccionVariables ::= PR_VAR Variables
	|empty;

Variables ::= Variable
	|empty;

Variable ::= id Identificadores O_COLON Tipo:tipo {: parser.getGenerador().guardar_variables_TS((String)tipo,1); :} Inicializar O_SEMICOLON Variables
        |error ErroresVariables {:System.out.println("Error Sintactico Variable Recuperado con ErroresVariables Variables");:};


ErroresVariables::= O_SEMICOLON Variables {:System.out.println("Error Sintactico Variable Recuperado con O_SEMICOLON Variables");:}
        |Rutinas {:System.out.println("Error Sintactico Constantes Recuperado con Rutinas");:};

Identificadores ::= O_COMMA id Identificadores
	|empty;

Inicializar ::= O_EQUALS literal 
	|empty;

/**** Rutinas ****/ 

Rutinas ::= Rutina
	|empty;

Rutina ::= EncabezadoProcedimiento SeccionConstantesFuncion SeccionVariablesFuncion PR_BEGIN Instrucciones PR_END Rutinas
	|EncabezadoFuncion r;

r ::= SeccionConstantesFuncion SeccionVariablesFuncion PR_BEGIN Instrucciones PR_END Rutinas
    | error rr {: System.out.println("Error en Parametros"); :};

rr ::= PR_END | Rutinas;

//

SeccionConstantesFuncion ::= PR_CONST ConstantesFuncion
	|empty;

ConstantesFuncion ::= Constante
	|empty;

ConstanteFuncion ::= IDENTIFICADOR O_EQUALS literal O_SEMICOLON ConstantesFuncion
        |error ErrorConstante {:System.out.println("Error");:};

ErrorConstanteFuncion ::= O_SEMICOLON ConstantesFuncion {:System.out.println("Error Sintactico Constantes Recuperado con O_SEMICOLON Constantes");:}
        |PR_VAR VariablesFuncion  {:System.out.println("Error Sintactico Constantes Recuperado con PR_VAR Variables");:}
        |Rutinas {:System.out.println("Error Sintactico Constantes Recuperado con Rutinas");:};

SeccionVariablesFuncion ::= PR_VAR VariablesFuncion
	|empty;

VariablesFuncion ::= VariableFuncion
	|empty;

VariableFuncion ::= IDENTIFICADOR Identificadores O_COLON Tipo Inicializar O_SEMICOLON VariablesFuncion
        |error ErroresVariables {:System.out.println("Error Sintactico Variable Recuperado con ErroresVariables Variables");:};

//

EncabezadoProcedimiento ::= PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS
        |PR_PROCEDURE IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS {: System.out.println("Error en Parametros"); :};

EncabezadoFuncion ::= PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS O_COLON Tipo
        |PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS error O_RIGHT_PARENTHESIS O_COLON Tipo {: System.out.println("Error en Parametros"); :}
        |PR_FUNCTION IDENTIFICADOR O_LEFT_PARENTHESIS Parametros O_RIGHT_PARENTHESIS error kk {: System.out.println("Error en Parametros2"); :};

kk ::= Tipo | r;

Parametros ::= Parametro;

Parametro ::= Tipo IDENTIFICADOR masParametros
        |Tipo error {: System.out.println("Error en Parametros recuperado en Parametro"); :}
	|empty;

masParametros ::= O_COMMA Tipo IDENTIFICADOR masParametros
	|empty;

/**** Expresiones ****/

Instrucciones ::= Instruccion Instrucciones
	|empty;

Expresion ::= Expresion2 ExpresionOperadoresLogicos;

ExpresionOperadoresLogicos ::= OperadoresLogicosBinarios Expresion2 ExpresionOperadoresLogicos
	|empty;

Expresion2 ::= Expresion3 ExpresionOperadoresComparacion;

ExpresionOperadoresComparacion ::= OperadoresComparacion Expresion3 ExpresionOperadoresComparacion
	|empty;

Expresion3 ::= Expresion4 ExpresionOperadoresEnteros;

ExpresionOperadoresEnteros ::= OperadoresEnteros Expresion4 ExpresionOperadoresEnteros
	|empty;

Expresion4 ::= IncrementoDecremento Expresion5
	|OperadoresLogicosUnarios Expresion5
	|Expresion5;

Expresion5::= Expresion6 IncrementoDecremento;

Expresion6::= IDENTIFICADOR Expresion7
	|O_LEFT_PARENTHESIS Expresion O_RIGHT_PARENTHESIS
        |O_LEFT_PARENTHESIS Expresion error {:System.out.println("Error Sintaxix, ) esperado");:}
	|literal;

Expresion7::= ExpresionAsignacion
	|O_LEFT_PARENTHESIS LParametro O_RIGHT_PARENTHESIS
        |O_LEFT_PARENTHESIS LParametro error {:System.out.println("Error Sintaxix, ) esperado");:};

ExpresionAsignacion::= OperadorAsignacion Expresion
	|empty;

LParametro::= Expresion ListaParametros
	|empty;

ListaParametros::= O_COMMA Expresion ListaParametros
        |O_COMMA error {:System.out.println("Error Sintaxix: Expresion esperada despues de la coma.");:}//////////////////////////////////
	|empty;

Instruccion ::= InstruccionBE
            | InstruccionSC;

InstruccionBE ::= IfThenElse
	|While
	|For
        |error PR_END {:System.out.println("Error Sintactico instruccionbe Recuperado con PR_END");:};
	
InstruccionSC ::= Expresion O_SEMICOLON
        |error O_SEMICOLON {:System.out.println("Error Sintactico instruccion sc Recuperado con O_SEMICOLON");:};
/*
//{: parser.getGenerador().start_if(); :}{: System.out.println("start if"); :}
//{: parser.getGenerador().end_if(); :}{: System.out.println("end if"); :}
//{: parser.getGenerador().else_if(); :}*/
IfThenElse ::= PR_IF  Expresion PR_THEN  Instrucciones Else  PR_END {: parser.getGenerador().start_if(); :} {: parser.getGenerador().end_if(); :}
        |PR_IF Expresion error PR_END {:System.out.println("Error Sintactico instruccion IF Recuperado con PR_END, Espera un PR_THEN");:}
        |PR_IF error  PR_THEN Instrucciones Else PR_END {:System.out.println("Error Sintactico instruccion IF Recuperado con PR_END");:};

//rrr ::= PR_THEN Instrucciones Else PR_END | Instrucciones Else PR_END | Else PR_END | PR_END ;

Else ::= PR_ELSE  /*{: System.out.println("else if"); :}*/ Instrucciones 
	|empty;

While ::= PR_WHILE Expresion PR_DO PR_BEGIN Instrucciones PR_END
        |PR_WHILE error PR_END {:System.out.println("Error Sintactico instruccion WHILE Recuperado con PR_END");:};

For ::= PR_FOR IDENTIFICADOR O_COLON_EQUALS Expresion PR_TO Expresion PR_DO PR_BEGIN Instrucciones PR_END
        |PR_FOR error PR_END {:System.out.println("Error Sintactico instruccion FOR Recuperado con PR_END");:};

/**** Operadores ****/

IncrementoDecremento ::= O_PLUS_PLUS
	|O_MINUS_MINUS
	|empty;
 
OperadoresEnteros ::= O_PLUS
	|O_MINUS
	|O_ASTERISK
	|O_SLASH
	|O_MOD
	|O_DIV;

OperadorAsignacion ::= O_COLON_EQUALS
	|O_PLUS_EQUALS
	|O_MINUS_EQUALS
	|O_ASTERISK_EQUALS
	|O_SLASH_EQUALS;

OperadoresComparacion ::= O_EQUALS
	|O_GREATER_EQUALS
	|O_GREATER
	|O_LESS_EQUALS
	|O_LESS
	|O_LESS_GREATER;

OperadoresLogicosBinarios ::= O_OR
	|O_AND;

OperadoresLogicosUnarios ::= O_NOT;

/**** Tipos y Literales ****/

Tipo ::= PR_BOOLEAN:t {: RESULT = t;:}
	|PR_INT:t {: RESULT = t;:}
	|PR_CHAR:t {: RESULT = t;:}
	|PR_LONGINT:t {: RESULT = t;:}
	|PR_SHORTINT:t {: RESULT = t;:}
	|PR_STRING:t {: RESULT = t;:}
	|PR_REAL:t {: RESULT = t;:};

literal ::= L_INTEGER 
	|L_FLOAT
	|L_STRING
	|L_CHAR
	|Boolean;

Boolean ::= PR_TRUE
	|PR_FALSE; 

id ::= IDENTIFICADOR: i {: parser.getGenerador().recordar_identificador((String) i);:};

empty ::= /* nothing */;